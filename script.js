// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –≤ script.js
// –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–∏:

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç
let TAROT_CARDS_CACHE = []; // –ö—ç—à –∫–∞—Ä—Ç —Å GitHub
let CARDS_LOADED = false; // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
let CARDS_LOADING_PROMISE = null; // Promise –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

// 1. –û–°–ù–û–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç —Å GitHub
async function loadCardsFromGitHub() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (CARDS_LOADING_PROMISE) {
        return CARDS_LOADING_PROMISE;
    }
    
    CARDS_LOADING_PROMISE = (async () => {
        try {
            console.log('üÉè –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç—ã —Å GitHub Raw...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            if (loadCardsFromCache()) {
                console.log('üì¶ –ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
                setTimeout(() => checkForCardsUpdate(), 1000);
                return;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å GitHub
            const cardsData = await fetchCardsFromGitHub();
            
            if (cardsData && cardsData.length > 0) {
                TAROT_CARDS_CACHE = cardsData;
                CARDS_LOADED = true;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                saveCardsToCache(cardsData);
                
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${TAROT_CARDS_CACHE.length} –∫–∞—Ä—Ç —Å GitHub`);
            } else {
                throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç —Å GitHub:', error);
            
            // –ü—Ä–æ–±—É–µ–º –∫—ç—à
            if (loadCardsFromCache()) {
                console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞—Ä—Ç—ã –∏–∑ –∫—ç—à–∞ (–æ—à–∏–±–∫–∞ GitHub)');
            } else {
                // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
                console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —Ñ–æ–ª–ª–±—ç–∫ –∫–∞—Ä—Ç—ã');
                TAROT_CARDS_CACHE = getLocalFallbackCards();
                CARDS_LOADED = true;
            }
        }
    })();
    
    return CARDS_LOADING_PROMISE;
}

// 2. –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GitHub API
async function fetchCardsFromGitHub() {
    const urls = [
        API_CONFIG.cardsUrl, 
        API_CONFIG.cardsFallbackUrl
    ].filter(Boolean);
    
    for (const url of urls) {
        try {
            console.log('üì° –ó–∞–ø—Ä–æ—Å –∫:', url);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.requestTimeout || 15000);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if (Array.isArray(data) && data.length > 0) {
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∫–∞—Ä—Ç —Å ${url}`);
                
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                const normalizedCards = data.map(card => normalizeCard(card));
                return normalizedCards;
                
            } else if (data.cards && Array.isArray(data.cards)) {
                // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –≤ —Å–≤–æ–π—Å—Ç–≤–µ cards
                console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data.cards.length} –∫–∞—Ä—Ç —Å ${url}`);
                const normalizedCards = data.cards.map(card => normalizeCard(card));
                return normalizedCards;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç');
            }
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å ${url}:`, error.message);
            continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL
        }
    }
    
    throw new Error('–í—Å–µ URL –∫–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
}

// 3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
function normalizeCard(card) {
    return {
        id: card.id || card.name,
        name: card.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
        symbol: card.symbol || 'üÉè',
        meaningUpright: card.meaningUpright || card.meaning || '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        meaningReversed: card.meaningReversed || card.meaningUpright || card.meaning || '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        meaning: card.meaning || card.meaningUpright || '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
        image: card.image || './images/cards/default.jpg'
    };
}

// 4. –§—É–Ω–∫—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
function saveCardsToCache(cards) {
    try {
        const cacheData = {
            cards: cards,
            timestamp: Date.now(),
            version: '2.0',
            source: 'github',
            url: API_CONFIG.cardsUrl
        };
        
        localStorage.setItem('tarot_cards_cache', JSON.stringify(cacheData));
        console.log('üíæ –ö–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à:', error);
    }
}

function loadCardsFromCache() {
    try {
        const cached = localStorage.getItem('tarot_cards_cache');
        if (!cached) return false;
        
        const cacheData = JSON.parse(cached);
        const cacheAge = Date.now() - cacheData.timestamp;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (24 —á–∞—Å–∞)
        if (cacheAge < (API_CONFIG.cacheTimeout || 24 * 60 * 60 * 1000) && 
            cacheData.cards && cacheData.cards.length > 0) {
            
            TAROT_CARDS_CACHE = cacheData.cards;
            CARDS_LOADED = true;
            
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${TAROT_CARDS_CACHE.length} –∫–∞—Ä—Ç –∏–∑ –∫—ç—à–∞ (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(cacheAge / 1000 / 60)} –º–∏–Ω)`);
            return true;
        } else {
            console.log('üóëÔ∏è –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è—é');
            localStorage.removeItem('tarot_cards_cache');
            return false;
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞:', error);
        localStorage.removeItem('tarot_cards_cache');
        return false;
    }
}

// 5. –§–æ–ª–ª–±—ç–∫ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function getLocalFallbackCards() {
    return typeof FALLBACK_CARDS !== 'undefined' ? FALLBACK_CARDS : [
        {
            id: "0", 
            name: "–ó–∞–≥–∞–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞", 
            symbol: "üîÆ",
            meaningUpright: "–ö–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —ç–Ω–µ—Ä–≥–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–π –≤—Å–µ —Ä–∞–≤–Ω–æ —Å –≤–∞–º–∏.",
            meaningReversed: "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
            meaning: "–ö–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —ç–Ω–µ—Ä–≥–∏—è –í—Å–µ–ª–µ–Ω–Ω–æ–π –≤—Å–µ —Ä–∞–≤–Ω–æ —Å –≤–∞–º–∏.",
            image: "./images/cards/default.jpg"
        },
        {
            id: "1", 
            name: "–ú–∞–≥", 
            symbol: "‚ö°",
            meaningUpright: "–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è. –£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.",
            meaningReversed: "–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∏–ª–æ–π, —Å–∞–º–æ–æ–±–º–∞–Ω, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏.",
            meaning: "–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è. –£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π.",
            image: "./images/cards/magician.jpg"
        },
        {
            id: "2", 
            name: "–®—É—Ç", 
            symbol: "üÉè",
            meaningUpright: "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞. –í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –¥–æ–≤–µ—Ä–∏—è –∏–Ω—Ç—É–∏—Ü–∏–∏.",
            meaningReversed: "–ë–µ–∑—Ä–∞—Å—Å—É–¥—Å—Ç–≤–æ, –Ω–µ–æ–±–¥—É–º–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏, –ª–µ–≥–∫–æ–º—ã—Å–ª–∏–µ.",
            meaning: "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞. –í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –¥–æ–≤–µ—Ä–∏—è –∏–Ω—Ç—É–∏—Ü–∏–∏.",
            image: "./images/cards/fool.jpg"
        }
    ];
}

// 6. –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
async function getRandomCard() {
    // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if (!CARDS_LOADED) {
        await loadCardsFromGitHub();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å
    if (TAROT_CARDS_CACHE.length === 0) {
        console.error('‚ùå –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫');
        const fallbackCards = getLocalFallbackCards();
        return fallbackCards[Math.floor(Math.random() * fallbackCards.length)];
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    const randomIndex = Math.floor(Math.random() * TAROT_CARDS_CACHE.length);
    const selectedCard = TAROT_CARDS_CACHE[randomIndex];
    
    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    const isReversed = Math.random() < 0.5;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏—è
    const card = {
        ...selectedCard,
        isReversed: isReversed,
        meaning: isReversed ? selectedCard.meaningReversed : selectedCard.meaningUpright,
        image: isReversed ? (selectedCard.imageReversed || selectedCard.image) : selectedCard.image,
        position: isReversed ? '–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' : '–ü—Ä—è–º–∞—è'
    };
    
    console.log('üé¥ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:', card.name, card.position);
    return card;
}

// 7. –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tarot Web App');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        initTelegramWebApp();
        
        // –í–ê–ñ–ù–û: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã —Å GitHub –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        const cardsPromise = loadCardsFromGitHub();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        if (typeof window.supabase !== 'undefined' && typeof SUPABASE_CONFIG !== 'undefined') {
            supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
            console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.warn('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏');
            initOfflineMode();
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadCurrentUser();
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç
        await cardsPromise;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        initEventListeners();
        switchTab('daily');
        checkFirstLaunch();
        addTestPremiumButton();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        console.log(`üÉè –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç: ${TAROT_CARDS_CACHE.length}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        initOfflineMode();
        initEventListeners();
        switchTab('daily');
    }
}

// 8. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
async function refreshCardsCache() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç...');
    
    CARDS_LOADED = false;
    CARDS_LOADING_PROMISE = null;
    localStorage.removeItem('tarot_cards_cache');
    
    await loadCardsFromGitHub();
    showNotification('üÉè –ö–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å GitHub!');
}

function getCardsStats() {
    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç:');
    console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ:', TAROT_CARDS_CACHE.length);
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏:', CARDS_LOADED ? '–ó–∞–≥—Ä—É–∂–µ–Ω—ã' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    console.log('üîó URL:', API_CONFIG.cardsUrl);
    
    const cached = localStorage.getItem('tarot_cards_cache');
    if (cached) {
        const cacheData = JSON.parse(cached);
        const cacheAge = Date.now() - cacheData.timestamp;
        console.log('üíæ –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞:', Math.round(cacheAge / 1000 / 60), '–º–∏–Ω—É—Ç');
        console.log('üè∑Ô∏è –í–µ—Ä—Å–∏—è –∫—ç—à–∞:', cacheData.version);
        console.log('üîó –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—ç—à–∞:', cacheData.source);
    } else {
        console.log('üíæ –ö—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    if (TAROT_CARDS_CACHE.length > 0) {
        console.log('üé¥ –ü—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç—ã:', TAROT_CARDS_CACHE[0]);
    }
}

async function testCardsLoading() {
    console.log('üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç —Å GitHub...');
    await refreshCardsCache();
    getCardsStats();
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
    const randomCard = await getRandomCard();
    console.log('üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞:', randomCard);
}

// 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞—Ä—Ç –≤ —Ñ–æ–Ω–µ
async function checkForCardsUpdate() {
    try {
        const cached = localStorage.getItem('tarot_cards_cache');
        if (!cached) return;
        
        const cacheData = JSON.parse(cached);
        const cacheAge = Date.now() - cacheData.timestamp;
        
        // –ï—Å–ª–∏ –∫—ç—à —Å—Ç–∞—Ä—à–µ 6 —á–∞—Å–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (cacheAge > 6 * 60 * 60 * 1000) {
            console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ —Ñ–æ–Ω–µ...');
            
            const newCards = await fetchCardsFromGitHub();
            
            if (newCards && newCards.length !== TAROT_CARDS_CACHE.length) {
                console.log('üÜï –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç!');
                TAROT_CARDS_CACHE = newCards;
                saveCardsToCache(newCards);
                showNotification('üÉè –ö–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            }
        }
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç:', error.message);
    }
}

// –£–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é getRandomCard(), –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ TAROT_CARDS
// –ó–∞–º–µ–Ω–∏—Ç—å –µ–µ –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–µ
