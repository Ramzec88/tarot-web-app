// script.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–®—ë–ø–æ—Ç –∫–∞—Ä—Ç"
// ========================================================================

console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ script.js...');

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let supabase = null;
let currentUser = null;
let appState = {
    currentTab: 'daily',
    questionsLeft: 3,
    isPremium: false,
    isInitialized: false,
    currentRating: 0,
    dailyCardUsed: false
};

// üö´ –§–õ–ê–ì–ò –°–û–°–¢–û–Ø–ù–ò–Ø
let isInitializing = false;
let supabaseInitialized = false;

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (appState.isInitialized || isInitializing) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        return;
    }
    
    isInitializing = true;

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingState();
        
        // 1. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)
        await waitForConfig();
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π UI –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        initBasicUI();
        
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramWebApp();
        
        // 4. –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        await initSupabaseOnce();
        
        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await initUser();
        
        // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        
        // 8. –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingState();
        
        // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        setTimeout(checkAndShowWelcome, 1000);
        
        appState.isInitialized = true;
        isInitializing = false;
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        isInitializing = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π UI –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        initBasicUI();
        setupEventListeners();
        hideLoadingState();
        
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    }
}

// üîÑ –ü–û–ö–ê–ó–ê–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
function showLoadingState() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let loader = document.getElementById('app-loader');
    if (!loader) {
        loader = document.createElement('div');
        loader.id = 'app-loader';
        loader.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            color: white;
            font-family: Arial, sans-serif;
        `;
        loader.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 48px; margin-bottom: 20px;">üîÆ</div>
                <div style="font-size: 20px; color: #ffd700;">–®—ë–ø–æ—Ç –∫–∞—Ä—Ç</div>
                <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        `;
        document.body.appendChild(loader);
    }
}

// ü´• –°–ö–†–´–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
function hideLoadingState() {
    const loader = document.getElementById('app-loader');
    if (loader) {
        loader.style.opacity = '0';
        setTimeout(() => loader.remove(), 300);
    }
}

// üé® –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–û–í–û–ì–û UI
function initBasicUI() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI...');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const hiddenElements = document.querySelectorAll('[style*="display: none"]');
        hiddenElements.forEach(el => {
            if (el.id !== 'app-loader') {
                el.style.display = '';
            }
        });
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤–∏–¥–Ω–∞
        const dailyTab = document.getElementById('daily-tab');
        if (dailyTab) {
            dailyTab.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–∞–±–∞
        const firstTabBtn = document.querySelector('.nav-tab[data-tab="daily"]');
        if (firstTabBtn) {
            firstTabBtn.classList.add('active');
        }
        
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ UI:', error);
    }
}

// ‚è∞ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function waitForConfig() {
    console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    let attempts = 0;
    const maxAttempts = 30; // 3 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º
    
    while (attempts < maxAttempts) {
        if (window.isConfigReady && window.isConfigReady()) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
            return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ 3 —Å–µ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë');
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
async function initSupabaseOnce() {
    if (supabaseInitialized) {
        console.log('‚úÖ Supabase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }
    
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase
        if (typeof window.supabase === 'undefined') {
            console.warn('‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = window.getSupabaseConfig ? window.getSupabaseConfig() : null;
        if (!config || !config.url || !config.anonKey) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return false;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase = window.supabase.createClient(config.url, config.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            }
        });
        
        supabaseInitialized = true;
        console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try {
                if (tg.version >= '6.1') {
                    tg.setHeaderColor('#1a1a2e');
                    tg.setBackgroundColor('#16213e');
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è –¶–≤–µ—Ç–∞ —Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏');
            }
            
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            if (tg.MainButton) {
                tg.MainButton.hide();
            }
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } else {
            console.log('‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// üë§ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initUser() {
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ localStorage
        let userData = loadUserData();
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            if (tgUser) {
                userData = {
                    id: tgUser.id,
                    firstName: tgUser.first_name,
                    lastName: tgUser.last_name,
                    username: tgUser.username,
                    languageCode: tgUser.language_code
                };
                saveUserData(userData);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ
        if (!userData) {
            userData = {
                id: 'anonymous_' + Date.now(),
                firstName: '–ì–æ—Å—Ç—å',
                isAnonymous: true
            };
        }
        
        currentUser = userData;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const savedState = loadAppState();
        if (savedState) {
            appState = { ...appState, ...savedState };
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', currentUser);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        
        // Fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        currentUser = {
            id: 'fallback_user',
            firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            isAnonymous: true
        };
    }
}

// üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    try {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
        const tabButtons = document.querySelectorAll('.nav-tab[data-tab]');
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                const tabName = this.getAttribute('data-tab');
                switchTab(tabName);
            });
        });
        
        // –ö–∞—Ä—Ç–∞ –¥–Ω—è
        const dailyCard = document.getElementById('daily-card');
        if (dailyCard) {
            dailyCard.addEventListener('click', handleDailyCardClick);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        const askBtn = document.getElementById('ask-btn');
        if (askBtn) {
            askBtn.addEventListener('click', handleAskQuestion);
        }
        
        // Enter –≤ –ø–æ–ª–µ –≤–æ–ø—Ä–æ—Å–∞
        const questionInput = document.getElementById('question-input');
        if (questionInput) {
            questionInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    handleAskQuestion();
                }
            });
        }
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

// üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    try {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        const tabButton = document.querySelector(`.nav-tab[data-tab="${tabName}"]`);
        const tabContent = document.getElementById(`${tabName}-tab`);
        
        if (tabButton) tabButton.classList.add('active');
        if (tabContent) tabContent.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.currentTab = tabName;
        saveAppState();
        
        console.log('‚úÖ –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', tabName);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
    }
}

// üîÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ö–ê–†–¢–ï –î–ù–Ø
async function handleDailyCardClick() {
    console.log('üîÆ –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    try {
        if (appState.dailyCardUsed) {
            showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!', 'info');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        const card = getRandomCard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
        const cardElement = document.getElementById('daily-card');
        if (cardElement) {
            cardElement.innerHTML = `
                <div class="card-front">
                    <div class="card-symbol">${card.symbol}</div>
                    <div class="card-name">${card.name}</div>
                </div>
            `;
            cardElement.classList.add('flipped');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        setTimeout(() => {
            const aiContainer = document.getElementById('daily-ai-container');
            if (aiContainer) {
                aiContainer.innerHTML = `
                    <div class="ai-interpretation">
                        <div class="ai-header">ü§ñ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã</div>
                        <div class="ai-content">${card.interpretation}</div>
                    </div>
                `;
            }
        }, 1000);
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        appState.dailyCardUsed = true;
        saveAppState();
        
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –ø–æ–∫–∞–∑–∞–Ω–∞:', card.name);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–ê
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
    
    try {
        const questionInput = document.getElementById('question-input');
        const question = questionInput ? questionInput.value.trim() : '';
        
        if (!question) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å', 'warning');
            return;
        }
        
        if (appState.questionsLeft <= 0 && !appState.isPremium) {
            showMessage('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç–µ Premium!', 'warning');
            switchTab('premium');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loadingElement = document.getElementById('question-loading');
        if (loadingElement) {
            loadingElement.style.display = 'block';
            loadingElement.textContent = '–ö–∞—Ä—Ç—ã —Ä–∞–∑–º—ã—à–ª—è—é—Ç...';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç (–ø–æ–∫–∞ —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ)
        const answer = await getAnswerToQuestion(question);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const answerSection = document.getElementById('first-answer-section');
        if (answerSection) {
            answerSection.style.display = 'block';
            
            // –ö–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            const answerCard = document.getElementById('answer-card');
            if (answerCard) {
                answerCard.innerHTML = `
                    <div class="card-front">
                        <div class="card-symbol">${answer.card.symbol}</div>
                        <div class="card-name">${answer.card.name}</div>
                    </div>
                `;
                answerCard.classList.add('flipped');
            }
            
            // –ò–ò —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            setTimeout(() => {
                if (loadingElement) loadingElement.style.display = 'none';
                
                const aiContainer = document.getElementById('first-ai-container');
                if (aiContainer) {
                    aiContainer.innerHTML = `
                        <div class="ai-interpretation">
                            <div class="ai-header">ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</div>
                            <div class="ai-content">${answer.interpretation}</div>
                        </div>
                    `;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                const followUpSection = document.getElementById('follow-up-section');
                if (followUpSection) {
                    followUpSection.style.display = 'block';
                }
            }, 2000);
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (!appState.isPremium) {
            appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
            updateUI();
            saveAppState();
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (questionInput) {
            questionInput.value = '';
        }
        
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å');
        
        const loadingElement = document.getElementById('question-loading');
        if (loadingElement) loadingElement.style.display = 'none';
    }
}

// üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
function updateUI() {
    console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        const statusElement = document.getElementById('subscription-status');
        if (statusElement) {
            const statusIcon = statusElement.querySelector('.status-icon');
            const statusText = statusElement.querySelector('.status-text');
            
            if (appState.isPremium) {
                if (statusIcon) statusIcon.textContent = 'üëë';
                if (statusText) statusText.textContent = 'Premium –∞–∫—Ç–∏–≤–µ–Ω';
                statusElement.style.background = 'linear-gradient(45deg, #ffd700, #ffed4a)';
                statusElement.style.color = '#1a1a2e';
            } else {
                if (statusIcon) statusIcon.textContent = 'üÜì';
                if (statusText) statusText.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è';
                statusElement.style.background = 'rgba(255, 255, 255, 0.1)';
                statusElement.style.color = '#fff';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        const questionsCountElement = document.getElementById('questions-count');
        if (questionsCountElement) {
            questionsCountElement.textContent = appState.questionsLeft;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        updateElementsVisibility();
        
        console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
    }
}

// üëÅÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ò–î–ò–ú–û–°–¢–ò –≠–õ–ï–ú–ï–ù–¢–û–í
function updateElementsVisibility() {
    try {
        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å premium —ç–ª–µ–º–µ–Ω—Ç—ã
        const premiumElements = document.querySelectorAll('.premium-only');
        premiumElements.forEach(el => {
            el.style.display = appState.isPremium ? 'block' : 'none';
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const basicElements = document.querySelectorAll('.basic-only');
        basicElements.forEach(el => {
            el.style.display = !appState.isPremium ? 'block' : 'none';
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
    }
}

// üé≤ –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–£–ß–ê–ô–ù–û–ô –ö–ê–†–¢–´
function getRandomCard() {
    const cards = getFallbackCards();
    if (cards && cards.length > 0) {
        return cards[Math.floor(Math.random() * cards.length)];
    }
    
    // Fallback –∫–∞—Ä—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    return {
        name: "–ó–≤–µ–∑–¥–∞",
        symbol: "‚≠ê",
        interpretation: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º."
    };
}

// ü§ñ –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ù–ê –í–û–ü–†–û–°
async function getAnswerToQuestion(question) {
    console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', question);
    
    try {
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ n8n
        const card = getRandomCard();
        
        const interpretations = [
            `–ö–∞—Ä—Ç–∞ ${card.name} –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}" —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –º—É–¥—Ä–æ—Å—Ç–∏. ${card.interpretation}`,
            `–í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç ${card.name}. –≠—Ç–æ –∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –±–ª–∏–∑–∫–æ. ${card.interpretation}`,
            `${card.name} –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ "${question}" —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. ${card.interpretation}`
        ];
        
        return {
            card: card,
            interpretation: interpretations[Math.floor(Math.random() * interpretations.length)]
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        throw error;
    }
}

// üîî –ü–û–ö–ê–ó–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï
function showMessage(message, type = 'info') {
    console.log(`üîî –°–æ–æ–±—â–µ–Ω–∏–µ (${type}):`, message);
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageDiv = document.createElement('div');
        messageDiv.className = `app-message app-message-${type}`;
        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'error' ? '#ef4444' : type === 'warning' ? '#f59e0b' : '#10b981'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            max-width: 90%;
            text-align: center;
            font-size: 14px;
        `;
        messageDiv.textContent = message;
        
        document.body.appendChild(messageDiv);
        
        // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// ‚ùå –ü–û–ö–ê–ó–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
function showErrorMessage(message) {
    showMessage(message, 'error');
}

// üîç –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ö–ê–ó –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
function checkAndShowWelcome() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è...');
    
    try {
        const hasShownWelcome = localStorage.getItem('tarot_welcome_shown');
        
        if (!hasShownWelcome && currentUser && currentUser.isAnonymous) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const welcomeModal = document.getElementById('profile-modal');
            if (welcomeModal) {
                welcomeModal.style.display = 'flex';
                setTimeout(() => welcomeModal.classList.add('show'), 100);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    }
}

// üíæ –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
function saveUserData(userData) {
    try {
        localStorage.setItem('tarot_user_data', JSON.stringify(userData));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

function loadUserData() {
    try {
        const data = localStorage.getItem('tarot_user_data');
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

function saveAppState() {
    try {
        const stateToSave = {
            questionsLeft: appState.questionsLeft,
            isPremium: appState.isPremium,
            dailyCardUsed: appState.dailyCardUsed,
            lastCardDate: new Date().toDateString(),
            currentTab: appState.currentTab
        };
        localStorage.setItem('tarot_app_state', JSON.stringify(stateToSave));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function loadAppState() {
    try {
        const data = localStorage.getItem('tarot_app_state');
        if (data) {
            const savedState = JSON.parse(data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è
            const today = new Date().toDateString();
            if (savedState.lastCardDate !== today) {
                savedState.dailyCardUsed = false;
            }
            return savedState;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        return null;
    }
}

// üÉè –ü–û–õ–£–ß–ï–ù–ò–ï FALLBACK –ö–ê–†–¢
function getFallbackCards() {
    if (window.getFallbackCards) {
        return window.getFallbackCards();
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return [
        {
            name: "–ó–≤–µ–∑–¥–∞",
            symbol: "‚≠ê",
            interpretation: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –í—Ä–µ–º—è –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –º–µ—á—Ç–∞–Ω–∏–π."
        },
        {
            name: "–°–æ–ª–Ω—Ü–µ",
            symbol: "‚òÄÔ∏è",
            interpretation: "–°–∏–º–≤–æ–ª —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞. –í–ø–µ—Ä–µ–¥–∏ —Å–≤–µ—Ç–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞."
        },
        {
            name: "–õ—É–Ω–∞",
            symbol: "üåô",
            interpretation: "–ö–∞—Ä—Ç–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Ç–∞–π–Ω. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É."
        },
        {
            name: "–ú–∞–≥",
            symbol: "üé©",
            interpretation: "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π."
        },
        {
            name: "–®—É—Ç",
            symbol: "üÉè",
            interpretation: "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
        }
    ];
}

// üîß –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
function debugApp() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        appState: appState,
        currentUser: currentUser,
        supabaseInitialized: supabaseInitialized,
        isInitializing: isInitializing,
        configReady: window.isConfigReady ? window.isConfigReady() : false
    });
}

// üåü –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨
window.tarotApp = {
    initApp,
    switchTab,
    appState,
    currentUser,
    updateUI,
    handleDailyCardClick,
    handleAskQuestion,
    showMessage,
    showErrorMessage,
    debugApp,
    saveAppState,
    getRandomCard,
    getFallbackCards
};

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
let appStarted = false;

document.addEventListener('DOMContentLoaded', function() {
    if (appStarted) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        return;
    }
    
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    appStarted = true;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    setTimeout(() => {
        initApp();
    }, 100);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ DOM —É–∂–µ –≥–æ—Ç–æ–≤
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(() => {
        if (!appStarted) {
            console.log('üèÅ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
            appStarted = true;
            initApp();
        }
    }, 50);
}

console.log('‚úÖ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
