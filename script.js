// script.js - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Tarot Web App (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let supabase;
let tg;
let currentUser = null;
let questionsLeft = 3;
let dailyCardDrawn = false;
let isPremium = false;
let history = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
let currentQuestionId = null; // ID —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è Supabase
let selectedRating = 0; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
let hasLaunched = false; // –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let userName = ''; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userBirthdate = ''; // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let localReviews = []; // –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testPremiumMode = false; // –§–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
let currentSpread = null; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tarot Web App');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
        if (typeof window.supabase !== 'undefined' && typeof SUPABASE_CONFIG !== 'undefined') {
            supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
            console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
             console.warn('Supabase –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ SUPABASE_CONFIG –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.');
             initOfflineMode(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º, –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
             initEventListeners(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –¥–∞–∂–µ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
             switchTab('daily'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–∞–±
             return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        initTelegramWebApp();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        await loadCurrentUser();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π UI
        initEventListeners();
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        switchTab('daily');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è/–ø—Ä–æ—Ñ–∏–ª—è
        checkFirstLaunch();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        addTestPremiumButton();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // Fallback –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ñ—Ñ–ª–∞–π–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        initOfflineMode();
        initEventListeners();
        switchTab('daily');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    if (window.Telegram && window.Telegram.WebApp) {
        tg = window.Telegram.WebApp;
        tg.ready(); // –°–æ–æ–±—â–∞–µ—Ç Telegram –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Web App
        tg.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç Web App –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        const user = tg.initDataUnsafe?.user; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        if (user) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
            currentUser = {
                telegram_id: user.id,
                username: user.username,
                first_name: user.first_name,
                last_name: user.last_name
            };
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram Web App –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Premium
        tg.MainButton.setText('üí≥ –ö—É–ø–∏—Ç—å Premium –∑–∞ 299‚ÇΩ');
        tg.MainButton.onClick(() => {
            if (typeof API_CONFIG !== 'undefined' && API_CONFIG && API_CONFIG.paymentUrl) {
                tg.openLink(API_CONFIG.paymentUrl); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
            } else {
                showNotification('–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.');
            }
        });
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ñ–æ–Ω–∞ Web App
        tg.setHeaderColor('#1a1a2e');
        tg.setBackgroundColor('#1a1a2e');
        
    } else {
        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ Telegram)');
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        currentUser = {
            telegram_id: Math.floor(Math.random() * 1000000) + 12345,
            username: 'test_user',
            first_name: 'Test User'
        };
    }
}

// –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ Supabase/Telegram
function initOfflineMode() {
    console.log('üîß –ó–∞–ø—É—Å–∫ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ
    if (!currentUser) {
        currentUser = {
            telegram_id: Math.floor(Math.random() * 1000000) + 12345,
            username: 'offline_user',
            first_name: 'Offline User'
        };
    }
    updateSubscriptionStatus(false); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
    questionsLeft = APP_CONFIG.freeQuestionsLimit || 3; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function loadCurrentUser() {
    if (!currentUser || !supabase) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ Supabase –∏–ª–∏ currentUser –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    
    try {
        const { data: existingUser, error } = await supabase
            .from(TABLES.userProfiles)
            .select('*')
            .eq('telegram_id', currentUser.telegram_id)
            .single(); // –û–∂–∏–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "PGRST116" - –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, —ç—Ç–æ –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
        if (error && error.code !== 'PGRST116') {
            throw error;
        }
        
        if (existingUser) {
            currentUser = { ...currentUser, ...existingUser }; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
            questionsLeft = existingUser.free_questions_left || 0;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –µ—ë —Å—Ä–æ–∫
            isPremium = existingUser.is_premium && new Date(existingUser.premium_expires_at) > new Date();
            
            const today = new Date().toISOString().split('T')[0];
            dailyCardDrawn = existingUser.daily_card_drawn_date === today; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–∞ –¥–Ω—è –≤—ã—Ç—è–Ω—É—Ç–∞ —Å–µ–≥–æ–¥–Ω—è
            
        } else {
            await createNewUser(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        }
        
        updateSubscriptionStatus(isPremium); // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        updateQuestionsDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function createNewUser() {
    if (!API_CONFIG || !API_CONFIG.createUser || !currentUser) return;
    
    try {
        const response = await fetch(API_CONFIG.createUser, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                username: currentUser.username,
                first_name: currentUser.first_name,
                is_premium: false,
                free_questions_left: APP_CONFIG.freeQuestionsLimit || 3,
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        currentUser = { ...currentUser, ...data };
        questionsLeft = APP_CONFIG.freeQuestionsLimit || 3;
        isPremium = false;
        
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ n8n');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ n8n:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ UI
function updateSubscriptionStatus(hasPremium) {
    const statusEl = document.getElementById('subscription-status');
    if (!statusEl) return;
    
    isPremium = hasPremium; // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ Premium
    
    if (hasPremium || testPremiumMode) { // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        statusEl.innerHTML = `
            <span class="status-icon">üëë</span>
            <span class="status-text">–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω</span>
        `;
        statusEl.classList.add('premium');
        questionsLeft = 999; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Premium
        
        if (tg && tg.MainButton) {
            tg.MainButton.hide(); // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
    } else {
        statusEl.innerHTML = `
            <span class="status-icon">üÜì</span>
            <span class="status-text">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è</span>
        `;
        statusEl.classList.remove('premium');
        
        if (tg && tg.MainButton) {
            tg.MainButton.show(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ UI
function updateQuestionsDisplay() {
    const questionsCountEl = document.getElementById('questions-count');
    if (questionsCountEl) {
        questionsCountEl.textContent = isPremium || testPremiumMode ? '‚àû' : questionsLeft; // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π UI
function initEventListeners() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –º–µ–Ω—é
    document.querySelectorAll('.nav-tabs .nav-tab').forEach(tab => {
        tab.removeEventListener('click', handleMainTabClick); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        tab.addEventListener('click', handleMainTabClick); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –º–µ–Ω—é
    document.querySelectorAll('.nav-tabs-secondary .nav-tab').forEach(tab => {
        tab.removeEventListener('click', handleSecondaryTabClick); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        tab.addEventListener('click', handleSecondaryTabClick); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    initOtherEventListeners();
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–∫–ª–∞–¥–∫–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function handleMainTabClick(e) {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    
    const tabName = this.getAttribute('data-tab'); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–∫–ª–∞–¥–∫–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
    console.log('üîÑ –ö–ª–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ç–∞–±—É:', tabName);
    
    if (tabName) {
        switchTab(tabName); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É
    } else {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω data-tab –∞—Ç—Ä–∏–±—É—Ç —É —ç–ª–µ–º–µ–Ω—Ç–∞:', this);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤—Ç–æ—Ä–∏—á–Ω—ã–º –≤–∫–ª–∞–¥–∫–∞–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function handleSecondaryTabClick(e) {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    
    const tabName = this.getAttribute('data-tab'); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–∫–ª–∞–¥–∫–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
    console.log('üîÑ –ö–ª–∏–∫ –ø–æ –≤—Ç–æ—Ä–∏—á–Ω–æ–º—É —Ç–∞–±—É:', tabName);
    
    if (tabName) {
        switchTab(tabName); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∫–ª–∞–¥–∫—É
    } else {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω data-tab –∞—Ç—Ä–∏–±—É—Ç —É —ç–ª–µ–º–µ–Ω—Ç–∞:', this);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
function switchTab(tab) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tab);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const targetContent = document.getElementById(tab + '-tab');
    if (!targetContent) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∞–±–∞:', tab);
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–æ–∫
    const allTabContents = document.querySelectorAll('.tab-content');
    allTabContents.forEach(content => {
        content.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å 'active' —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤–∫–ª–∞–¥–æ–∫ (–æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö)
    const allTabs = document.querySelectorAll('.nav-tab');
    allTabs.forEach(navTab => {
        navTab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
    targetContent.classList.add('active');
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è:', tab);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
    const targetTab = document.querySelector(`[data-tab="${tab}"]`);
    if (targetTab) {
        targetTab.classList.add('active');
        console.log('‚úÖ –¢–∞–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', tab);
    } else {
        console.error('‚ùå –¢–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω —Å data-tab:', tab);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    handleTabSpecificLogic(tab);
}

// –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
function handleTabSpecificLogic(tab) {
    switch(tab) {
        case 'history':
            loadHistory(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            break;
        case 'reviews':
            loadReviews(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            break;
        case 'premium':
            console.log('üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–µ—Ç–∏–ª Premium —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            break;
        case 'spreads':
            // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–†–∞—Å–∫–ª–∞–¥—ã" –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
            // –∏ —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç.
            const spreadsGrid = document.querySelector('.spreads-grid');
            const spreadDetail = document.getElementById('spread-detail');

            if (spreadsGrid) spreadsGrid.style.display = 'grid'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
            if (spreadDetail) spreadDetail.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ —Ä–∞—Å–∫–ª–∞–¥–∞

            currentSpread = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
            console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–æ–≤.');
            break;
        case 'daily':
            console.log('üåÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É –¥–Ω—è');
            break;
        case 'question':
            console.log('‚ùì –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã');
            // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const followUpSection = document.getElementById('follow-up-section');
            const followupAnswerSection = document.getElementById('followup-answer-section');
            const subscriptionBanner = document.getElementById('subscription-banner-question');
            const questionInput = document.getElementById('question-input');

            if (followUpSection) followUpSection.style.display = 'none';
            if (followupAnswerSection) followupAnswerSection.style.display = 'none';
            if (subscriptionBanner) subscriptionBanner.style.display = 'none';
            if (questionInput) questionInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–æ–ø—Ä–æ—Å–∞
            
            // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            const firstAiContainer = document.getElementById('first-ai-container');
            const answerCard = document.getElementById('answer-card');
            if (firstAiContainer) firstAiContainer.innerHTML = '';
            resetCardToDefault(answerCard);

            break;
        default:
            console.log('üìã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–∞–±:', tab);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initOtherEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', drawDailyCard);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    const askBtn = document.getElementById('ask-btn');
    if (askBtn) {
        askBtn.addEventListener('click', askQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ç–æ—á–Ω–∏—Ç—å"
    const followUpBtn = document.getElementById('follow-up-btn');
    if (followUpBtn) {
        followUpBtn.addEventListener('click', askFollowUpQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    const submitReviewBtn = document.getElementById('submit-review-btn');
    if (submitReviewBtn) {
        submitReviewBtn.addEventListener('click', submitReview);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener('click', clearHistory);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionInput = document.getElementById('question-input');
    if (questionInput) {
        questionInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                askQuestion();
            }
        });
    }
    
    const followUpInput = document.getElementById('follow-up-input');
    if (followUpInput) {
        followUpInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                askFollowUpQuestion();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ (–∑–≤–µ–∑–¥–æ—á–∫–∏)
    const stars = document.querySelectorAll('.star');
    stars.forEach(star => {
        star.addEventListener('click', function() {
            selectedRating = parseInt(this.dataset.rating);
            updateStarsDisplay();
        });
        
        star.addEventListener('mouseover', function() {
            const rating = parseInt(this.dataset.rating);
            highlightStars(rating);
        });
    });
    
    const starsContainer = document.getElementById('rating-stars');
    if (starsContainer) {
        starsContainer.addEventListener('mouseleave', function() {
            updateStarsDisplay();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    document.querySelectorAll('.spread-card').forEach(card => {
        card.addEventListener('click', function() {
            const spreadType = this.getAttribute('data-spread');
            if (spreadType) {
                openSpread(spreadType);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π)
    document.addEventListener('click', function(e) {
        const historyItem = e.target.closest('.history-item');
        if (historyItem) {
            const itemId = historyItem.getAttribute('data-id');
            if (itemId) {
                viewHistoryDetail(itemId);
            }
        }
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–Ω—É—Ç—Ä–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
        const bannerButton = e.target.closest('.banner-buttons .btn');
        if (bannerButton && bannerButton.hasAttribute('data-tab')) {
            const tabName = bannerButton.getAttribute('data-tab');
            switchTab(tabName);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö
    const backBtn = document.querySelector('.spread-detail .back-btn'); // –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    if (backBtn) {
        backBtn.removeEventListener('click', closeSpread); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        backBtn.addEventListener('click', closeSpread); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    }
}

// –°–±—Ä–æ—Å –∫–∞—Ä—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤)
function resetCardToDefault(cardElement) {
    if (!cardElement) return;
    
    cardElement.classList.remove('flipped'); // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    cardElement.innerHTML = `
        <div class="card-back">
            <div class="card-symbol">üîÆ</div>
            <div class="card-text">–í–∞—à –æ—Ç–≤–µ—Ç</div>
        </div>
    `;
    // –û—á–∏—â–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –±–ª–µ—Å—Ç–æ–∫
    const sparkles = cardElement.querySelectorAll('.sparkle');
    sparkles.forEach(sparkle => sparkle.remove());
}

// –ö–∞—Ä—Ç–∞ –¥–Ω—è
async function drawDailyCard() {
    if (dailyCardDrawn) {
        showNotification('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –≤—ã—Ç—è–Ω—É—Ç–∞ —Å–µ–≥–æ–¥–Ω—è!');
        return;
    }
    
    const card = document.getElementById('daily-card');
    const loading = document.getElementById('daily-loading');
    
    if (!card || !loading) return;
    
    loading.style.display = 'block';
    card.style.pointerEvents = 'none'; // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫
    
    addSparkles(card); // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å—Ç–∫–∏
    
    try {
        setTimeout(async () => {
            const randomCard = getRandomCard(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –≤ UI
            card.innerHTML = `
                <div class="card-name">${randomCard.name}</div>
                <img src="${randomCard.image}" alt="${randomCard.name}" class="card-image" onerror="this.style.display='none'">
                <div class="card-symbol">${randomCard.symbol}</div>
                <div class="card-meaning">${randomCard.meaning}</div>
            `;
            
            card.classList.add('flipped'); // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
            loading.style.display = 'none';
            dailyCardDrawn = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞—Ä—Ç–∞ –¥–Ω—è –≤—ã—Ç—è–Ω—É—Ç–∞
            
            await saveDailyCardToSupabase(randomCard); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –≤ Supabase
            
            setTimeout(async () => {
                const aiPrediction = await generateAIPredictionToContainer('daily-ai-container', 'daily', randomCard, ''); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–∞—Ä—Ç–∞ –¥–Ω—è) —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
                if (history.length > 0 && history[0].type === 'daily') {
                    history[0].aiPrediction = aiPrediction;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–∞–Ω–Ω–µ—Ä –∫–∞—Ä—Ç—ã –¥–Ω—è
                setTimeout(() => {
                    const banner = document.getElementById('daily-info-banner');
                    if (banner) {
                        banner.style.display = 'block';
                    }
                }, 2000);
            }, 1000);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            addToLocalHistory('daily', '–ö–∞—Ä—Ç–∞ –¥–Ω—è', '', [randomCard]); 
        }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "–º—ã—à–ª–µ–Ω–∏—è" –∫–∞—Ä—Ç
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        loading.style.display = 'none';
        card.style.pointerEvents = 'auto'; // –°–Ω–æ–≤–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ó–∞–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
function askQuestion() {
    console.log('üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"');
    
    const questionInput = document.getElementById('question-input');
    if (!questionInput) {
        console.error('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const question = questionInput.value.trim();
    console.log('üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    if (!question) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ Premium
    if (questionsLeft <= 0 && !isPremium && !testPremiumMode) {
        console.log('‚ùå –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
        checkAndShowSubscriptionBanner(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
        return;
    }
    
    console.log('‚úÖ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', question);
    performPrediction(question, false); // false = –Ω–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
}

// –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function askFollowUpQuestion() {
    const followUpInput = document.getElementById('follow-up-input');
    if (!followUpInput) return;
    
    const question = followUpInput.value.trim();
    if (!question) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞ Premium
    if (questionsLeft <= 0 && !isPremium && !testPremiumMode) {
        checkAndShowSubscriptionBanner();
        return;
    }
    
    performPrediction(question, true); // true = —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö)
async function performPrediction(question, isFollowUp) {
    console.log('üîÆ –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è:', question, 'isFollowUp:', isFollowUp);
    
    const answerSection = isFollowUp ? 
        document.getElementById('followup-answer-section') : 
        document.getElementById('first-answer-section');
    const answerCard = isFollowUp ? 
        document.getElementById('followup-answer-card') : 
        document.getElementById('answer-card');
    const loading = isFollowUp ? 
        document.getElementById('followup-loading') : 
        document.getElementById('question-loading');
    const askBtn = document.getElementById('ask-btn');
    const followUpBtn = document.getElementById('follow-up-btn');
    
    if (!answerSection || !answerCard || !loading) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    try {
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –≤–∏–¥—É
        resetCardToDefault(answerCard);
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
        if (!isFollowUp) {
            const firstAiContainer = document.getElementById('first-ai-container');
            if (firstAiContainer) {
                firstAiContainer.innerHTML = '';
            }
        } else {
            const followupAiContainer = document.getElementById('followup-ai-container');
            if (followupAiContainer) {
                followupAiContainer.innerHTML = '';
            }
        }
        
        answerSection.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        loading.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (askBtn) askBtn.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        if (followUpBtn) followUpBtn.disabled = true;
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏ –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
        if (!isFollowUp) {
            const followUpSection = document.getElementById('follow-up-section');
            const followupAnswerSection = document.getElementById('followup-answer-section');
            const subscriptionBanner = document.getElementById('subscription-banner-question');
            
            if (followUpSection) followUpSection.style.display = 'none';
            if (followupAnswerSection) followupAnswerSection.style.display = 'none';
            if (subscriptionBanner) subscriptionBanner.style.display = 'none';
            
            // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
            const followupAiContainer = document.getElementById('followup-ai-container');
            if (followupAiContainer) {
                followupAiContainer.innerHTML = '';
            }
        }
        
        addSparkles(answerCard); // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å—Ç–∫–∏ –∫ –∫–∞—Ä—Ç–µ
        
        const questionRecord = await saveQuestionToSupabase(question, isFollowUp); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
        currentQuestionId = questionRecord?.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
        
        setTimeout(async () => {
            const randomCard = getRandomCard(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –≤ UI
            answerCard.innerHTML = `
                <div class="card-name">${randomCard.name}</div>
                <img src="${randomCard.image}" alt="${randomCard.name}" class="card-image" onerror="this.style.display='none'">
                <div class="card-symbol">${randomCard.symbol}</div>
                <div class="card-meaning">${randomCard.meaning}</div>
            `;
            
            answerCard.classList.add('flipped'); // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã
            loading.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (askBtn) askBtn.disabled = false; // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            if (followUpBtn) followUpBtn.disabled = false;
            
            setTimeout(async () => {
                const aiContainerId = isFollowUp ? 'followup-ai-container' : 'first-ai-container';
                const aiPrediction = await generateAIPredictionToContainer(aiContainerId, 'question', randomCard, question); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                
                if (currentQuestionId) {
                    await saveAnswerToSupabase(currentQuestionId, randomCard, aiPrediction); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
                // (–∞–∫—Ç—É–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
                if (history.length > 0 && (history[0].id === currentQuestionId || (!history[0].id && !isFollowUp))) {
                    history[0].aiPrediction = aiPrediction;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                if (!isFollowUp) {
                    setTimeout(() => {
                        const followUpSection = document.getElementById('follow-up-section');
                        if (followUpSection) {
                            followUpSection.style.display = 'block';
                        }
                    }, 1500);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                setTimeout(() => {
                    checkAndShowSubscriptionBanner();
                }, 2000);
                
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ Premium
            if (!isPremium && !testPremiumMode) {
                questionsLeft--;
                await updateUserQuestionsInSupabase(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                updateQuestionsDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            if (isFollowUp) {
                document.getElementById('follow-up-input').value = '';
            } else {
                document.getElementById('question-input').value = '';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            addToLocalHistory('question', isFollowUp ? '–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å' : '–í–æ–ø—Ä–æ—Å', question, [randomCard], aiPrediction);
            
        }, 2500); // –û–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ performPrediction:', error);
        if (loading) loading.style.display = 'none';
        if (askBtn) askBtn.disabled = false;
        if (followUpBtn) followUpBtn.disabled = false;
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
function getRandomCard() {
    if (typeof TAROT_CARDS === 'undefined' || TAROT_CARDS.length === 0) {
        console.error('‚ùå TAROT_CARDS –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã!');
        return { name: "–û—à–∏–±–∫–∞", symbol: "!", meaning: "–ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TAROT_CARDS –≤ config.js" };
    }
    return TAROT_CARDS[Math.floor(Math.random() * TAROT_CARDS.length)];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
async function generateAIPredictionToContainer(containerId, type, card, question = '') {
    const container = document.getElementById(containerId);
    if (!container) return '';
    
    const aiBlock = document.createElement('div');
    aiBlock.className = 'ai-prediction';
    aiBlock.innerHTML = `
        <div class="ai-header">
            <div class="ai-icon">ü§ñ</div>
            <div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div>
        </div>
        <div class="ai-content">
            <div class="generating-text">–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...</div>
        </div>
    `;
    
    container.appendChild(aiBlock);
    
    try {
        let prediction = '';
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (typeof API_CONFIG !== 'undefined' && API_CONFIG.generatePrediction) {
            
            const requestData = {
                type: type,
                card: {
                    name: card.name,
                    symbol: card.symbol,
                    meaning: card.meaning,
                    image: card.image || ''
                },
                question: question || '',
                userName: userName || '–ì–æ—Å—Ç—å',
                userBirthdate: userBirthdate || '',
                timestamp: new Date().toISOString(),
                requestId: Date.now()
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ n8n:', requestData);

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.requestTimeout || 30000);

            const response = await fetch(API_CONFIG.generatePrediction, {
                method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: POST –≤–º–µ—Å—Ç–æ GET
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                body: JSON.stringify(requestData),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const responseText = await response.text();
            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç n8n (raw):', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç:', responseText);
                result = { prediction: responseText };
            }

            prediction = result.prediction || result.response || result.message || responseText || "–ö–∞—Ä—Ç—ã –º–æ–ª—á–∞—Ç —Å–µ–≥–æ–¥–Ω—è...";
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò:', prediction);

        } else {
            console.warn('‚ö†Ô∏è API_CONFIG –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
            prediction = generatePredictionText(type, card, question);
        }
       
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            if (aiContent) {
                typeWriter(aiContent, prediction, 30);
            }
        }, 2000); 
        
        return prediction;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏):', error);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò';
        
        if (error.name === 'AbortError') {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò';
        } else if (error.message.includes('404')) {
            errorMessage = '–≠–Ω–¥–ø–æ–∏–Ω—Ç –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (error.message.includes('CORS')) {
            errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏';
        }
        
        console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', errorMessage);
        
        // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        const prediction = generatePredictionText(type, card, question);
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            if (aiContent) {
                typeWriter(aiContent, prediction, 50);
            }
        }, 2000); 
        return prediction;
    }
}

// –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Ñ–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ AI API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
function generatePredictionText(type, card, question) {
    const predictions = {
        daily: [
            `–°–µ–≥–æ–¥–Ω—è –∫–∞—Ä—Ç–∞ "${card.name}" –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å. ${card.meaning.toLowerCase()} –ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.`,
            `–≠–Ω–µ—Ä–≥–∏—è –∫–∞—Ä—Ç—ã "${card.name}" –æ–∫—Ä—É–∂–∞–µ—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –º–æ—â–Ω–æ–π –∞—É—Ä–æ–π. ${card.meaning.toLowerCase()} –≠—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–∂–Ω—ã–µ –æ–∑–∞—Ä–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–π —Å—Ñ–µ—Ä–µ.`,
            `"${card.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. ${card.meaning.toLowerCase()} –ü–ª–∞–Ω–µ—Ç—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –∫ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.`
        ],
        question: [
            `–û—Ç–≤–µ—á–∞—è –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}", –∫–∞—Ä—Ç–∞ "${card.name}" –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª—É–±–æ–∫—É—é –∏—Å—Ç–∏–Ω—É. ${card.meaning.toLowerCase()} –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–ª—é—á –∫ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö.`,
            `–í–∞—à –≤–æ–ø—Ä–æ—Å "${question}" —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç —Å —ç–Ω–µ—Ä–≥–∏–µ–π –∫–∞—Ä—Ç—ã "${card.name}". ${card.meaning.toLowerCase()} –î—É—Ö–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —Å–æ–≤–µ—Ç—É—é—Ç –ø—Ä–æ—è–≤–∏—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-7 –¥–Ω–µ–π.`,
            `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–∞–µ—Ç —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ "${question}": ${card.meaning.toLowerCase()} –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–∞–Ω–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Ç—É—â–µ–π –ª—É–Ω—ã.`
        ]
    };
    
    const typeArray = predictions[type] || predictions.daily;
    return typeArray[Math.floor(Math.random() * typeArray.length)];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑ –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
function checkAndShowSubscriptionBanner() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ Premium –∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if (!isPremium && !testPremiumMode && questionsLeft <= 0) {
        const banner = document.getElementById('subscription-banner-question');
        if (banner) {
            banner.style.display = 'block';
            setTimeout(() => {
                banner.scrollIntoView({ behavior: 'smooth', block: 'center' }); // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –±–∞–Ω–Ω–µ—Ä—É
            }, 300);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function checkFirstLaunch() {
    if (!hasLaunched) {
        const profileModal = document.getElementById('profile-modal');
        if (profileModal) {
            profileModal.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            
            // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫ –∫–Ω–æ–ø–∫–∞–º —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
            const profileForm = document.getElementById('profile-form');
            if (profileForm) {
                profileForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    saveWelcomeData();
                });
            }
            const skipBtn = document.getElementById('skip-profile-btn');
            if (skipBtn) {
                skipBtn.addEventListener('click', skipWelcome);
            }
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function saveWelcomeData() {
    const nameInput = document.getElementById('display-name');
    const birthdateInput = document.getElementById('birth-date');
    
    const inputName = nameInput ? nameInput.value.trim() : '';
    const inputBirthdate = birthdateInput ? birthdateInput.value : '';
    
    if (inputName) {
        userName = inputName;
        if (currentUser) {
            currentUser.display_name = inputName;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è display_name –≤ Supabase
            // if (supabase) await supabase.from(TABLES.userProfiles).update({ display_name: inputName }).eq('telegram_id', currentUser.telegram_id);
        }
    }
    
    if (inputBirthdate) {
        userBirthdate = inputBirthdate;
        if (currentUser) {
            currentUser.birthdate = inputBirthdate;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è birthdate –≤ Supabase
            // if (supabase) await supabase.from(TABLES.userProfiles).update({ birthdate: inputBirthdate }).eq('telegram_id', currentUser.telegram_id);
        }
    }
    
    hasLaunched = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ
    closeWelcomeModal(); // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    
    if (inputName) {
        showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${inputName}! –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ú®`);
    } else {
        showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ú®');
    }
}

// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
function skipWelcome() {
    hasLaunched = true; // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ
    closeWelcomeModal(); // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ú®');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
function closeWelcomeModal() {
    const modal = document.getElementById('profile-modal');
    if (modal) {
        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CSS-–∞–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —Å –∫–ª–∞—Å—Å–æ–º 'hide'
        modal.classList.add('hide'); 
        setTimeout(() => {
            modal.style.display = 'none';
            modal.classList.remove('hide');
        }, 300); // –î–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å transition –≤ CSS
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ Telegram –∏–ª–∏ alert)
function showNotification(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function typeWriter(element, text, speed = 50) {
    if (!element) return;
    element.innerHTML = '';
    let i = 0;
    
    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–µ—Å—Ç–æ–∫
function addSparkles(element) {
    if (!element) return;
    // –û—á–∏—â–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –±–ª–µ—Å—Ç–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
    const existingSparkles = element.querySelectorAll('.sparkle');
    existingSparkles.forEach(s => s.remove());

    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const sparkle = document.createElement('div');
            sparkle.className = 'sparkle';
            sparkle.textContent = '‚ú®';
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –±–ª–µ—Å—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const rect = element.getBoundingClientRect();
            sparkle.style.left = `${Math.random() * rect.width}px`;
            sparkle.style.top = `${Math.random() * rect.height}px`;
            sparkle.style.position = 'absolute'; // –≠–ª–µ–º–µ–Ω—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –±–ª–µ—Å—Ç–∫–∏, –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å position: relative
            element.appendChild(sparkle);
            
            setTimeout(() => {
                sparkle.remove();
            }, 2000); // –ë–ª–µ—Å—Ç–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        }, i * 200); // –ü–æ—è–≤–ª–µ–Ω–∏–µ –±–ª–µ—Å—Ç–æ–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
// cards: –¥–ª—è daily/question —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç ({name, symbol, meaning, image}),
// –¥–ª—è spreads —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {card: {}, positionName: "", interpretation: ""}
function addToLocalHistory(type, title, question, cards, aiPrediction = '') {
    const now = new Date();
    const historyItem = {
        id: Date.now(),
        date: now.toLocaleDateString('ru-RU'),
        time: now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        timestamp: now.getTime(),
        type: type,
        title: title,
        question: question,
        cards: cards, // –ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏/–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏
        aiPrediction: aiPrediction // –¢–æ–ª—å–∫–æ –¥–ª—è daily/question
    };
    
    history.unshift(historyItem); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    const oneMonthAgo = now.getTime() - (30 * 24 * 60 * 60 * 1000);
    history = history.filter(item => item.timestamp > oneMonthAgo);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
    if (history.length > 100) {
        history = history.slice(0, 100);
    }
    
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', historyItem);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
async function loadHistory() {
    renderHistory();
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –≤ UI
function renderHistory() {
    const historyList = document.getElementById('history-list');
    if (!historyList) return;
    
    if (history.length === 0) {
        historyList.innerHTML = `
            <div class="empty-history">
                <div class="empty-icon">üîÆ</div>
                <p>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç–∞.<br>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ä—Ç—ã –¥–Ω—è –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!</p>
            </div>
        `;
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –¥–∞—Ç–∞–º
    const groupedHistory = {};
    history.forEach(item => {
        if (!groupedHistory[item.date]) {
            groupedHistory[item.date] = [];
        }
        groupedHistory[item.date].push(item);
    });
    
    let historyHTML = '';
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –¥–∞—Ç
    Object.keys(groupedHistory).forEach(date => {
        historyHTML += `<div class="history-date-group">
            <div class="history-date-header">${date}</div>`;
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ç–æ—Ä–∏–∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
        groupedHistory[date].forEach(item => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
            const typeIcon = item.type === 'daily' ? 'üåÖ' : (item.type === 'question' ? '‚ùì' : 'üÉè');
            const typeColor = item.type === 'daily' ? '#ffd700' : (item.type === 'question' ? '#667eea' : '#a276b2');
            
            historyHTML += `
                <div class="history-item" data-id="${item.id}" style="border-left-color: ${typeColor}">
                    <div class="history-header">
                        <div class="history-type">
                            <span class="history-icon">${typeIcon}</span>
                            ${item.title}
                        </div>
                        <div class="history-time">${item.time}</div>
                    </div>
                    ${item.question ? `<div class="history-question">"${item.question}"</div>` : ''}
                    <div class="history-cards">
                        ${item.cards.map(cardItem => {
                            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã (–¥–ª—è daily/question cardItem —ç—Ç–æ —Å–∞–º–∞ –∫–∞—Ä—Ç–∞, –¥–ª—è spreads —ç—Ç–æ {card, position...})
                            const card = cardItem.card || cardItem; 
                            const positionName = cardItem.positionName || ''; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                            return `
                                <div class="history-mini-card">
                                    ${card.symbol} ${card.name} ${positionName ? `(${positionName})` : ''}
                                </div>
                            `;
                        }).join('')}
                    </div>
                    <div class="history-actions">
                        <button class="history-btn" onclick="viewHistoryDetail('${item.id}')">
                            üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        ${item.aiPrediction || (item.type === 'spread' && item.cards.some(c => c.interpretation)) ? `
                            <button class="history-btn" onclick="sendToTelegram('${item.id}')">
                                üì§ –í Telegram
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        historyHTML += '</div>';
    });
    
    historyList.innerHTML = historyHTML;
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function viewHistoryDetail(id) {
    const item = history.find(h => h.id == id);
    if (!item) return;
    
    const modal = document.createElement('div');
    modal.className = 'history-modal';
    modal.innerHTML = `
        <div class="history-modal-content">
            <div class="history-modal-header">
                <h3>${item.type === 'daily' ? 'üåÖ' : (item.type === 'question' ? '‚ùì' : 'üÉè')} ${item.title}</h3>
                <button class="history-modal-close" onclick="closeHistoryModal()">&times;</button>
            </div>
            <div class="history-modal-body">
                <div class="history-detail-date">üìÖ ${item.date} –≤ ${item.time}</div>
                
                ${item.question ? `
                    <div class="history-detail-question">
                        <strong>‚ùì –í–æ–ø—Ä–æ—Å:</strong>
                        <p>"${item.question}"</p>
                    </div>
                ` : ''}
                
                <div class="history-detail-cards">
                    <strong>üÉè –ö–∞—Ä—Ç—ã:</strong>
                    ${item.cards.map(cardItem => {
                        const card = cardItem.card || cardItem; // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
                        const positionName = cardItem.positionName || ''; // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        return `
                            <div class="history-detail-card">
                                <div class="card-header">
                                    <span class="card-symbol-large">${card.symbol}</span>
                                    <span class="card-name-large">${card.name}</span>
                                </div>
                                ${positionName ? `<div class="card-position-name">${positionName}:</div>` : ''}
                                <div class="card-meaning-detail">${card.meaning}</div>
                            </div>
                        `;
                    }).join('')}
                </div>
                
                ${item.aiPrediction ? `
                    <div class="history-detail-prediction">
                        <strong>ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</strong>
                        <p>${item.aiPrediction}</p>
                    </div>
                ` : (item.type === 'spread' && item.cards.some(c => c.interpretation)) ? `
                    <div class="history-detail-prediction">
                        <strong>ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç:</strong>
                        ${item.cards.map(cardItem => `
                            <p><strong>${cardItem.card.name}${cardItem.positionName ? ` (${cardItem.positionName})` : ''}:</strong> ${cardItem.interpretation || '–ù–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è'}</p>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
            <div class="history-modal-footer">
                <button class="btn btn-secondary" onclick="closeHistoryModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                ${item.aiPrediction || (item.type === 'spread' && item.cards.some(c => c.interpretation)) ? `
                    <button class="btn" onclick="sendToTelegram('${item.id}')">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram</button>
                ` : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
function closeHistoryModal() {
    const modal = document.querySelector('.history-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove(); // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM
        }, 300);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤ Telegram
function sendToTelegram(id) {
    const item = history.find(h => h.id == id);
    if (!item) return;
    
    let message = `üîÆ ${item.title}\n`;
    message += `üìÖ ${item.date} –≤ ${item.time}\n\n`;
    
    if (item.question) {
        message += `‚ùì –í–æ–ø—Ä–æ—Å: "${item.question}"\n\n`;
    }
    
    message += `üÉè –ö–∞—Ä—Ç—ã:\n`;
    item.cards.forEach(cardItem => {
        const card = cardItem.card || cardItem;
        const positionName = cardItem.positionName || '';
        message += `${card.symbol} ${card.name}${positionName ? ` (${positionName})` : ''}\n`;
        message += `${card.meaning}\n\n`;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º AI-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
    if (item.aiPrediction) {
        message += `ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:\n${item.aiPrediction}`;
    } else if (item.type === 'spread' && item.cards.some(c => c.interpretation)) {
        message += `ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç:\n`;
        item.cards.forEach(cardItem => {
            message += `${cardItem.card.name}${cardItem.positionName ? ` (${cardItem.positionName})` : ''}: ${cardItem.interpretation || '–ù–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è'}\n`;
        });
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç–∞
    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            type: 'history_share',
            data: item, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
            text_message: message // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –±–æ—Ç–∞
        }));
        showNotification('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–∞!'); // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    } else {
        // –§–æ–ª–ª–±—ç–∫ - –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(message).then(() => {
            showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        });
    }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è viewHistoryDetail (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
function viewHistoryItem(id) {
    viewHistoryDetail(id);
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
function clearHistory() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?')) {
        history = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—Ä–∏–∏
        renderHistory(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
async function loadReviews() {
    console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤');
    renderReviews(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
}

// –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –æ—Ç–∑—ã–≤–æ–≤ –≤ UI
function renderReviews() {
    const reviewsList = document.getElementById('reviews-list');
    if (!reviewsList) return;
    
    // –°—Ç–∞—Ç–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞)
    const staticReviews = [
        {
            id: 1, author: '@maria_k', rating: 5,
            text: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è! –ö–∞—Ä—Ç–∞ –¥–Ω—è –≤—Å–µ–≥–¥–∞ –≤ —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–µ—Ç. –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ.',
            date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥', isAnonymous: false
        },
        {
            id: 2, author: '–ê–Ω–æ–Ω–∏–º–Ω–æ', rating: 5,
            text: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥! –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã - —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ.',
            date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥', isAnonymous: true
        },
        {
            id: 3, author: '@alexey_777', rating: 4,
            text: '–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫—Ä–∞—Å–∏–≤—ã–π, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ.',
            date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥', isAnonymous: false
        }
    ];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º) —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏
    const allReviews = [...localReviews, ...staticReviews];
    
    let reviewsHTML = '';
    
    allReviews.forEach(review => {
        const stars = '‚òÖ'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–µ–∫
        const isLongText = review.text.length > 150;
        const shortText = isLongText ? review.text.substring(0, 150) + '...' : review.text; // –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        reviewsHTML += `
            <div class="review-item">
                <div class="review-header">
                    <div class="review-author">${review.author}</div>
                    <div class="review-rating">${stars}</div>
                    <div class="review-date">${review.date}</div>
                </div>
                <div class="review-text" id="review-text-${review.id}">
                    <span class="review-short"${isLongText ? '' : ' style="display: none;"'}>${shortText}</span>
                    <span class="review-full"${isLongText ? ' style="display: none;"' : ''}>${review.text}</span>
                    ${isLongText ? `
                        <button class="review-expand-btn" onclick="toggleReviewText(${review.id})">
                            <span class="expand-text">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</span>
                            <span class="collapse-text" style="display: none;">–°–≤–µ—Ä–Ω—É—Ç—å</span>
                        </button>
                    ` : ''}
                </div>
            </div>
        `;
    });
    
    reviewsList.innerHTML = reviewsHTML;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤
    updateReviewsStats(allReviews);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥)
function updateReviewsStats(reviews) {
    const totalReviews = reviews.length;
    const averageRating = totalReviews > 0 ? reviews.reduce((sum, review) => sum + review.rating, 0) / totalReviews : 0;
    
    const reviewsTotalEl = document.getElementById('reviews-total');
    const ratingDisplay = document.querySelector('.rating');
    
    if (reviewsTotalEl) {
        reviewsTotalEl.textContent = totalReviews;
    }
    
    if (ratingDisplay) {
        // –û–∫—Ä—É–≥–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ –æ–¥–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–≤–µ–∑–¥—ã
        const stars = '‚òÖ'.repeat(Math.round(averageRating)) + '‚òÜ'.repeat(5 - Math.round(averageRating));
        ratingDisplay.textContent = `${averageRating.toFixed(1)} ${stars}`;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–∑—ã–≤–∞
function toggleReviewText(reviewId) {
    const reviewTextEl = document.getElementById(`review-text-${reviewId}`);
    if (!reviewTextEl) return;
    
    const shortSpan = reviewTextEl.querySelector('.review-short');
    const fullSpan = reviewTextEl.querySelector('.review-full');
    const expandBtn = reviewTextEl.querySelector('.review-expand-btn');
    const expandText = expandBtn.querySelector('.expand-text');
    const collapseText = expandBtn.querySelector('.collapse-text');
    
    const isExpanded = fullSpan.style.display !== 'none';
    
    if (isExpanded) {
        shortSpan.style.display = 'inline';
        fullSpan.style.display = 'none';
        expandText.style.display = 'inline';
        collapseText.style.display = 'none';
    } else {
        shortSpan.style.display = 'none';
        fullSpan.style.display = 'inline';
        expandText.style.display = 'none';
        collapseText.style.display = 'inline';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
async function submitReview() {
    const reviewText = document.getElementById('review-text');
    const anonymousCheckbox = document.getElementById('anonymous-review');
    const submitBtn = document.getElementById('submit-review-btn');
    
    if (!selectedRating) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É');
        return;
    }
    
    if (!reviewText) {
        showNotification('–ü–æ–ª–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const text = reviewText.value.trim();
    if (!text) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
        const isAnonymous = anonymousCheckbox ? anonymousCheckbox.checked : false;
        const authorName = isAnonymous ? '–ê–Ω–æ–Ω–∏–º–Ω–æ' : (userName || '@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        
        const newReview = {
            id: Date.now(),
            author: authorName,
            rating: selectedRating,
            text: text,
            date: '—Ç–æ–ª—å–∫–æ —á—Ç–æ', // –î–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            isAnonymous: isAnonymous,
            timestamp: Date.now() // –ú–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        localReviews.unshift(newReview);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...';
            submitBtn.classList.add('loading'); // –î–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–∑–∞–¥–µ—Ä–∂–∫–∞)
        setTimeout(() => {
            showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚ú®');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–∞
            reviewText.value = '';
            selectedRating = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            updateStarsDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥
            if (anonymousCheckbox) anonymousCheckbox.checked = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
            renderReviews();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
                submitBtn.classList.remove('loading');
            }
            
            // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–≤–æ–π –æ—Ç–∑—ã–≤
            setTimeout(() => {
                const reviewsList = document.getElementById('reviews-list');
                if (reviewsList) {
                    reviewsList.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            }, 300);
            
        }, 1500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
            submitBtn.classList.remove('loading');
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
function updateStarsDisplay() {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
        if (index < selectedRating) {
            star.classList.add('active'); // –ó–≤–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
        } else {
            star.classList.remove('active'); // –ó–≤–µ–∑–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        }
    });
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –º—ã—à–∏
function highlightStars(rating) {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.style.color = '#ffd700'; // –¶–≤–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–≤–µ–∑–¥—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        } else {
            star.style.color = '#444'; // –¶–≤–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∑–≤–µ–∑–¥—ã
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
function openSpread(spreadType) {
    console.log('üÉè –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Premium —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    const hasAccess = isPremium || testPremiumMode;
    
    if (!hasAccess) {
        checkAndShowSubscriptionBanner(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadConfig = getSpreadConfig(spreadType);
    if (!spreadConfig) {
        showNotification('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞');
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    currentSpread = {
        type: spreadType,
        config: spreadConfig,
        cards: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏
        question: '' // –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
    };
    
    showSpreadModal(spreadConfig); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å–∫–ª–∞–¥–∞
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ —Ç–∏–ø—É
function getSpreadConfig(spreadType) {
    const configs = {
        love: {
            name: "üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            description: "–†–∞—Å–∫–ª–∞–¥ —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ —Å–µ—Ä–¥—Ü–∞",
            positions: [
                { name: "–í—ã", description: "–í–∞—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö" },
                { name: "–ü–∞—Ä—Ç–Ω–µ—Ä", description: "–ß—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞" },
                { name: "–û—Ç–Ω–æ—à–µ–Ω–∏—è", description: "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π" }
            ],
            layout: "horizontal"
        },
        career: {
            name: "üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", 
            description: "–ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —É—Å–ø–µ—Ö—É",
            positions: [
                { name: "–¢–µ–∫—É—â–µ–µ", description: "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" },
                { name: "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", description: "–ß—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é" },
                { name: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", description: "–°–∫—Ä—ã—Ç—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã" },
                { name: "–°–æ–≤–µ—Ç", description: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç" }
            ],
            layout: "cross"
        },
        week: {
            name: "üìÖ –ù–µ–¥–µ–ª—è –≤–ø–µ—Ä–µ–¥–∏",
            description: "–ß—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
            positions: [
                { name: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", description: "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏" },
                { name: "–í—Ç–æ—Ä–Ω–∏–∫", description: "–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π" },
                { name: "–°—Ä–µ–¥–∞", description: "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏" },
                { name: "–ß–µ—Ç–≤–µ—Ä–≥", description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è" },
                { name: "–ü—è—Ç–Ω–∏—Ü–∞", description: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ª" },
                { name: "–°—É–±–±–æ—Ç–∞", description: "–û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" },
                { name: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É" }
            ],
            layout: "week"
        },
        celtic: {
            name: "üçÄ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            description: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
            positions: [
                { name: "–°–∏—Ç—É–∞—Ü–∏—è", description: "–°—É—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è" },
                { name: "–í—ã–∑–æ–≤", description: "–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è" },
                { name: "–ü—Ä–æ—à–ª–æ–µ", description: "–ö–æ—Ä–Ω–∏ —Å–∏—Ç—É–∞—Ü–∏–∏" },
                { name: "–ë—É–¥—É—â–µ–µ", description: "–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" },
                { name: "–¶–µ–ª—å", description: "–ö —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è" },
                { name: "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", description: "–°–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã" },
                { name: "–í–∞—à –ø–æ–¥—Ö–æ–¥", description: "–ö–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ" },
                { name: "–û–∫—Ä—É–∂–µ–Ω–∏–µ", description: "–í–ª–∏—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π" },
                { name: "–°—Ç—Ä–∞—Ö–∏", description: "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç" },
                { name: "–ò—Ç–æ–≥", description: "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" }
            ],
            layout: "celtic"
        }
    };
    
    return configs[spreadType];
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –ø–æ–ª–µ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
function showSpreadModal(config) {
    const modal = document.createElement('div');
    modal.className = 'spread-modal';
    modal.innerHTML = `
        <div class="spread-modal-content">
            <div class="spread-modal-header">
                <h3>${config.name}</h3>
                <button class="spread-modal-close" onclick="closeSpreadModal()">&times;</button>
            </div>
            <div class="spread-modal-body">
                <div class="spread-description">
                    <p>${config.description}</p>
                    <p><strong>–ü–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç:</strong> ${config.positions.length}</p>
                </div>
                
                <div class="spread-question-section">
                    <label for="spread-question">üí≠ –í–∞—à –≤–æ–ø—Ä–æ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                    <textarea 
                        id="spread-question" 
                        class="spread-question-input" 
                        placeholder="–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ..."
                        maxlength="300"
                    ></textarea>
                </div>
                
                <div class="spread-positions-preview">
                    <h4>üìç –ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:</h4>
                    <div class="positions-list">
                        ${config.positions.map((pos, index) => `
                            <div class="position-preview">
                                <span class="position-number">${index + 1}</span>
                                <div class="position-info">
                                    <strong>${pos.name}</strong>
                                    <small>${pos.description}</small>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            <div class="spread-modal-footer">
                <button class="btn btn-secondary" onclick="closeSpreadModal()">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn spread-start-btn" onclick="startSpread()">
                    ‚ú® –ù–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –ù–∞—á–∞–ª–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function startSpread() {
    const questionInput = document.getElementById('spread-question');
    const question = questionInput ? questionInput.value.trim() : '';
    
    if (currentSpread) {
        currentSpread.question = question; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ
    }
    
    closeSpreadModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    
    setTimeout(() => {
        showSpreadInterface(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å–∫–ª–∞–¥–∞
    }, 300);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ (–≥–¥–µ –≤—ã—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –∫–∞—Ä—Ç—ã)
function showSpreadInterface() {
    if (!currentSpread) return;
    
    const { config } = currentSpread;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadsGrid = document.querySelector('.spreads-grid');
    const spreadDetail = document.getElementById('spread-detail');
    
    if (spreadsGrid) spreadsGrid.style.display = 'none';
    if (spreadDetail) {
        spreadDetail.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç
        const spreadTitle = document.getElementById('spread-title');
        const spreadCardsContainer = document.getElementById('spread-cards-container');
        const drawSpreadBtn = document.getElementById('draw-spread-btn');
        const spreadLoading = document.getElementById('spread-loading');

        if (spreadTitle) {
            spreadTitle.innerHTML = `
                ${config.name}
                ${currentSpread.question ? `<div class="spread-question-display">‚ùì ${currentSpread.question}</div>` : ''}
            `;
        }
        
        if (spreadCardsContainer) {
            spreadCardsContainer.innerHTML = generateSpreadLayout(config); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞—Ä—Ç
        }
        
        if (drawSpreadBtn) {
            drawSpreadBtn.textContent = `üÉè –í—ã—Ç—è–Ω—É—Ç—å ${config.positions.length} –∫–∞—Ä—Ç`;
            drawSpreadBtn.style.display = 'block';
            drawSpreadBtn.disabled = false; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            drawSpreadBtn.onclick = drawSpread; // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        }
        
        if (spreadLoading) { // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∏–¥–µ–Ω
            spreadLoading.style.display = 'none';
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–µ—Ç
        const backBtn = spreadDetail.querySelector('.back-btn');
        if (backBtn) {
            backBtn.onclick = closeSpread; // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥"
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤ –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
function generateSpreadLayout(config) {
    const { positions, layout } = config;
    
    let layoutClass = 'spread-layout-' + layout;
    let cardsHTML = '';
    
    positions.forEach((position, index) => {
        cardsHTML += `
            <div class="spread-position" data-position="${index}">
                <div class="spread-card-slot" id="spread-card-${index}">
                    <div class="card-back">
                        <div class="card-symbol">üîÆ</div>
                        <div class="card-text">?</div>
                    </div>
                </div>
                <div class="position-label">
                    <strong>${position.name}</strong>
                    <small>${position.description}</small>
                </div>
            </div>
        `;
    });
    
    return `<div class="${layoutClass}">${cardsHTML}</div>`;
}

// –ü—Ä–æ—Ü–µ—Å—Å –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
async function drawSpread() {
    console.log('üÉè –ù–∞—á–∏–Ω–∞–µ–º drawSpread, currentSpread:', currentSpread);
    
    if (!currentSpread) {
        console.error('‚ùå currentSpread is null. –†–∞—Å–∫–ª–∞–¥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        showNotification('–û—à–∏–±–∫–∞: —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }
    
    const { config } = currentSpread;
    const drawBtn = document.getElementById('draw-spread-btn');
    const loading = document.getElementById('spread-loading');
    
    console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', { drawBtn: !!drawBtn, loading: !!loading });
    
    try {
        if (drawBtn) {
            drawBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—ã"
            drawBtn.disabled = true;
        }
        
        if (loading) {
            loading.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
        const uniqueSpreadCards = [];
        const usedCardNames = new Set();
        
        console.log('üÉè –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è', config.positions.length, '–ø–æ–∑–∏—Ü–∏–π');
        
        for (let i = 0; i < config.positions.length; i++) {
            let randomCard;
            let attempts = 0;
            // –¶–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
            do {
                randomCard = getRandomCard();
                attempts++;
                if (attempts > 100) {
                    console.warn('‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–ª–æ–¥–∞ –º–∞–ª–∞ –∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ–∏–∑–±–µ–∂–Ω—ã.');
                    break;
                }
            } while (usedCardNames.has(randomCard.name)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç—ã
            
            usedCardNames.add(randomCard.name);
            uniqueSpreadCards.push(randomCard);
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Ä—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º
        currentSpread.cards = [];
        // currentSpread.interpretations –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ revealSpreadCard
        console.log('‚úÖ –ö–∞—Ä—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', uniqueSpreadCards.length);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
        for (let i = 0; i < uniqueSpreadCards.length; i++) {
            console.log(`üé¥ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É ${i + 1}/${uniqueSpreadCards.length}`);
            
            await new Promise(resolve => {
                setTimeout(async () => {
                    try {
                        // revealSpreadCard —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                        const interpretationText = await revealSpreadCard(i, uniqueSpreadCards[i], config.positions[i]);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ, –µ—ë –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                        currentSpread.cards.push({
                            card: uniqueSpreadCards[i], // –°–∞–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
                            positionName: config.positions[i].name, // –ò–º—è –ø–æ–∑–∏—Ü–∏–∏
                            positionDescription: config.positions[i].description, // –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                            interpretation: interpretationText // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                        });
                        
                        resolve();
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç—ã ${i}:`, error);
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
                        currentSpread.cards.push({
                            card: uniqueSpreadCards[i],
                            positionName: config.positions[i].name,
                            positionDescription: config.positions[i].description,
                            interpretation: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ.'
                        });
                        resolve();
                    }
                }, i * 1200); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫–∞—Ä—Ç –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            });
        }
        
        if (loading) {
            loading.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
        showInterpretationsButton();
        
        console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        // aiPrediction –∑–¥–µ—Å—å –ø—É—Å—Ç, —Ç.–∫. —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ
        addToLocalHistory('spread', config.name, currentSpread.question || '', currentSpread.cards, ''); 
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ drawSpread:', error);
        
        if (loading) {
            loading.style.display = 'none';
        }
        
        if (drawBtn) {
            drawBtn.style.display = 'block';
            drawBtn.disabled = false;
        }
        
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è" –∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é"
function showInterpretationsButton() {
    const spreadDetail = document.getElementById('spread-detail');
    if (!spreadDetail) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è", –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    const oldBtn = spreadDetail.querySelector('.show-interpretations-btn');
    if (oldBtn) oldBtn.remove(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    const oldButtonsContainer = spreadDetail.querySelector('.spread-actions');
    if (oldButtonsContainer) oldButtonsContainer.remove();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'spread-actions'; // –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞
    buttonsContainer.innerHTML = `
        <button class="btn show-interpretations-btn" onclick="showInterpretationsModal()">
            üîÆ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
        </button>
        <button class="btn btn-secondary" onclick="sendSpreadToTelegram()">
            üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        </button>
    `;
    
    spreadDetail.appendChild(buttonsContainer);
    // –î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–ª–∏ –¥–ª—è .spread-actions –≤ –≤–∞—à style.css, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å –∫—Ä–∞—Å–∏–≤–æ.
    // –ü—Ä–∏–º–µ—Ä: .spread-actions { display: flex; gap: 10px; margin-top: 20px; justify-content: center; flex-wrap: wrap; }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ –≤—Å–µ–º–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
function showInterpretationsModal() {
    // currentSpread.cards —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã {card: {}, positionName: "", interpretation: ""}
    if (!currentSpread || !currentSpread.cards || currentSpread.cards.length === 0) {
        showNotification('–ù–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        return;
    }
    
    const modal = document.createElement('div');
    modal.className = 'interpretations-modal';
    
    let interpretationsHTML = '';
    currentSpread.cards.forEach((cardItem) => { // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–∞—Ä—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        const card = cardItem.card; 
        const positionName = cardItem.positionName;
        const interpretation = cardItem.interpretation;

        interpretationsHTML += `
            <div class="interpretation-item">
                <div class="interpretation-card-info">
                    <div class="interpretation-card-symbol">${card.symbol}</div>
                    <div class="interpretation-card-details">
                        <h4>${card.name}</h4>
                        <p class="position-name">${positionName} - ${cardItem.positionDescription}</p>
                    </div>
                </div>
                <div class="interpretation-text">${interpretation}</div>
            </div>
        `;
    });
    
    modal.innerHTML = `
        <div class="interpretations-modal-content">
            <div class="interpretations-modal-header">
                <h3>üîÆ –¢–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞</h3>
                <button class="interpretations-modal-close" onclick="closeInterpretationsModal()">&times;</button>
            </div>
            <div class="interpretations-modal-body">
                ${currentSpread.question ? `
                    <div class="spread-question-display" style="margin-bottom: 20px;">
                        <strong>‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:</strong> ${currentSpread.question}
                    </div>
                ` : ''}
                ${interpretationsHTML}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π
function closeInterpretationsModal() {
    const modal = document.querySelector('.interpretations-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove(); // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM
        }, 300);
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—ë —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
async function revealSpreadCard(index, card, position) {
    console.log(`üé¥ revealSpreadCard: ${index}, –∫–∞—Ä—Ç–∞: ${card.name}, –ø–æ–∑–∏—Ü–∏—è: ${position.name}`);
    
    const cardSlot = document.getElementById(`spread-card-${index}`);
    if (!cardSlot) {
        console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç spread-card-${index}`);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.';
    }
    
    try {
        addSparkles(cardSlot); // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å—Ç–∫–∏
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
        await new Promise(resolve => {
            setTimeout(() => {
                cardSlot.innerHTML = `
                    <div class="spread-card-revealed">
                        <div class="card-name">${card.name}</div>
                        <img src="${card.image}" alt="${card.name}" class="card-image" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.fontSize='24px';">
                        <div class="card-symbol">${card.symbol}</div>
                        <div class="card-meaning">${card.meaning}</div>
                        <div class="position-context">
                            <strong>${position.name}</strong>
                            <small>${position.description}</small>
                        </div>
                    </div>
                `;
                
                cardSlot.classList.add('flipped'); // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                console.log(`‚úÖ –ö–∞—Ä—Ç–∞ ${index} –ø–æ–∫–∞–∑–∞–Ω–∞`);
                resolve();
            }, 800); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (AI –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ)
        const interpretation = await generateAdvancedInterpretation(card, position, currentSpread.question);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –∫–∞—Ä—Ç—É –≤ UI (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        setTimeout(() => {
            const interpretationDiv = document.createElement('div');
            interpretationDiv.className = 'position-interpretation';
            interpretationDiv.innerHTML = `
                <div class="interpretation-header">
                    <span class="interpretation-icon">üîÆ</span>
                    <span class="interpretation-title">–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ</span>
                </div>
                <div class="interpretation-text">${interpretation}</div>
            `;
            
            const positionElement = cardSlot.closest('.spread-position');
            if (positionElement) {
                positionElement.appendChild(interpretationDiv);
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
                setTimeout(() => {
                    interpretationDiv.classList.add('show');
                }, 100);
            }
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        
        return interpretation; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ currentSpread
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ revealSpreadCard ${index}:`, error);
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è.';
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫)
async function generateAdvancedInterpretation(card, position, question) {
    try {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ò–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä, n8n webhook)
        if (typeof API_CONFIG !== 'undefined' && API_CONFIG.generatePredictionEndpoint) { // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å generatePredictionEndpoint
            const response = await fetch(API_CONFIG.generatePredictionEndpoint, { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    type: 'spread_position', // –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è AI
                    card: card,
                    position: position,
                    question: question,
                    userName: userName,
                    userBirthdate: userBirthdate
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                return result.prediction || generateLocalInterpretation(card, position, question); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ–ª–ª–±—ç–∫
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é:', error);
    }
    
    // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    return generateLocalInterpretation(card, position, question);
}

// –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ (—Ñ–æ–ª–ª–±—ç–∫)
function generateLocalInterpretation(card, position, question) {
    const templates = [
        `–í –ø–æ–∑–∏—Ü–∏–∏ "${position.name}" –∫–∞—Ä—Ç–∞ "${card.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–∂–Ω—É—é –∏—Å—Ç–∏–Ω—É: ${card.meaning.toLowerCase()} –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –∞—Å–ø–µ–∫—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è ${position.description.toLowerCase()}.`,
        
        `"${card.name}" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "${position.name}" –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ ${card.meaning.toLowerCase()} –û–±—Ä–∞—Ç–∏—Ç–µ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ ${position.description.toLowerCase()}.`,
        
        `–ü–æ–∑–∏—Ü–∏—è "${position.name}" –æ—Å–≤–µ—â–∞–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∫–∞—Ä—Ç—ã "${card.name}": ${card.meaning.toLowerCase()} –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å ${position.description.toLowerCase()} –≤ –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.`,
        
        `–ö–∞—Ä—Ç–∞ "${card.name}" –≤ –ø–æ–∑–∏—Ü–∏–∏ "${position.name}" —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç: ${card.meaning.toLowerCase()} –î—É—Ö–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —Å–æ–≤–µ—Ç—É—é—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ ${position.description.toLowerCase()}.`
    ];
    
    let interpretation = templates[Math.floor(Math.random() * templates.length)];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (question && question.trim()) {
        const questionContexts = [
            ` –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ "${question}" —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫—Ä–æ–µ—Ç—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏ ${position.description.toLowerCase()}.`,
            ` –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "${question}", —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å ${position.description.toLowerCase()} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è—Å–Ω–æ—Å—Ç–∏.`,
            ` –í–∞—à –≤–æ–ø—Ä–æ—Å "${question}" –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–∫–ª–∏–∫ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ - ${position.description.toLowerCase()} —Å—Ç–∞–Ω–µ—Ç –∫–ª—é—á–æ–º –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é.`
        ];
        
        interpretation += questionContexts[Math.floor(Math.random() * questionContexts.length)];
    }
    
    return interpretation;
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ (–≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤)
function closeSpread() {
    const spreadsGrid = document.querySelector('.spreads-grid');
    const spreadDetail = document.getElementById('spread-detail');
    
    if (spreadsGrid) spreadsGrid.style.display = 'grid'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –≤—ã–±–æ—Ä–∞
    if (spreadDetail) spreadDetail.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
    
    currentSpread = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
    console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å–∫–ª–∞–¥–∞ –∑–∞–∫—Ä—ã—Ç, –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤.');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
function closeSpreadModal() {
    const modal = document.querySelector('.spread-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove(); // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM
        }, 300);
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è Premium —Ä–µ–∂–∏–º–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
function addTestPremiumButton() {
    const header = document.querySelector('.header');
    if (header && !document.getElementById('test-premium-btn')) {
        const testBtn = document.createElement('button');
        testBtn.id = 'test-premium-btn';
        testBtn.className = 'test-premium-btn';
        testBtn.textContent = testPremiumMode ? 'üëë –¢–µ—Å—Ç Premium ON' : 'üÜì –¢–µ—Å—Ç Premium OFF';
        testBtn.onclick = toggleTestPremium;
        header.appendChild(testBtn);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Premium —Ä–µ–∂–∏–º–∞
function toggleTestPremium() {
    testPremiumMode = !testPremiumMode;
    const btn = document.getElementById('test-premium-btn');
    if (btn) {
        btn.textContent = testPremiumMode ? 'üëë –¢–µ—Å—Ç Premium ON' : 'üÜì –¢–µ—Å—Ç Premium OFF';
        btn.style.background = testPremiumMode ? 
            'linear-gradient(45deg, #ffd700, #ffed4a)' : 
            'rgba(255, 255, 255, 0.1)';
        btn.style.color = testPremiumMode ? '#1a1a2e' : '#fff';
    }
    
    showNotification(testPremiumMode ? 
        '–¢–µ—Å—Ç–æ–≤—ã–π Premium —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω! üëë' : 
        '–¢–µ—Å—Ç–æ–≤—ã–π Premium —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω üÜì'
    );
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ UI
    updateSubscriptionStatus(isPremium || testPremiumMode); 
    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ UI
    updateQuestionsDisplay();
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase (–∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)

async function saveDailyCardToSupabase(card) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:', card.name);
    if (!API_CONFIG || !API_CONFIG.saveDailyCard) {
        console.warn('API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
        return null;
    }
    
    try {
        const response = await fetch(API_CONFIG.saveDailyCard, {
            method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: POST –≤–º–µ—Å—Ç–æ GET
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                user_id: currentUser?.telegram_id || 'anonymous',
                card_name: card.name,
                card_symbol: card.symbol,
                card_meaning: card.meaning,
                card_image: card.image || '',
                drawn_date: new Date().toISOString().split('T')[0],
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ n8n:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return null;
    }
}

async function saveQuestionToSupabase(question, isFollowUp) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:', question);
    if (!API_CONFIG || !API_CONFIG.saveQuestion) {
        console.warn('API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
        return { id: Date.now() };
    }
    
    try {
        const response = await fetch(API_CONFIG.saveQuestion, {
            method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: POST –≤–º–µ—Å—Ç–æ GET
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                user_id: currentUser?.telegram_id || 'anonymous',
                question_text: question,
                is_follow_up: isFollowUp,
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ n8n:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return { id: Date.now() };
    }
}

async function saveAnswerToSupabase(questionId, card, aiPrediction) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
    if (!API_CONFIG || !API_CONFIG.saveAnswer) {
        console.warn('API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
        return null;
    }
    
    try {
        const response = await fetch(API_CONFIG.saveAnswer, {
            method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: POST –≤–º–µ—Å—Ç–æ GET
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                question_id: questionId,
                user_id: currentUser?.telegram_id || 'anonymous',
                card_name: card.name,
                card_symbol: card.symbol,
                card_meaning: card.meaning,
                card_image: card.image || '',
                ai_prediction: aiPrediction,
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ n8n:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return null;
    }
}

async function updateUserQuestionsInSupabase() {
    console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsLeft);
    if (!API_CONFIG || !API_CONFIG.updateSubscription) {
        console.warn('API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
        return;
    }
    
    try {
        const response = await fetch(API_CONFIG.updateSubscription, {
            method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: POST –≤–º–µ—Å—Ç–æ GET
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                user_id: currentUser?.telegram_id || 'anonymous',
                free_questions_left: questionsLeft,
                action: 'update_questions',
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ n8n:', data);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
// –°–µ–π—á–∞—Å —Ä–∞—Å–∫–ª–∞–¥ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ drawSpread —á–µ—Ä–µ–∑ addToLocalHistory
function saveSpreadToHistory() {
    if (!currentSpread || !currentSpread.cards || currentSpread.cards.length === 0) {
        showNotification('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é.');
        return;
    }
    
    // –†–∞—Å–∫–ª–∞–¥ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ—É–Ω–∫—Ü–∏–∏ drawSpread.
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏–ª–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    showNotification('‚úÖ –†–∞—Å–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏!');
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setTimeout(() => {
        switchTab('history');
    }, 1000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ Telegram
function sendSpreadToTelegram() {
    if (!currentSpread || !currentSpread.cards || currentSpread.cards.length === 0) {
        showNotification('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.');
        return;
    }
    
    let message = `üîÆ *${currentSpread.config.name}*\n`;
    message += `üìÖ ${new Date().toLocaleString('ru-RU')}\n\n`;
    
    if (currentSpread.question) {
        message += `‚ùì *–í–∞—à –≤–æ–ø—Ä–æ—Å*: "${currentSpread.question}"\n\n`;
    }
    
    message += `üÉè *–ö–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ*:\n\n`;
    
    currentSpread.cards.forEach((cardData, index) => {
        message += `*${index + 1}. ${cardData.positionName}*\n`;
        message += `_–ö–∞—Ä—Ç–∞:_ ${cardData.card.symbol} ${cardData.card.name}\n`;
        // message += `_–ó–Ω–∞—á–µ–Ω–∏–µ:_ ${cardData.card.meaning}\n`; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
        message += `_–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ:_ ${cardData.interpretation}\n\n`;
    });
    
    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            type: 'spread_share',
            data: currentSpread, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ä–∞—Å–∫–ª–∞–¥–∞
            text_message: message // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        }));
        showNotification('–†–∞—Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –±–æ—Ç–∞!');
        closeInterpretationsModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } else {
        // –§–æ–ª–ª–±—ç–∫ - –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(message).then(() => {
            showNotification('–¢–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞.');
        });
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
console.log('üîÆ Script.js (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
async function testN8NConnection() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n...');
        
        const testData = {
            type: 'connection_test',
            message: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Telegram Web App',
            timestamp: new Date().toISOString(),
            user_agent: navigator.userAgent
        };
        
        const response = await fetch(API_CONFIG.generatePrediction, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.text();
        console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:', result);
        showNotification('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        return true;
        
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ n8n');
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–≤ development —Ä–µ–∂–∏–º–µ)
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(testN8NConnection, 3000);
}
