// script.js - –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–®—ë–ø–æ—Ç –∫–∞—Ä—Ç"
// ========================================================================

console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ script.js...');

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let supabase = null;
let currentUser = null;
let appState = {
    currentTab: 'daily',
    questionsLeft: 3,
    isPremium: false,
    isInitialized: false,
    currentRating: 0
};

// üö´ –§–õ–ê–ì–ò –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ü–û–í–¢–û–†–ù–´–• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ô
let isInitializing = false;
let supabaseInitialized = false;

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (appState.isInitialized || isInitializing) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isInitializing = true;

    try {
        // 1. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await waitForConfig();
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        await initSupabaseOnce();
        
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramWebApp();
        
        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await initUser();
        
        // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        
        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        checkAndShowWelcome();
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        appState.isInitialized = true;
        isInitializing = false;
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        isInitializing = false;
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// ‚è∞ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function waitForConfig() {
    console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    let attempts = 0;
    const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    
    while (attempts < maxAttempts) {
        if (window.isConfigReady && window.isConfigReady()) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
            return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó)
async function initSupabaseOnce() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (supabaseInitialized) {
        console.log('‚úÖ Supabase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }
    
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Supabase
        if (typeof window.supabase === 'undefined') {
            console.warn('‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return false;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if (window.initSupabase && typeof window.initSupabase === 'function') {
            const success = window.initSupabase();
            if (success) {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                supabase = window.supabaseClient || null;
                supabaseInitialized = true;
                console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                return true;
            }
        }
        
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase');
        return false;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try {
                tg.setHeaderColor('#1a1a2e');
                tg.setBackgroundColor('#16213e');
            } catch (e) {
                console.log('üì± –¶–≤–µ—Ç–∞ —Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram');
            }
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            tg.expand();
            
            // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
            tg.ready();
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–∞–π–¥–µ–Ω:', tg.initDataUnsafe.user);
                return tg.initDataUnsafe.user;
            }
        } else {
            console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram)');
        }
        
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
        return null;
    }
}

// üë§ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initUser() {
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        const telegramUser = initTelegramWebApp();
        
        if (telegramUser) {
            currentUser = telegramUser;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (supabase && window.createOrGetUserProfile) {
                try {
                    const userProfile = await window.createOrGetUserProfile(telegramUser);
                    if (userProfile) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                        appState.questionsLeft = userProfile.questions_left || 3;
                        appState.isPremium = userProfile.is_premium || false;
                    }
                } catch (error) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Supabase:', error);
                }
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        loadUserData();
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', currentUser);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üíæ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function loadUserData() {
    try {
        const userData = localStorage.getItem('tarot_user_data');
        if (userData) {
            const parsed = JSON.parse(userData);
            appState.questionsLeft = parsed.questionsLeft || 3;
            appState.isPremium = parsed.isPremium || false;
        }
        
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', appState);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
            const tab = e.target.dataset.tab;
            if (tab) switchTab(tab);
        });
    });
    
    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', handleDailyCardClick);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    const askBtn = document.getElementById('ask-btn');
    if (askBtn) {
        askBtn.addEventListener('click', handleAskQuestion);
    }
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const followUpBtn = document.getElementById('follow-up-btn');
    if (followUpBtn) {
        followUpBtn.addEventListener('click', handleFollowUpQuestion);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
    const premiumBtns = document.querySelectorAll('.premium-btn, .buy-premium-btn');
    premiumBtns.forEach(btn => {
        btn.addEventListener('click', handleBuyPremium);
    });
    
    // –†–∞—Å–∫–ª–∞–¥—ã
    const spreadCards = document.querySelectorAll('.spread-card');
    spreadCards.forEach(card => {
        card.addEventListener('click', (e) => {
            const spreadType = e.currentTarget.dataset.spread;
            if (spreadType) selectSpread(spreadType);
        });
    });
    
    // –†–µ–π—Ç–∏–Ω–≥
    const ratingStars = document.querySelectorAll('.rating-star');
    ratingStars.forEach((star, index) => {
        star.addEventListener('click', () => handleRatingClick(index + 1));
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞
    const reviewForm = document.getElementById('review-form');
    if (reviewForm) {
        reviewForm.addEventListener('submit', handleSubmitReview);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener('click', handleClearHistory);
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
    const profileForm = document.getElementById('profile-form');
    if (profileForm) {
        profileForm.addEventListener('submit', handleSaveProfile);
    }
    
    const skipProfileBtn = document.getElementById('skip-profile-btn');
    if (skipProfileBtn) {
        skipProfileBtn.addEventListener('click', skipProfile);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// üéØ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í
function switchTab(tabName) {
    console.log('üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    appState.currentTab = tabName;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = document.querySelectorAll('.tab-section');
    sections.forEach(section => section.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(`${tabName}-section`);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
    const tabButtons = document.querySelectorAll('.tab-btn');
    tabButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabName);
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∞–±–æ–≤
    if (tabName === 'daily') {
        checkTodayCard();
    } else if (tabName === 'history') {
        loadUserHistory();
    } else if (tabName === 'reviews') {
        loadReviews();
    } else if (tabName === 'spreads') {
        loadSpreadsMenu();
    }
    
    updateUI();
}

// üñºÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
function updateUI() {
    console.log('üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionsLeftEl = document.querySelectorAll('.questions-left');
    questionsLeftEl.forEach(el => {
        el.textContent = appState.questionsLeft;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º–∞
    const premiumElements = document.querySelectorAll('.premium-status');
    premiumElements.forEach(el => {
        el.textContent = appState.isPremium ? '–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω' : '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è';
        el.className = `premium-status ${appState.isPremium ? 'premium' : 'basic'}`;
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞
    const premiumBtns = document.querySelectorAll('.buy-premium-btn');
    premiumBtns.forEach(btn => {
        btn.style.display = appState.isPremium ? 'none' : 'block';
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
    const limitWarnings = document.querySelectorAll('.limit-warning');
    limitWarnings.forEach(warning => {
        const shouldShow = !appState.isPremium && appState.questionsLeft <= 1;
        warning.style.display = shouldShow ? 'block' : 'none';
    });
}

// üÉè –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ê–†–¢–´ –î–ù–Ø
async function handleDailyCardClick() {
    console.log('üÉè –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    const dailyCard = document.getElementById('daily-card');
    const aiContainer = document.getElementById('daily-ai-container');
    
    if (!dailyCard) return;
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        dailyCard.innerHTML = '<div class="card-loading">–ü–æ–ª—É—á–∞—é –∫–∞—Ä—Ç—É –¥–Ω—è...</div>';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
        const cardData = await getDailyCard();
        
        if (cardData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            updateCardDisplay(dailyCard, cardData);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ò –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            if (aiContainer && cardData.aiInterpretation) {
                aiContainer.innerHTML = `
                    <div class="ai-interpretation">
                        <h4>‚ú® –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</h4>
                        <p>${cardData.aiInterpretation}</p>
                    </div>
                `;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'daily_card',
                date: new Date().toISOString(),
                card: cardData
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        resetCardDisplay(dailyCard, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.<br>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// üé¥ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢–´ –î–ù–Ø
async function getDailyCard() {
    console.log('üé¥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è...');
    
    try {
        const today = new Date().toDateString();
        const lastCardDate = localStorage.getItem('tarot_last_daily_card_date');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if (lastCardDate === today) {
            const savedCard = localStorage.getItem('tarot_daily_card_data');
            if (savedCard) {
                console.log('üì± –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è');
                return JSON.parse(savedCard);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ API
        const apiConfig = window.getAPIConfig && window.getAPIConfig();
        
        if (!apiConfig || !apiConfig.dailyCardEndpoint) {
            throw new Error('API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const response = await fetch(apiConfig.dailyCardEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'daily_card',
                user_id: currentUser ? currentUser.id : 'anonymous',
                date: today
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const cardData = await response.json();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
        localStorage.setItem('tarot_daily_card_data', JSON.stringify(cardData));
        localStorage.setItem('tarot_last_daily_card_date', today);
        
        return cardData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const fallbackCards = window.getFallbackCards && window.getFallbackCards();
        if (fallbackCards && fallbackCards.length > 0) {
            const randomCard = fallbackCards[Math.floor(Math.random() * fallbackCards.length)];
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ä—Ç—É:', randomCard);
            return randomCard;
        }
        
        throw error;
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
    
    const questionInput = document.getElementById('question-input');
    const askBtn = document.getElementById('ask-btn');
    const firstAnswerSection = document.getElementById('first-answer-section');
    const followUpSection = document.getElementById('follow-up-section');
    const loading = document.getElementById('question-loading');
    
    if (!questionInput || !questionInput.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('questions');
        return;
    }
    
    const question = questionInput.value.trim();
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (askBtn) {
            askBtn.disabled = true;
            askBtn.textContent = '–ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...';
        }
        if (loading) loading.style.display = 'block';
        if (firstAnswerSection) firstAnswerSection.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const cardData = await getAnswerCard(question);
        
        if (cardData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            displayAnswer(cardData, question);
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                saveUserData();
                updateUI();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if (followUpSection) {
                followUpSection.style.display = 'block';
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'question',
                date: new Date().toISOString(),
                question: question,
                card: cardData
            });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            questionInput.value = '';
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (askBtn) {
            askBtn.disabled = false;
            askBtn.textContent = '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç';
        }
        if (loading) loading.style.display = 'none';
    }
}

// üé¥ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢–´ –î–õ–Ø –û–¢–í–ï–¢–ê
async function getAnswerCard(question) {
    console.log('üé¥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', question);
    
    try {
        const apiConfig = window.getAPIConfig && window.getAPIConfig();
        
        if (!apiConfig || !apiConfig.questionEndpoint) {
            throw new Error('API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const response = await fetch(apiConfig.questionEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'question',
                question: question,
                user_id: currentUser ? currentUser.id : 'anonymous'
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const cardData = await response.json();
        return cardData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', error);
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const fallbackCards = window.getFallbackCards && window.getFallbackCards();
        if (fallbackCards && fallbackCards.length > 0) {
            const randomCard = fallbackCards[Math.floor(Math.random() * fallbackCards.length)];
            randomCard.aiInterpretation = `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}": ${randomCard.description}`;
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', randomCard);
            return randomCard;
        }
        
        throw error;
    }
}

// üìù –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–¢–í–ï–¢–ê
function displayAnswer(cardData, question) {
    const answerCard = document.getElementById('answer-card');
    const answerAI = document.getElementById('answer-ai');
    
    if (answerCard) {
        updateCardDisplay(answerCard, cardData);
    }
    
    if (answerAI && cardData.aiInterpretation) {
        answerAI.innerHTML = `
            <div class="answer-content">
                <h4>üîÆ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</h4>
                <p class="question-text">"${question}"</p>
                <div class="interpretation">
                    ${cardData.aiInterpretation}
                </div>
            </div>
        `;
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –í–û–ü–†–û–°–ê
async function handleFollowUpQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    
    const followUpInput = document.getElementById('follow-up-input');
    const followUpBtn = document.getElementById('follow-up-btn');
    const followUpAnswer = document.getElementById('follow-up-answer');
    const followUpLoading = document.getElementById('follow-up-loading');
    
    if (!followUpInput || !followUpInput.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('questions');
        return;
    }
    
    const question = followUpInput.value.trim();
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (followUpBtn) {
            followUpBtn.disabled = true;
            followUpBtn.textContent = '–ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...';
        }
        if (followUpLoading) followUpLoading.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        const response = await getFollowUpAnswer(question);
        
        if (response && followUpAnswer) {
            followUpAnswer.innerHTML = `
                <div class="follow-up-content">
                    <h4>üí´ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</h4>
                    <p class="question-text">"${question}"</p>
                    <div class="interpretation">
                        ${response.answer}
                    </div>
                </div>
            `;
            followUpAnswer.style.display = 'block';
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                saveUserData();
                updateUI();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'follow_up',
                date: new Date().toISOString(),
                question: question,
                answer: response.answer
            });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            followUpInput.value = '';
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (followUpBtn) {
            followUpBtn.disabled = false;
            followUpBtn.textContent = '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å';
        }
        if (followUpLoading) followUpLoading.style.display = 'none';
    }
}

// üîÆ –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê
async function getFollowUpAnswer(question) {
    console.log('üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', question);
    
    try {
        const apiConfig = window.getAPIConfig && window.getAPIConfig();
        
        if (!apiConfig || !apiConfig.followUpEndpoint) {
            throw new Error('API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const response = await fetch(apiConfig.followUpEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'follow_up',
                question: question,
                user_id: currentUser ? currentUser.id : 'anonymous'
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const answerData = await response.json();
        return answerData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
        
        // Fallback –æ—Ç–≤–µ—Ç
        return {
            answer: `–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}": –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É –∏ —Å–ª–µ–¥—É–π—Ç–µ —Ç–æ–º—É –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–µ—Ç—Å—è –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.`
        };
    }
}

// üíé –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ö–£–ü–ö–ò –ü–†–ï–ú–ò–£–ú–ê
async function handleBuyPremium() {
    console.log('üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞');
    
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            tg.showPopup({
                title: '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø',
                message: '–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
                buttons: [
                    {id: 'buy', type: 'default', text: '–ö—É–ø–∏—Ç—å –∑–∞ 299‚ÇΩ'},
                    {id: 'cancel', type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'}
                ]
            }, (buttonId) => {
                if (buttonId === 'buy') {
                    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Telegram Payments API
                    // –ü–æ–∫–∞ —á—Ç–æ —ç–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
                    appState.isPremium = true;
                    appState.questionsLeft = 999; // –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
                    saveUserData();
                    updateUI();
                    showMessage('–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'premium');
                }
            });
        } else {
            // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
            const confirmed = confirm('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?');
            if (confirmed) {
                appState.isPremium = true;
                appState.questionsLeft = 999;
                saveUserData();
                updateUI();
                showMessage('–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'premium');
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∫—É–ø–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// üîí –ü–û–ö–ê–ó –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–†–ï–ú–ò–£–ú–ê
function showPremiumRequired(context = 'general') {
    const messages = {
        questions: '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!',
        spreads: '–†–∞—Å–∫–ª–∞–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!',
        general: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏–∏.'
    };
    
    const message = messages[context] || messages.general;
    
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        
        tg.showPopup({
            title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º',
            message: message,
            buttons: [
                {id: 'buy', type: 'default', text: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º'},
                {id: 'cancel', type: 'cancel', text: '–ü–æ–∑–∂–µ'}
            ]
        }, (buttonId) => {
            if (buttonId === 'buy') {
                handleBuyPremium();
            }
        });
    } else {
        showMessage(message, 'premium');
    }
}

// üé¥ –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–†–¢–´
function updateCardDisplay(cardElement, cardData) {
    if (!cardElement || !cardData) return;
    
    cardElement.innerHTML = `
        <div class="card-inner">
            <div class="card-image">
                ${cardData.image ? `<img src="${cardData.image}" alt="${cardData.name}" />` : 'üé¥'}
            </div>
            <div class="card-info">
                <h3>${cardData.name}</h3>
                <p class="card-description">${cardData.description || ''}</p>
            </div>
        </div>
    `;
    
    cardElement.classList.add('revealed');
}

// üîÑ –°–ë–†–û–° –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–†–¢–´
function resetCardDisplay(cardElement, text = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã') {
    if (!cardElement) return;
    
    cardElement.innerHTML = `
        <div class="card-placeholder">
            <div class="card-back">üé¥</div>
            <p>${text}</p>
        </div>
    `;
    
    cardElement.classList.remove('revealed');
}

// üìÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–†–¢–´ –î–ù–Ø
function checkTodayCard() {
    const today = new Date().toDateString();
    const lastCardDate = localStorage.getItem('tarot_last_daily_card_date');
    
    if (lastCardDate !== today) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        localStorage.removeItem('tarot_daily_card_data');
        localStorage.setItem('tarot_last_daily_card_date', today);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        const dailyCard = document.getElementById('daily-card');
        if (dailyCard) {
            resetCardDisplay(dailyCard, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã<br>—É–∑–Ω–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
        }
        
        const aiContainer = document.getElementById('daily-ai-container');
        if (aiContainer) {
            aiContainer.innerHTML = '';
        }
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
        const savedCard = localStorage.getItem('tarot_daily_card_data');
        if (savedCard) {
            try {
                const cardData = JSON.parse(savedCard);
                const dailyCard = document.getElementById('daily-card');
                const aiContainer = document.getElementById('daily-ai-container');
                
                if (dailyCard) {
                    updateCardDisplay(dailyCard, cardData);
                }
                
                if (aiContainer && cardData.aiInterpretation) {
                    aiContainer.innerHTML = `
                        <div class="ai-interpretation">
                            <h4>‚ú® –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã</h4>
                            <p>${cardData.aiInterpretation}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
            }
        }
    }
}

// üÉè –í–´–ë–û–† –†–ê–°–ö–õ–ê–î–ê
function selectSpread(spreadType) {
    console.log('üÉè –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
    if (!appState.isPremium) {
        showPremiumRequired('spreads');
        return;
    }
    
    const spreadConfigs = window.getSpreadsConfig && window.getSpreadsConfig();
    
    if (!spreadConfigs || !spreadConfigs[spreadType]) {
        showErrorMessage('–†–∞—Å–∫–ª–∞–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
    appState.selectedSpread = spreadType;
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
    showSpreadPerform(spreadType);
}

// üéØ –ü–û–ö–ê–ó –≠–ö–†–ê–ù–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –†–ê–°–ö–õ–ê–î–ê
function showSpreadPerform(spreadType) {
    const spreadsSection = document.getElementById('spreads-section');
    const spreadConfigs = window.getSpreadsConfig && window.getSpreadsConfig();
    
    if (!spreadsSection || !spreadConfigs || !spreadConfigs[spreadType]) return;
    
    const config = spreadConfigs[spreadType];
    
    spreadsSection.innerHTML = `
        <div class="spread-perform">
            <div class="spread-header">
                <button class="back-btn" onclick="window.tarotApp.loadSpreadsMenu()">‚Üê –ù–∞–∑–∞–¥</button>
                <h2>${config.name}</h2>
                <p>${config.description}</p>
            </div>
            
            <div class="spread-question">
                <label for="spread-question-input">–í–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:</label>
                <textarea id="spread-question-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." rows="3"></textarea>
                <button class="perform-spread-btn" onclick="window.tarotApp.performSpread('${spreadType}')">
                    –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥
                </button>
            </div>
            
            <div id="spread-result" class="spread-result" style="display: none;">
                <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ -->
            </div>
        </div>
    `;
}

// üé≤ –í–´–ü–û–õ–ù–ï–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê
async function performSpread(spreadType) {
    console.log('üé≤ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType);
    
    const questionInput = document.getElementById('spread-question-input');
    const performBtn = document.querySelector('.perform-spread-btn');
    const resultDiv = document.getElementById('spread-result');
    
    if (!questionInput || !questionInput.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞');
        return;
    }
    
    const question = questionInput.value.trim();
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        if (performBtn) {
            performBtn.disabled = true;
            performBtn.textContent = '–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å–∫–ª–∞–¥...';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
        const spreadResult = await getSpreadResult(spreadType, question);
        
        if (spreadResult && resultDiv) {
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            displaySpreadResult(spreadResult, resultDiv);
            resultDiv.style.display = 'block';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'spread',
                spreadType: spreadType,
                question: question,
                result: spreadResult,
                date: new Date().toISOString()
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        if (performBtn) {
            performBtn.disabled = false;
            performBtn.textContent = '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥';
        }
    }
}

// üîÆ –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –†–ê–°–ö–õ–ê–î–ê
async function getSpreadResult(spreadType, question) {
    console.log('üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType, question);
    
    try {
        const apiConfig = window.getAPIConfig && window.getAPIConfig();
        
        if (!apiConfig || !apiConfig.spreadEndpoint) {
            throw new Error('API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        const response = await fetch(apiConfig.spreadEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'spread',
                spreadType: spreadType,
                question: question,
                user_id: currentUser ? currentUser.id : 'anonymous'
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const spreadData = await response.json();
        return spreadData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        
        // Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ fallback –∫–∞—Ä—Ç
        const fallbackCards = window.getFallbackCards && window.getFallbackCards();
        if (fallbackCards && fallbackCards.length > 0) {
            const spreadConfigs = window.getSpreadsConfig && window.getSpreadsConfig();
            const config = spreadConfigs && spreadConfigs[spreadType];
            const cardsCount = config ? config.cardsCount || 3 : 3;
            
            const cards = [];
            for (let i = 0; i < cardsCount; i++) {
                const randomCard = fallbackCards[Math.floor(Math.random() * fallbackCards.length)];
                cards.push({
                    ...randomCard,
                    position: `–ü–æ–∑–∏—Ü–∏—è ${i + 1}`
                });
            }
            
            return {
                cards: cards,
                interpretation: `–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å "${question}": –ö–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ—Ç–∞–ª—è–º –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.`
            };
        }
        
        throw error;
    }
}

// üìä –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –†–ê–°–ö–õ–ê–î–ê
function displaySpreadResult(spreadResult, container) {
    if (!spreadResult || !container) return;
    
    let html = `
        <div class="spread-cards">
            <h3>üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–∫–ª–∞–¥–∞</h3>
    `;
    
    if (spreadResult.cards && Array.isArray(spreadResult.cards)) {
        spreadResult.cards.forEach((card, index) => {
            html += `
                <div class="spread-card-result">
                    <div class="position-label">${card.position || `–ü–æ–∑–∏—Ü–∏—è ${index + 1}`}</div>
                    <div class="card-display">
                        ${card.image ? `<img src="${card.image}" alt="${card.name}" />` : 'üé¥'}
                        <h4>${card.name}</h4>
                        <p>${card.description || ''}</p>
                    </div>
                </div>
            `;
        });
    }
    
    html += '</div>';
    
    if (spreadResult.interpretation) {
        html += `
            <div class="spread-interpretation">
                <h4>‚ú® –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞</h4>
                <div class="interpretation-text">
                    ${spreadResult.interpretation}
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
}

// üîô –ó–ê–ì–†–£–ó–ö–ê –ú–ï–ù–Æ –†–ê–°–ö–õ–ê–î–û–í
function loadSpreadsMenu() {
    const spreadsSection = document.getElementById('spreads-section');
    if (!spreadsSection) return;
    
    const spreadConfigs = window.getSpreadsConfig && window.getSpreadsConfig();
    
    let html = `
        <div class="spreads-menu">
            <h2>üÉè –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ</h2>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞</p>
            
            <div class="spreads-grid">
    `;
    
    if (spreadConfigs && Object.keys(spreadConfigs).length > 0) {
        Object.entries(spreadConfigs).forEach(([key, config]) => {
            html += `
                <div class="spread-card" data-spread="${key}">
                    <div class="spread-icon">${config.icon || 'üé¥'}</div>
                    <h3>${config.name}</h3>
                    <p>${config.description}</p>
                    <div class="spread-info">
                        <span class="cards-count">${config.cardsCount || 3} –∫–∞—Ä—Ç</span>
                        ${!appState.isPremium ? '<span class="premium-badge">Premium</span>' : ''}
                    </div>
                </div>
            `;
        });
    } else {
        // Fallback —Ä–∞—Å–∫–ª–∞–¥—ã, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        const defaultSpreads = [
            {
                key: 'three_cards',
                name: '–¢—Ä–∏ –∫–∞—Ä—Ç—ã',
                description: '–ü—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ',
                icon: 'üé¥',
                cardsCount: 3
            },
            {
                key: 'celtic_cross',
                name: '–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç',
                description: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏',
                icon: '‚úùÔ∏è',
                cardsCount: 10
            }
        ];
        
        defaultSpreads.forEach(spread => {
            html += `
                <div class="spread-card" data-spread="${spread.key}">
                    <div class="spread-icon">${spread.icon}</div>
                    <h3>${spread.name}</h3>
                    <p>${spread.description}</p>
                    <div class="spread-info">
                        <span class="cards-count">${spread.cardsCount} –∫–∞—Ä—Ç</span>
                        ${!appState.isPremium ? '<span class="premium-badge">Premium</span>' : ''}
                    </div>
                </div>
            `;
        });
    }
    
    html += `
            </div>
        </div>
    `;
    
    spreadsSection.innerHTML = html;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setTimeout(() => {
        const spreadCards = document.querySelectorAll('.spread-card');
        spreadCards.forEach(card => {
            card.addEventListener('click', (e) => {
                const spreadType = e.currentTarget.dataset.spread;
                if (spreadType) selectSpread(spreadType);
            });
        });
    }, 100);
}

// üìö –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function loadUserHistory() {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const historyContainer = document.getElementById('history-container');
    if (!historyContainer) return;
    
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        
        if (history.length === 0) {
            historyContainer.innerHTML = `
                <div class="empty-history">
                    <p>üìù –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>
                    <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–Ω—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>
                </div>
            `;
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        history.sort((a, b) => new Date(b.date) - new Date(a.date));
        
        let html = '<div class="history-list">';
        
        history.forEach((item, index) => {
            const date = new Date(item.date).toLocaleDateString('ru-RU');
            const time = new Date(item.date).toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            html += `<div class="history-item">`;
            
            if (item.type === 'daily_card') {
                html += `
                    <div class="history-header">
                        <span class="history-type">üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è</span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
                    <div class="history-content">
                        <strong>${item.card.name}</strong>
                        <p>${item.card.description || ''}</p>
                    </div>
                `;
            } else if (item.type === 'question') {
                html += `
                    <div class="history-header">
                        <span class="history-type">‚ùì –í–æ–ø—Ä–æ—Å</span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
                    <div class="history-content">
                        <p class="question-text">"${item.question}"</p>
                        <strong>${item.card.name}</strong>
                        <p>${item.card.description || ''}</p>
                    </div>
                `;
            } else if (item.type === 'spread') {
                html += `
                    <div class="history-header">
                        <span class="history-type">üÉè –†–∞—Å–∫–ª–∞–¥</span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
                    <div class="history-content">
                        <p class="question-text">"${item.question}"</p>
                        <p><strong>–¢–∏–ø:</strong> ${item.spreadType}</p>
                    </div>
                `;
            } else if (item.type === 'follow_up') {
                html += `
                    <div class="history-header">
                        <span class="history-type">üí´ –î–æ–ø. –≤–æ–ø—Ä–æ—Å</span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
                    <div class="history-content">
                        <p class="question-text">"${item.question}"</p>
                        <p>${item.answer}</p>
                    </div>
                `;
            }
            
            html += '</div>';
        });
        
        html += '</div>';
        
        historyContainer.innerHTML = html;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        historyContainer.innerHTML = `
            <div class="error-message">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>
            </div>
        `;
    }
}

// üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò
function handleClearHistory() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        localStorage.removeItem('tarot_user_history');
        loadUserHistory();
        showMessage('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'info');
    }
}

// üìù –ó–ê–ì–†–£–ó–ö–ê –û–¢–ó–´–í–û–í
async function loadReviews() {
    console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤');
    
    const reviewsContainer = document.getElementById('reviews-container');
    if (!reviewsContainer) return;
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        reviewsContainer.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...</div>';
        
        if (supabase && window.TABLES) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Supabase
            const { data: reviews, error } = await supabase
                .from(window.TABLES.reviews)
                .select('*')
                .order('created_at', { ascending: false })
                .limit(50);
                
            if (!error && reviews) {
                displayReviews(reviews, reviewsContainer);
                return;
            }
        }
        
        // Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        const localReviews = JSON.parse(localStorage.getItem('tarot_reviews') || '[]');
        displayReviews(localReviews, reviewsContainer);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        reviewsContainer.innerHTML = `
            <div class="error-message">
                <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</p>
            </div>
        `;
    }
}

// üìã –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–¢–ó–´–í–û–í
function displayReviews(reviews, container) {
    if (!container) return;
    
    if (!reviews || reviews.length === 0) {
        container.innerHTML = `
            <div class="empty-reviews">
                <p>üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <p>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!</p>
            </div>
        `;
        return;
    }
    
    let html = '<div class="reviews-list">';
    
    reviews.forEach(review => {
        const date = new Date(review.created_at || review.date).toLocaleDateString('ru-RU');
        const stars = '‚≠ê'.repeat(review.rating || 5);
        
        html += `
            <div class="review-item">
                <div class="review-header">
                    <span class="review-rating">${stars}</span>
                    <span class="review-date">${date}</span>
                </div>
                <div class="review-content">
                    <p class="review-name">${review.display_name || review.name || '–ê–Ω–æ–Ω–∏–º'}</p>
                    <p class="review-text">${review.review_text || review.text}</p>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// ‚≠ê –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ó–í–ï–ó–î–ê–ú
function handleRatingClick(rating) {
    console.log('‚≠ê –í—ã–±—Ä–∞–Ω —Ä–µ–π—Ç–∏–Ω–≥:', rating);
    
    appState.currentRating = rating;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥
    const stars = document.querySelectorAll('.rating-star');
    stars.forEach((star, index) => {
        star.classList.toggle('active', index < rating);
    });
}

// üì§ –û–¢–ü–†–ê–í–ö–ê –û–¢–ó–´–í–ê
async function handleSubmitReview(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const name = formData.get('review_name');
    const text = formData.get('review_text');
    const rating = appState.currentRating;
    
    if (!rating) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥');
        return;
    }
    
    if (!text || text.trim().length < 10) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
        return;
    }
    
    const submitBtn = form.querySelector('.submit-review-btn');
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        const reviewData = {
            display_name: name || '–ê–Ω–æ–Ω–∏–º',
            review_text: text.trim(),
            rating: rating,
            created_at: new Date().toISOString(),
            user_id: currentUser ? currentUser.id : null
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
        if (supabase && window.TABLES) {
            const { error } = await supabase
                .from(window.TABLES.reviews)
                .insert([reviewData]);
                
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ Supabase:', error);
            }
        }
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const localReviews = JSON.parse(localStorage.getItem('tarot_reviews') || '[]');
        localReviews.push(reviewData);
        localStorage.setItem('tarot_reviews', JSON.stringify(localReviews));
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        form.reset();
        appState.currentRating = 0;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã
        const stars = document.querySelectorAll('.rating-star');
        stars.forEach(star => star.classList.remove('active'));
        
        showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!', 'info');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
        loadReviews();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ
function saveToHistory(item) {
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        history.push(item);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 100) {
            history.splice(0, history.length - 100);
        }
        
        localStorage.setItem('tarot_user_history', JSON.stringify(history));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function saveUserData() {
    try {
        const userData = {
            questionsLeft: appState.questionsLeft,
            isPremium: appState.isPremium,
            lastUpdated: new Date().toISOString()
        };
        
        localStorage.setItem('tarot_user_data', JSON.stringify(userData));
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (supabase && currentUser) {
            updateUserInSupabase(userData);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üì§ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í SUPABASE
async function updateUserInSupabase(userData) {
    if (!supabase || !currentUser) return;
    
    try {
        const tables = window.getTablesConfig();
        if (!tables) return;
        
        const { error } = await supabase
            .from(tables.userProfiles)
            .update({
                questions_left: userData.questionsLeft,
                is_premium: userData.isPremium,
                updated_at: new Date().toISOString()
            })
            .eq('telegram_user_id', currentUser.telegram_user_id);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', error);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Supabase:', error);
    }
}

// üé≠ –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ö–ê–ó –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
function checkAndShowWelcome() {
    const hasSeenWelcome = localStorage.getItem('tarot_seen_welcome_modal');
    
    if (!hasSeenWelcome && !currentUser) {
        showProfileModal();
    }
}

// üìù –ü–û–ö–ê–ó –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–§–ò–õ–Ø
function showProfileModal() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.style.display = 'flex';
        setTimeout(() => {
            profileModal.classList.add('show');
        }, 50);
    }
}

// üíæ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø
async function handleSaveProfile(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const displayName = formData.get('display_name');
    const birthDate = formData.get('birth_date');
    
    if (!displayName) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        const profileData = {
            displayName: displayName,
            birthDate: birthDate,
            createdAt: new Date().toISOString()
        };
        
        localStorage.setItem('tarot_user_profile', JSON.stringify(profileData));
        localStorage.setItem('tarot_seen_welcome_modal', 'true');
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        closeProfileModal();
        showMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®—ë–ø–æ—Ç –∫–∞—Ä—Ç!', 'info');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// ‚è≠Ô∏è –ü–†–û–ü–£–°–ö –ü–†–û–§–ò–õ–Ø
function skipProfile() {
    localStorage.setItem('tarot_seen_welcome_modal', 'true');
    closeProfileModal();
}

// ‚ùå –ó–ê–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–§–ò–õ–Ø
function closeProfileModal() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.classList.remove('show');
        setTimeout(() => {
            profileModal.style.display = 'none';
        }, 300);
    }
}

// üì¢ –ü–û–ö–ê–ó –°–û–û–ë–©–ï–ù–ò–ô
function showMessage(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageEl = document.createElement('div');
    messageEl.className = `message message-${type}`;
    messageEl.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        background: type === 'error' ? '#e74c3c' : type === 'premium' ? '#f39c12' : '#27ae60',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        zIndex: '9999',
        fontSize: '14px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        opacity: '0',
        transition: 'opacity 0.3s ease',
        maxWidth: '90%',
        textAlign: 'center'
    });
    
    document.body.appendChild(messageEl);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        messageEl.style.opacity = '1';
    }, 50);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        messageEl.style.opacity = '0';
        setTimeout(() => {
            if (document.body.contains(messageEl)) {
                document.body.removeChild(messageEl);
            }
        }, 300);
    }, 3000);
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

// üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
function debugApp() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        appState: appState,
        currentUser: currentUser,
        supabase: !!supabase,
        supabaseInitialized: supabaseInitialized,
        isInitializing: isInitializing,
        configReady: window.isConfigReady ? window.isConfigReady() : false,
        functions: {
            initApp: typeof initApp,
            switchTab: typeof switchTab,
            updateUI: typeof updateUI
        }
    });
}

// üåü –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨
window.tarotApp = {
    initApp,
    switchTab,
    appState,
    currentUser,
    updateUI,
    handleDailyCardClick,
    handleAskQuestion,
    handleFollowUpQuestion,
    handleBuyPremium,
    selectSpread,
    performSpread,
    showMessage,
    showErrorMessage,
    debugApp,
    saveUserData,
    loadUserHistory,
    handleClearHistory,
    handleSubmitReview,
    handleRatingClick,
    loadSpreadsMenu,
    showSpreadPerform,
    checkTodayCard,
    getDailyCard,
    getAnswerCard,
    showProfileModal,
    handleSaveProfile,
    skipProfile,
    closeProfileModal
};

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó)
let appStarted = false;

document.addEventListener('DOMContentLoaded', function() {
    if (appStarted) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫');
        return;
    }
    
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    appStarted = true;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    setTimeout(() => {
        initApp();
    }, 100);
});

console.log('‚úÖ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
