// script.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–®—ë–ø–æ—Ç –∫–∞—Ä—Ç"
// ========================================================================

console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ script.js...');

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let supabase = null;
let currentUser = null;
let appState = {
    currentTab: 'daily',
    questionsLeft: 3,
    isPremium: false,
    isInitialized: false,
    currentRating: 0,
    dailyCardUsed: false
};

// üö´ –§–õ–ê–ì–ò –°–û–°–¢–û–Ø–ù–ò–Ø
let isInitializing = false;
let supabaseInitialized = false;

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (appState.isInitialized || isInitializing) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        return;
    }
    
    isInitializing = true;

    try {
        // 1. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await waitForConfig();
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
        await initSupabaseOnce();
        
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramWebApp();
        
        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await initUser();
        
        // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        
        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        checkAndShowWelcome();
        
        appState.isInitialized = true;
        isInitializing = false;
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        isInitializing = false;
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// ‚è∞ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function waitForConfig() {
    console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    let attempts = 0;
    const maxAttempts = 50;
    
    while (attempts < maxAttempts) {
        if (window.isConfigReady && window.isConfigReady()) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
            return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
async function initSupabaseOnce() {
    if (supabaseInitialized) {
        console.log('‚úÖ Supabase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }
    
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase
        if (typeof window.supabase === 'undefined') {
            console.warn('‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = window.getSupabaseConfig();
        if (!config || !config.url || !config.anonKey) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return false;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase = window.supabase.createClient(config.url, config.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            }
        });
        
        supabaseInitialized = true;
        console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ü–≤–µ—Ç–æ–≤
                if (tg.version >= '6.1') {
                    tg.setHeaderColor('#1a1a2e');
                    tg.setBackgroundColor('#16213e');
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è –¶–≤–µ—Ç–∞ —Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏');
            }
            
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            if (tg.MainButton) {
                tg.MainButton.hide();
            }
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('üìä –í–µ—Ä—Å–∏—è WebApp:', tg.version);
            
        } else {
            console.log('‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// üë§ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initUser() {
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ localStorage
        let userData = loadUserData();
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            if (tgUser) {
                userData = {
                    id: tgUser.id,
                    firstName: tgUser.first_name,
                    lastName: tgUser.last_name,
                    username: tgUser.username,
                    languageCode: tgUser.language_code
                };
                saveUserData(userData);
            }
        }
        
        currentUser = userData;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const savedState = loadAppState();
        if (savedState) {
            appState = { ...appState, ...savedState };
        }
        
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userData);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', currentUser);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üíæ –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
function saveUserData(userData) {
    try {
        localStorage.setItem('tarot_user_data', JSON.stringify(userData));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

function loadUserData() {
    try {
        const data = localStorage.getItem('tarot_user_data');
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

function saveAppState() {
    try {
        const stateToSave = {
            questionsLeft: appState.questionsLeft,
            isPremium: appState.isPremium,
            dailyCardUsed: appState.dailyCardUsed,
            lastCardDate: new Date().toDateString()
        };
        localStorage.setItem('tarot_app_state', JSON.stringify(stateToSave));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function loadAppState() {
    try {
        const data = localStorage.getItem('tarot_app_state');
        if (data) {
            const savedState = JSON.parse(data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è
            const today = new Date().toDateString();
            if (savedState.lastCardDate !== today) {
                savedState.dailyCardUsed = false;
            }
            return savedState;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        return null;
    }
}

// üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
    const tabButtons = document.querySelectorAll('[data-tab]');
    tabButtons.forEach(button => {
        button.addEventListener('click', (e) => {
            const tabName = e.target.dataset.tab;
            if (tabName) switchTab(tabName);
        });
    });
    
    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', handleDailyCardClick);
    }
    
    // –§–æ—Ä–º–∞ –≤–æ–ø—Ä–æ—Å–∞
    const questionBtn = document.querySelector('.question-submit-btn');
    if (questionBtn) {
        questionBtn.addEventListener('click', handleAskQuestion);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// üéØ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í
function switchTab(tabName) {
    console.log('üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tabName);
    
    appState.currentTab = tabName;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = document.querySelectorAll('.tab-content');
    sections.forEach(section => section.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(tabName);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±—ã
    const tabButtons = document.querySelectorAll('[data-tab]');
    tabButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.tab === tabName);
    });
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–∞–±–æ–≤
    if (tabName === 'daily') {
        checkTodayCard();
    } else if (tabName === 'history') {
        loadUserHistory();
    }
    
    updateUI();
}

// üñºÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
function updateUI() {
    console.log('üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionsLeftElements = document.querySelectorAll('.questions-left');
    questionsLeftElements.forEach(el => {
        el.textContent = appState.questionsLeft;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionStatus = document.getElementById('subscription-status');
    if (subscriptionStatus) {
        const statusText = subscriptionStatus.querySelector('.status-text');
        const statusIcon = subscriptionStatus.querySelector('.status-icon');
        
        if (appState.isPremium) {
            statusText.textContent = 'Premium –∞–∫—Ç–∏–≤–µ–Ω';
            statusIcon.textContent = 'üëë';
            subscriptionStatus.classList.add('premium');
        } else {
            statusText.textContent = '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è';
            statusIcon.textContent = 'üåë';
            subscriptionStatus.classList.remove('premium');
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    const premiumButtons = document.querySelectorAll('.premium-btn');
    premiumButtons.forEach(btn => {
        btn.style.display = appState.isPremium ? 'none' : 'block';
    });
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö
    const limitWarnings = document.querySelectorAll('.limit-warning');
    limitWarnings.forEach(warning => {
        const shouldShow = !appState.isPremium && appState.questionsLeft <= 1;
        warning.style.display = shouldShow ? 'block' : 'none';
    });
    
    console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª—ë–Ω');
}

// üÉè –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–ò–ö–ê –ü–û –ö–ê–†–¢–ï –î–ù–Ø
function handleDailyCardClick() {
    console.log('üÉè –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    if (appState.dailyCardUsed) {
        showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!', 'info');
        return;
    }
    
    const loadingEl = document.getElementById('daily-loading');
    const resultEl = document.getElementById('daily-result');
    const cardEl = document.getElementById('daily-card');
    
    if (loadingEl) loadingEl.style.display = 'block';
    if (cardEl) cardEl.style.display = 'none';
    if (resultEl) resultEl.style.display = 'none';
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
    setTimeout(() => {
        getDailyCard();
    }, 1000);
}

// üé¥ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢–´ –î–ù–Ø
async function getDailyCard() {
    console.log('üé¥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è...');
    
    try {
        let card = null;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ API
        const apiConfig = window.getAPIConfig();
        if (apiConfig && apiConfig.n8nWebhookUrl && apiConfig.n8nWebhookUrl !== 'https://your-n8n.app/webhook/tarot') {
            try {
                const response = await fetch(apiConfig.n8nWebhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: 'daily_card',
                        user: currentUser
                    }),
                    timeout: apiConfig.timeout || 10000
                });
                
                if (response.ok) {
                    const data = await response.json();
                    card = data.card;
                    console.log('‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ API');
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
            }
        }
        
        // –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if (!card) {
            const fallbackCards = window.getFallbackCards();
            if (fallbackCards && fallbackCards.length > 0) {
                const randomIndex = Math.floor(Math.random() * fallbackCards.length);
                card = fallbackCards[randomIndex];
                console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ä—Ç—É:', card);
            }
        }
        
        if (card) {
            showDailyCardResult(card);
            appState.dailyCardUsed = true;
            saveAppState();
            saveToHistory('daily_card', null, card);
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        showDailyCardError();
    }
}

// üé≠ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ö–ê–†–¢–´ –î–ù–Ø
function showDailyCardResult(card) {
    const loadingEl = document.getElementById('daily-loading');
    const resultEl = document.getElementById('daily-result');
    
    if (loadingEl) loadingEl.style.display = 'none';
    
    if (resultEl) {
        resultEl.innerHTML = `
            <div class="card-result">
                <div class="card-name">${card.name}</div>
                <div class="card-description">
                    ${card.description || '–ö–∞—Ä—Ç–∞ –¥–Ω—è —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...'}
                </div>
                ${card.keywords ? `<div class="card-keywords">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${card.keywords.join(', ')}</div>` : ''}
                ${card.meanings ? `
                    <div class="card-meanings">
                        <strong>–ó–Ω–∞—á–µ–Ω–∏–µ:</strong> ${card.meanings.upright || '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å'}
                    </div>
                ` : ''}
            </div>
        `;
        resultEl.style.display = 'block';
    }
    
    showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è –ø–æ–ª—É—á–µ–Ω–∞! ‚ú®', 'info');
}

// ‚ùå –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –ö–ê–†–¢–´ –î–ù–Ø
function showDailyCardError() {
    const loadingEl = document.getElementById('daily-loading');
    const resultEl = document.getElementById('daily-result');
    const cardEl = document.getElementById('daily-card');
    
    if (loadingEl) loadingEl.style.display = 'none';
    if (cardEl) cardEl.style.display = 'block';
    
    if (resultEl) {
        resultEl.innerHTML = `
            <div class="card-result error">
                <div class="card-name">–û—à–∏–±–∫–∞</div>
                <div class="card-description">
                    –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
                </div>
            </div>
        `;
        resultEl.style.display = 'block';
    }
    
    showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–ê
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const questionInput = document.getElementById('question-input');
    if (!questionInput) {
        showErrorMessage('–ü–æ–ª–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const question = questionInput.value.trim();
    if (!question) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showMessage('–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!', 'premium');
        return;
    }
    
    const loadingEl = document.getElementById('question-loading');
    const resultEl = document.getElementById('question-result');
    
    if (loadingEl) loadingEl.style.display = 'block';
    if (resultEl) resultEl.style.display = 'none';
    
    try {
        const answer = await getAnswerToQuestion(question);
        
        if (loadingEl) loadingEl.style.display = 'none';
        
        if (resultEl && answer) {
            resultEl.innerHTML = `
                <div class="card-result">
                    <div class="card-name">${answer.card.name}</div>
                    <div class="question-text">"${question}"</div>
                    <div class="card-description">
                        ${answer.interpretation || answer.card.description}
                    </div>
                    ${answer.card.keywords ? `<div class="card-keywords">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${answer.card.keywords.join(', ')}</div>` : ''}
                </div>
            `;
            resultEl.style.display = 'block';
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                saveAppState();
                updateUI();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory('question', question, answer.card, answer.interpretation);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            questionInput.value = '';
            
            showMessage('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! üîÆ', 'info');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        
        if (loadingEl) loadingEl.style.display = 'none';
        if (resultEl) {
            resultEl.innerHTML = `
                <div class="card-result error">
                    <div class="card-name">–û—à–∏–±–∫–∞</div>
                    <div class="card-description">
                        –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
                    </div>
                </div>
            `;
            resultEl.style.display = 'block';
        }
        
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å');
    }
}

// üîÆ –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ù–ê –í–û–ü–†–û–°
async function getAnswerToQuestion(question) {
    console.log('üîÆ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', question);
    
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
        const apiConfig = window.getAPIConfig();
        if (apiConfig && apiConfig.n8nWebhookUrl && apiConfig.n8nWebhookUrl !== 'https://your-n8n.app/webhook/tarot') {
            try {
                const response = await fetch(apiConfig.n8nWebhookUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: 'question',
                        question: question,
                        user: currentUser
                    }),
                    timeout: apiConfig.timeout || 15000
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API');
                    return data;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
            }
        }
        
        // Fallback –æ—Ç–≤–µ—Ç
        const fallbackCards = window.getFallbackCards();
        if (fallbackCards && fallbackCards.length > 0) {
            const randomIndex = Math.floor(Math.random() * fallbackCards.length);
            const card = fallbackCards[randomIndex];
            
            const fallbackInterpretations = [
                '–ö–∞—Ä—Ç—ã —Å–æ–≤–µ—Ç—É—é—Ç –≤–∞–º –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–µ—Ä–¥—Ü—É.',
                '–°–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.',
                '–ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã, –≤—Å—ë –∏–¥—ë—Ç —Å–≤–æ–∏–º —á–µ—Ä–µ–¥–æ–º.',
                '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—ã–ª–∞–µ—Ç –≤–∞–º –í—Å–µ–ª–µ–Ω–Ω–∞—è.',
                '–≠—Ç–æ –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–æ—Å—Ç–∞.'
            ];
            
            const interpretation = fallbackInterpretations[Math.floor(Math.random() * fallbackInterpretations.length)];
            
            console.log('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç');
            return {
                card: card,
                interpretation: interpretation
            };
        }
        
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        throw error;
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ
function saveToHistory(type, question, card, interpretation) {
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        
        const historyItem = {
            id: Date.now(),
            type: type,
            question: question,
            card: card,
            interpretation: interpretation,
            date: new Date().toISOString()
        };
        
        history.unshift(historyItem); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 50) {
            history.splice(50);
        }
        
        localStorage.setItem('tarot_user_history', JSON.stringify(history));
        console.log('üíæ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// üìö –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò
function loadUserHistory() {
    console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const historyContainer = document.getElementById('history-container');
    if (!historyContainer) return;
    
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        
        if (history.length === 0) {
            historyContainer.innerHTML = `
                <div class="text-center">
                    <p>üìù –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>
                    <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–Ω—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>
                </div>
            `;
            return;
        }
        
        let html = '<div class="history-list">';
        
        history.forEach(item => {
            const date = new Date(item.date).toLocaleDateString('ru-RU');
            const time = new Date(item.date).toLocaleTimeString('ru-RU', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            
            html += `
                <div class="history-item">
                    <div class="history-header">
                        <span class="history-type">
                            ${item.type === 'daily_card' ? 'üé¥ –ö–∞—Ä—Ç–∞ –¥–Ω—è' : '‚ùì –í–æ–ø—Ä–æ—Å'}
                        </span>
                        <span class="history-date">${date} ${time}</span>
                    </div>
            `;
            
            if (item.question) {
                html += `<div class="history-question">"${item.question}"</div>`;
            }
            
            html += `
                    <div class="history-content">
                        <strong>${item.card.name}</strong>
                        <p>${item.interpretation || item.card.description}</p>
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        historyContainer.innerHTML = html;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        historyContainer.innerHTML = `
            <div class="text-center">
                <p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>
            </div>
        `;
    }
}

// üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò
function clearHistory() {
    try {
        localStorage.removeItem('tarot_user_history');
        loadUserHistory();
        showMessage('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'info');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
}

// ‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–†–¢–´ –î–ù–Ø
function checkTodayCard() {
    const today = new Date().toDateString();
    const lastCardDate = localStorage.getItem('tarot_last_card_date');
    
    if (lastCardDate !== today) {
        appState.dailyCardUsed = false;
        localStorage.setItem('tarot_last_card_date', today);
        saveAppState();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç—ã –¥–Ω—è
    const cardEl = document.getElementById('daily-card');
    const resultEl = document.getElementById('daily-result');
    
    if (appState.dailyCardUsed) {
        if (cardEl) cardEl.style.display = 'none';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        loadTodayCardResult();
    } else {
        if (cardEl) cardEl.style.display = 'block';
        if (resultEl) resultEl.style.display = 'none';
    }
}

// üìÖ –ó–ê–ì–†–£–ó–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ö–ê–†–¢–´ –î–ù–Ø
function loadTodayCardResult() {
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        const today = new Date().toDateString();
        
        const todayCard = history.find(item => 
            item.type === 'daily_card' && 
            new Date(item.date).toDateString() === today
        );
        
        if (todayCard) {
            showDailyCardResult(todayCard.card);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
    }
}

// üîî –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ö–ê–ó –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
function checkAndShowWelcome() {
    const hasSeenWelcome = localStorage.getItem('tarot_seen_welcome');
    if (!hasSeenWelcome) {
        showMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! üîÆ', 'info');
        localStorage.setItem('tarot_seen_welcome', 'true');
    }
}

// üëë –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ö–£–ü–ö–ò PREMIUM
function handleBuyPremium() {
    const apiConfig = window.getAPIConfig();
    if (apiConfig && apiConfig.paymentUrl && apiConfig.paymentUrl !== 'https://www.wildberries.ru/catalog/199937445/detail.aspx') {
        window.open(apiConfig.paymentUrl, '_blank');
    } else {
        showMessage('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', 'premium');
    }
}

// üé¥ –í–´–ë–û–† –†–ê–°–ö–õ–ê–î–ê
function selectSpread(spreadType) {
    const spreadsConfig = window.getSpreadsConfig();
    const spread = spreadsConfig[spreadType];
    
    if (!spread) {
        showMessage('–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    if (spread.isPremium && !appState.isPremium) {
        showMessage('–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Premium –≤–µ—Ä—Å–∏–∏', 'premium');
        return;
    }
    
    showMessage(`–†–∞—Å–∫–ª–∞–¥ "${spread.name}" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏`, 'info');
}

// üí¨ –°–ò–°–¢–ï–ú–ê –°–û–û–ë–©–ï–ù–ò–ô
function showMessage(text, type = 'info') {
    const messageEl = document.createElement('div');
    messageEl.className = `message message-${type}`;
    messageEl.textContent = text;
    
    Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        background: type === 'error' ? '#e74c3c' : type === 'premium' ? '#f39c12' : '#27ae60',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        zIndex: '9999',
        fontSize: '14px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        opacity: '0',
        transition: 'opacity 0.3s ease',
        maxWidth: '90%',
        textAlign: 'center'
    });
    
    document.body.appendChild(messageEl);
    
    setTimeout(() => messageEl.style.opacity = '1', 50);
    
    setTimeout(() => {
        messageEl.style.opacity = '0';
        setTimeout(() => {
            if (document.body.contains(messageEl)) {
                document.body.removeChild(messageEl);
            }
        }, 300);
    }, 3000);
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

// üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
function debugApp() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        appState: appState,
        currentUser: currentUser,
        supabase: !!supabase,
        supabaseInitialized: supabaseInitialized,
        isInitializing: isInitializing,
        configReady: window.isConfigReady ? window.isConfigReady() : false
    });
}

// üåü –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨
window.tarotApp = {
    initApp,
    switchTab,
    appState,
    currentUser,
    updateUI,
    handleDailyCardClick,
    handleAskQuestion,
    handleBuyPremium,
    selectSpread,
    showMessage,
    showErrorMessage,
    debugApp,
    saveAppState,
    loadUserHistory,
    clearHistory,
    checkTodayCard,
    getDailyCard,
    getAnswerToQuestion
};

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
let appStarted = false;

document.addEventListener('DOMContentLoaded', function() {
    if (appStarted) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        return;
    }
    
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    appStarted = true;
    
    setTimeout(() => {
        initApp();
    }, 100);
});

console.log('‚úÖ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
