// script.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–®—ë–ø–æ—Ç –∫–∞—Ä—Ç"
// ========================================================================

console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ script.js...');

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let supabase = null;
let currentUser = null;
let appState = {
    currentTab: 'daily',
    questionsLeft: 3,
    isPremium: false,
    isInitialized: false,
    currentRating: 0,
    dailyCardUsed: false
};

// üö´ –§–õ–ê–ì–ò –°–û–°–¢–û–Ø–ù–ò–Ø
let isInitializing = false;
let supabaseInitialized = false;

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    if (appState.isInitialized || isInitializing) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        return;
    }
    
    isInitializing = true;

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingState();
        
        // 1. –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)
        await waitForConfig();
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π UI –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        initBasicUI();
        
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramWebApp();
        
        // 4. –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        await initSupabaseOnce();
        
        // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await initUser();
        
        // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 7. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        
        // 8. –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoadingState();
        
        // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        setTimeout(checkAndShowWelcome, 1000);
        
        appState.isInitialized = true;
        isInitializing = false;
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        isInitializing = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π UI –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        initBasicUI();
        setupEventListeners();
        hideLoadingState();
        
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
    }
}

// üîÑ –ü–û–ö–ê–ó–ê–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
function showLoadingState() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let loader = document.getElementById('app-loader');
    if (!loader) {
        loader = document.createElement('div');
        loader.id = 'app-loader';
        loader.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            color: white;
            font-family: Arial, sans-serif;
        `;
        loader.innerHTML = `
            <div style="text-align: center;">
                <div style="font-size: 48px; margin-bottom: 20px;">üîÆ</div>
                <div style="font-size: 20px; color: #ffd700;">–®—ë–ø–æ—Ç –∫–∞—Ä—Ç</div>
                <div style="font-size: 14px; margin-top: 10px; opacity: 0.7;">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            </div>
        `;
        document.body.appendChild(loader);
    }
}

// ü´• –°–ö–†–´–¢–¨ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò
function hideLoadingState() {
    const loader = document.getElementById('app-loader');
    if (loader) {
        loader.style.opacity = '0';
        setTimeout(() => loader.remove(), 300);
    }
}

// üé® –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–û–í–û–ì–û UI
function initBasicUI() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UI...');
    
    try {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤–∏–¥–Ω–∞
        const dailyTab = document.getElementById('daily-tab');
        if (dailyTab) {
            dailyTab.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–∞–±–∞
        const firstTabBtn = document.querySelector('.nav-tab[data-tab="daily"]');
        if (firstTabBtn) {
            firstTabBtn.classList.add('active');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è textarea
        initCharCounters();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
        initRatingStars();
        
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ UI:', error);
    }
}

// ‚è∞ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function waitForConfig() {
    console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    let attempts = 0;
    const maxAttempts = 30; // 3 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º
    
    while (attempts < maxAttempts) {
        if (window.isConfigReady && window.isConfigReady()) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
            return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
        attempts++;
    }
    
    console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ 3 —Å–µ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë');
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
async function initSupabaseOnce() {
    if (supabaseInitialized) {
        console.log('‚úÖ Supabase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
    }
    
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase
        if (typeof window.supabase === 'undefined') {
            console.warn('‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = window.getSupabaseConfig ? window.getSupabaseConfig() : null;
        if (!config || !config.url || !config.anonKey) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return false;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        supabase = window.supabase.createClient(config.url, config.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            }
        });
        
        supabaseInitialized = true;
        console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
    
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try {
                if (tg.version >= '6.1') {
                    tg.setHeaderColor('#1a1a2e');
                    tg.setBackgroundColor('#16213e');
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è –¶–≤–µ—Ç–∞ —Ç–µ–º—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏');
            }
            
            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            if (tg.MainButton) {
                tg.MainButton.hide();
            }
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } else {
            console.log('‚ÑπÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// üë§ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initUser() {
    console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –∏–ª–∏ localStorage
        let userData = loadUserData();
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
            if (tgUser) {
                userData = {
                    id: tgUser.id,
                    firstName: tgUser.first_name,
                    lastName: tgUser.last_name,
                    username: tgUser.username,
                    languageCode: tgUser.language_code
                };
                saveUserData(userData);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ
        if (!userData) {
            userData = {
                id: 'anonymous_' + Date.now(),
                firstName: '–ì–æ—Å—Ç—å',
                isAnonymous: true
            };
        }
        
        currentUser = userData;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const savedState = loadAppState();
        if (savedState) {
            appState = { ...appState, ...savedState };
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', currentUser);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        
        // Fallback –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        currentUser = {
            id: 'fallback_user',
            firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            isAnonymous: true
        };
    }
}

// üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    try {
        // –û–°–ù–û–í–ù–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
        const tabButtons = document.querySelectorAll('.nav-tab[data-tab]');
        tabButtons.forEach(button => {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            button.removeEventListener('click', handleTabClick);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            button.addEventListener('click', handleTabClick);
        });
        
        // –ö–∞—Ä—Ç–∞ –¥–Ω—è
        const dailyCard = document.getElementById('daily-card');
        if (dailyCard) {
            dailyCard.removeEventListener('click', handleDailyCardClick);
            dailyCard.addEventListener('click', handleDailyCardClick);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        const askBtn = document.getElementById('ask-btn');
        if (askBtn) {
            askBtn.removeEventListener('click', handleAskQuestion);
            askBtn.addEventListener('click', handleAskQuestion);
        }
        
        // Enter –≤ –ø–æ–ª–µ –≤–æ–ø—Ä–æ—Å–∞
        const questionInput = document.getElementById('question-input');
        if (questionInput) {
            questionInput.removeEventListener('keypress', handleQuestionKeypress);
            questionInput.addEventListener('keypress', handleQuestionKeypress);
            questionInput.addEventListener('input', updateCharCounter);
        }

        // –ö–Ω–æ–ø–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        const followupBtn = document.getElementById('followup-btn');
        if (followupBtn) {
            followupBtn.removeEventListener('click', handleFollowupQuestion);
            followupBtn.addEventListener('click', handleFollowupQuestion);
        }

        // –†–∞—Å–∫–ª–∞–¥—ã
        const spreadCards = document.querySelectorAll('.spread-card[data-spread]');
        spreadCards.forEach(card => {
            card.removeEventListener('click', handleSpreadClick);
            card.addEventListener('click', handleSpreadClick);
        });

        // Premium –∫–Ω–æ–ø–∫–∞
        const buyPremiumBtn = document.getElementById('buy-premium');
        if (buyPremiumBtn) {
            buyPremiumBtn.removeEventListener('click', handlePremiumPurchase);
            buyPremiumBtn.addEventListener('click', handlePremiumPurchase);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        setupProfileEventListeners();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        setupReviewEventListeners();

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:', error);
    }
}

// üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –¢–ê–ë–£
function handleTabClick(event) {
    const tabName = event.currentTarget.getAttribute('data-tab');
    if (tabName) {
        switchTab(tabName);
    }
}

// üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–ö–õ–ê–î–û–ö
function switchTab(tabName) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
        const targetTab = document.getElementById(`${tabName}-tab`);
        if (!targetTab) {
            console.error(`‚ùå –í–∫–ª–∞–¥–∫–∞ ${tabName}-tab –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return;
        }

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        const tabButton = document.querySelector(`.nav-tab[data-tab="${tabName}"]`);
        
        if (tabButton) {
            tabButton.classList.add('active');
        }
        
        targetTab.classList.add('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.currentTab = tabName;
        saveAppState();
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        if (tabName === 'history') {
            loadHistoryData();
        }
        
        console.log('‚úÖ –í–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞:', tabName);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
    }
}

// üîÆ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ö–ê–†–¢–ï –î–ù–Ø
async function handleDailyCardClick() {
    console.log('üîÆ –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    try {
        if (appState.dailyCardUsed) {
            showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!', 'info');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loadingElement = document.getElementById('daily-loading');
        if (loadingElement) {
            loadingElement.style.display = 'block';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        const card = getRandomCard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        setTimeout(() => {
            const cardElement = document.getElementById('daily-card');
            if (cardElement) {
                cardElement.innerHTML = `
                    <div class="card-front">
                        <div class="card-symbol">${card.symbol}</div>
                        <div class="card-name">${card.name}</div>
                    </div>
                `;
                cardElement.classList.add('flipped');
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            const interpretationElement = document.getElementById('daily-interpretation');
            if (interpretationElement) {
                interpretationElement.textContent = card.interpretation;
            }
            
            const aiContainer = document.getElementById('daily-ai-container');
            if (aiContainer) {
                aiContainer.style.display = 'block';
            }
            
        }, 1500);
        
        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        appState.dailyCardUsed = true;
        saveAppState();
        
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –ø–æ–∫–∞–∑–∞–Ω–∞:', card.name);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
        
        const loadingElement = document.getElementById('daily-loading');
        if (loadingElement) {
            loadingElement.style.display = 'none';
        }
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö KEYPRESS –î–õ–Ø –ü–û–õ–Ø –í–û–ü–†–û–°–ê
function handleQuestionKeypress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        handleAskQuestion();
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ü–†–û–°–ê
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
    
    try {
        const questionInput = document.getElementById('question-input');
        const question = questionInput ? questionInput.value.trim() : '';
        
        if (!question) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å', 'warning');
            return;
        }
        
        if (question.length < 10) {
            showMessage('–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ.', 'warning');
            return;
        }
        
        if (appState.questionsLeft <= 0 && !appState.isPremium) {
            showMessage('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç–µ Premium!', 'warning');
            switchTab('premium');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        const loadingElement = document.getElementById('question-loading');
        if (loadingElement) {
            loadingElement.style.display = 'block';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const answerSection = document.getElementById('first-answer-section');
        const followUpSection = document.getElementById('follow-up-section');
        if (answerSection) answerSection.style.display = 'none';
        if (followUpSection) followUpSection.style.display = 'none';
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç (–ø–æ–∫–∞ —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ)
        const answer = await getAnswerToQuestion(question);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            if (loadingElement) {
                loadingElement.style.display = 'none';
            }
            
            if (answerSection) {
                answerSection.style.display = 'block';
                
                // –ö–∞—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∞
                const answerCard = document.getElementById('answer-card');
                if (answerCard) {
                    answerCard.innerHTML = `
                        <div class="card-front">
                            <div class="card-symbol">${answer.card.symbol}</div>
                            <div class="card-name">${answer.card.name}</div>
                        </div>
                    `;
                    answerCard.classList.add('flipped');
                }
                
                // –ò–ò —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
                const aiContainer = document.getElementById('first-ai-container');
                if (aiContainer) {
                    aiContainer.innerHTML = `
                        <div class="ai-answer-header">
                            <h4>ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å</h4>
                        </div>
                        <div class="ai-answer-box">${answer.interpretation}</div>
                    `;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                setTimeout(() => {
                    if (followUpSection) {
                        followUpSection.style.display = 'block';
                    }
                }, 1000);
            }
        }, 2000);
        
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        if (!appState.isPremium) {
            appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
            updateUI();
            saveAppState();
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (questionInput) {
            questionInput.value = '';
            updateCharCounter({ target: questionInput });
        }
        
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å');
        
        const loadingElement = document.getElementById('question-loading');
        if (loadingElement) loadingElement.style.display = 'none';
    }
}

// üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–¢–û–ß–ù–Ø–Æ–©–ï–ì–û –í–û–ü–†–û–°–ê
async function handleFollowupQuestion() {
    console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    
    try {
        const followupInput = document.getElementById('followup-input');
        const question = followupInput ? followupInput.value.trim() : '';
        
        if (!question) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å', 'warning');
            return;
        }
        
        if (appState.questionsLeft <= 0 && !appState.isPremium) {
            showMessage('–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Ñ–æ—Ä–º–∏—Ç–µ Premium!', 'warning');
            switchTab('premium');
            return;
        }
        
        const followupBtn = document.getElementById('followup-btn');
        if (followupBtn) {
            followupBtn.disabled = true;
            followupBtn.innerHTML = '<span>üîÆ</span><span>–ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...</span>';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç
        const answer = await getAnswerToQuestion(question);
        
        setTimeout(() => {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º
            const followUpSection = document.getElementById('follow-up-section');
            if (followUpSection) {
                const answerDiv = document.createElement('div');
                answerDiv.className = 'ai-answer-container';
                answerDiv.innerHTML = `
                    <div class="ai-answer-header">
                        <h4>üîÆ –£—Ç–æ—á–Ω–µ–Ω–∏–µ: ${answer.card.name}</h4>
                    </div>
                    <div class="ai-answer-box">${answer.interpretation}</div>
                `;
                followUpSection.appendChild(answerDiv);
            }
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if (followupBtn) {
                followupBtn.disabled = false;
                followupBtn.innerHTML = '<span>üîÆ</span><span>–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</span>';
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            if (followupInput) {
                followupInput.value = '';
            }
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                updateUI();
                saveAppState();
            }
        }, 1500);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –æ—Ç–≤–µ—Ç');
        
        const followupBtn = document.getElementById('followup-btn');
        if (followupBtn) {
            followupBtn.disabled = false;
            followupBtn.innerHTML = '<span>üîÆ</span><span>–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</span>';
        }
    }
}

// üé¥ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –†–ê–°–ö–õ–ê–î–£
function handleSpreadClick(event) {
    const spreadType = event.currentTarget.getAttribute('data-spread');
    
    if (!spreadType) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Ä–∞—Å–∫–ª–∞–¥—ã
    const premiumSpreads = ['spiritual', 'future', 'celtic'];
    if (premiumSpreads.includes(spreadType) && !appState.isPremium) {
        showMessage('–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ Premium –≤–µ—Ä—Å–∏–∏', 'warning');
        switchTab('premium');
        return;
    }
    
    console.log('üé¥ –í—ã–±—Ä–∞–Ω —Ä–∞—Å–∫–ª–∞–¥:', spreadType);
    performSpread(spreadType);
}

// üîÆ –í–´–ü–û–õ–ù–ï–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê
async function performSpread(spreadType) {
    try {
        const spreadResult = document.getElementById('spread-result');
        const spreadCards = document.getElementById('spread-cards');
        const spreadInterpretation = document.getElementById('spread-interpretation');
        
        if (!spreadResult || !spreadCards || !spreadInterpretation) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        spreadResult.style.display = 'block';
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–∞—Ä—Ç—ã
        spreadCards.innerHTML = '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
        const cardCount = getSpreadCardCount(spreadType);
        const cards = [];
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã
        for (let i = 0; i < cardCount; i++) {
            const card = getRandomCard();
            cards.push(card);
            
            const cardElement = document.createElement('div');
            cardElement.className = 'tarot-card';
            cardElement.innerHTML = `
                <div class="card-front">
                    <div class="card-symbol">${card.symbol}</div>
                    <div class="card-name">${card.name}</div>
                </div>
            `;
            spreadCards.appendChild(cardElement);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
        const interpretation = generateSpreadInterpretation(spreadType, cards);
        spreadInterpretation.innerHTML = interpretation;
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        spreadResult.scrollIntoView({ behavior: 'smooth' });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥');
    }
}

// üìä –ö–û–õ–ò–ß–ï–°–¢–í–û –ö–ê–†–¢ –î–õ–Ø –†–ê–°–ö–õ–ê–î–ê
function getSpreadCardCount(spreadType) {
    const counts = {
        love: 3,
        career: 3,
        health: 2,
        spiritual: 4,
        future: 5,
        celtic: 10
    };
    return counts[spreadType] || 3;
}

// üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–û–õ–ö–û–í–ê–ù–ò–Ø –†–ê–°–ö–õ–ê–î–ê
function generateSpreadInterpretation(spreadType, cards) {
    const interpretations = {
        love: `
            <h4>üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å</h4>
            <p><strong>–ü—Ä–æ—à–ª–æ–µ:</strong> ${cards[0].name} –≥–æ–≤–æ—Ä–∏—Ç –æ ${cards[0].interpretation}</p>
            <p><strong>–ù–∞—Å—Ç–æ—è—â–µ–µ:</strong> ${cards[1].name} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–µ —á—É–≤—Å—Ç–≤–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.</p>
            <p><strong>–ë—É–¥—É—â–µ–µ:</strong> ${cards[2].name} –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ –≤–∞—à–∏—Ö —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.</p>
        `,
        career: `
            <h4>üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É</h4>
            <p><strong>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</strong> ${cards[0].name} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ.</p>
            <p><strong>–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è:</strong> ${cards[1].name} —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.</p>
            <p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${cards[2].name} –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥ –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.</p>
        `,
        health: `
            <h4>üåø –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ</h4>
            <p><strong>–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${cards[0].name} –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ.</p>
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> ${cards[1].name} –¥–∞–µ—Ç —Å–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è.</p>
        `
    };
    
    return interpretations[spreadType] || `<p>–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.</p>`;
}

// üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ö–£–ü–ö–ò –ü–†–ï–ú–ò–£–ú–ê
function handlePremiumPurchase(event) {
    event.preventDefault();
    
    console.log('üí≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ Premium');
    
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    showMessage('–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏! üöÄ', 'info');
    
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium
    if (confirm('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è?')) {
        appState.isPremium = true;
        appState.questionsLeft = 999;
        saveAppState();
        updateUI();
        showMessage('Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üëë', 'success');
    }
}

// üìú –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–°–¢–û–†–ò–ò
function loadHistoryData() {
    console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...');
    
    try {
        const historyList = document.getElementById('history-list');
        if (!historyList) return;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        const history = getHistoryFromStorage();
        
        if (history.length === 0) {
            historyList.innerHTML = `
                <div class="history-empty">
                    <div class="empty-icon">üìú</div>
                    <h4>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h4>
                    <p>–í–∞—à–∏ –≥–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                </div>
            `;
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        historyList.innerHTML = history.map(item => `
            <div class="history-item">
                <div class="history-header-item">
                    <div class="history-type">
                        <span class="history-icon">${item.icon}</span>
                        <span>${item.type}</span>
                    </div>
                    <div class="history-date">${item.date}</div>
                </div>
                <div class="history-preview">${item.preview}</div>
                ${item.card ? `
                    <div class="history-card">
                        <span class="history-mini-card">${item.card.symbol}</span>
                        <span>${item.card.name}</span>
                    </div>
                ` : ''}
            </div>
        `).join('');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

// üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
function updateUI() {
    console.log('üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        const statusElement = document.getElementById('subscription-status');
        if (statusElement) {
            const statusIcon = statusElement.querySelector('.status-icon');
            const statusText = statusElement.querySelector('.status-text');
            
            if (appState.isPremium) {
                if (statusIcon) statusIcon.textContent = 'üëë';
                if (statusText) statusText.textContent = 'Premium –∞–∫—Ç–∏–≤–µ–Ω';
                statusElement.className = 'subscription-status premium';
            } else {
                if (statusIcon) statusIcon.textContent = 'üÜì';
                if (statusText) statusText.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è';
                statusElement.className = 'subscription-status';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        const questionsCountElement = document.getElementById('questions-count');
        if (questionsCountElement) {
            questionsCountElement.textContent = appState.isPremium ? '‚àû' : appState.questionsLeft;
        }
        
        const questionsLeftElement = document.getElementById('questions-left');
        if (questionsLeftElement) {
            if (appState.isPremium) {
                questionsLeftElement.textContent = '(Premium)';
            } else {
                questionsLeftElement.textContent = `(–æ—Å—Ç–∞–ª–æ—Å—å: ${appState.questionsLeft})`;
            }
        }
        
        console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI:', error);
    }
}

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–í –°–ò–ú–í–û–õ–û–í
function initCharCounters() {
    try {
        const questionInput = document.getElementById('question-input');
        if (questionInput) {
            updateCharCounter({ target: questionInput });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
    }
}

// üî¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –°–ò–ú–í–û–õ–û–í
function updateCharCounter(event) {
    try {
        const input = event.target;
        const maxLength = input.getAttribute('maxlength') || 500;
        const currentLength = input.value.length;
        
        const counter = document.getElementById('char-count');
        if (counter) {
            counter.textContent = currentLength;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
            const parent = counter.parentElement;
            if (parent) {
                if (currentLength > maxLength * 0.9) {
                    parent.style.color = '#ef4444';
                } else if (currentLength > maxLength * 0.7) {
                    parent.style.color = '#f59e0b';
                } else {
                    parent.style.color = '#a0a0a0';
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
    }
}

// ‚≠ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–í–ï–ó–î–û–ß–ï–ö –†–ï–ô–¢–ò–ù–ì–ê
function initRatingStars() {
    try {
        const stars = document.querySelectorAll('.star[data-rating]');
        stars.forEach(star => {
            star.addEventListener('click', handleStarClick);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–µ–∑–¥–æ—á–µ–∫:', error);
    }
}

// ‚≠ê –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ó–í–ï–ó–î–û–ß–ö–ï
function handleStarClick(event) {
    const rating = parseInt(event.target.getAttribute('data-rating'));
    appState.currentRating = rating;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–µ–∫
    const stars = document.querySelectorAll('.star[data-rating]');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}

// üìù –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –û–¢–ó–´–í–û–í
function setupReviewEventListeners() {
    try {
        const submitReviewBtn = document.getElementById('submit-review');
        if (submitReviewBtn) {
            submitReviewBtn.removeEventListener('click', handleSubmitReview);
            submitReviewBtn.addEventListener('click', handleSubmitReview);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤:', error);
    }
}

// üìù –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ü–†–ê–í–ö–ò –û–¢–ó–´–í–ê
function handleSubmitReview() {
    try {
        const reviewText = document.getElementById('review-text');
        const text = reviewText ? reviewText.value.trim() : '';
        
        if (!text) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤', 'warning');
            return;
        }
        
        if (appState.currentRating === 0) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É', 'warning');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ (–ø–æ–∫–∞ —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ)
        const review = {
            rating: appState.currentRating,
            text: text,
            date: new Date().toISOString(),
            userName: currentUser?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        
        console.log('üìù –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', review);
        
        showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚≠ê', 'success');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        if (reviewText) reviewText.value = '';
        appState.currentRating = 0;
        
        const stars = document.querySelectorAll('.star[data-rating]');
        stars.forEach(star => star.classList.remove('active'));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤');
    }
}

// ü§ñ –ü–û–õ–£–ß–ï–ù–ò–ï –û–¢–í–ï–¢–ê –ù–ê –í–û–ü–†–û–°
async function getAnswerToQuestion(question) {
    console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', question);
    
    try {
        // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ n8n
        const card = getRandomCard();
        
        const interpretations = [
            `–ö–∞—Ä—Ç–∞ ${card.name} –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}" —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –º—É–¥—Ä–æ—Å—Ç–∏. ${card.interpretation}`,
            `–í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç ${card.name}. –≠—Ç–æ –∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –±–ª–∏–∑–∫–æ. ${card.interpretation}`,
            `${card.name} –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ "${question}" —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. ${card.interpretation}`
        ];
        
        return {
            card: card,
            interpretation: interpretations[Math.floor(Math.random() * interpretations.length)]
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        throw error;
    }
}

// üé≤ –ü–û–õ–£–ß–ï–ù–ò–ï –°–õ–£–ß–ê–ô–ù–û–ô –ö–ê–†–¢–´
function getRandomCard() {
    const cards = getFallbackCards();
    if (cards && cards.length > 0) {
        return cards[Math.floor(Math.random() * cards.length)];
    }
    
    // Fallback –∫–∞—Ä—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    return {
        name: "–ó–≤–µ–∑–¥–∞",
        symbol: "‚≠ê",
        interpretation: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º."
    };
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ fallback-–∫–∞—Ä—Ç –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
function getFallbackCards() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (window.getFallbackCards && typeof window.getFallbackCards === 'function') {
        try {
            const configCards = window.getFallbackCards();
            if (configCards && configCards.length > 0) {
                return configCards;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }
    
    // Fallback –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç
    return [
        {
            name: "–ó–≤–µ–∑–¥–∞",
            symbol: "üåü",
            interpretation: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –í—Ä–µ–º—è –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –º–µ—á—Ç–∞–Ω–∏–π."
        },
        {
            name: "–°–æ–ª–Ω—Ü–µ",
            symbol: "‚òÄÔ∏è",
            interpretation: "–°–∏–º–≤–æ–ª —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞. –í–ø–µ—Ä–µ–¥–∏ —Å–≤–µ—Ç–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞."
        },
        {
            name: "–õ—É–Ω–∞",
            symbol: "üåô",
            interpretation: "–ö–∞—Ä—Ç–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Ç–∞–π–Ω. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É."
        },
        {
            name: "–ú–∞–≥",
            symbol: "üßô",
            interpretation: "–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ —Å–∏–ª–æ–π –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π."
        },
        {
            name: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
            symbol: "üë∏",
            interpretation: "–ü–µ—Ä–∏–æ–¥ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è. –í—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
        },
        {
            name: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
            symbol: "üëë",
            interpretation: "–°–∏–ª–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –í—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é."
        },
        {
            name: "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ",
            symbol: "üíï",
            interpretation: "–í–∞–∂–Ω—ã–π –≤—ã–±–æ—Ä –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ —Å–µ—Ä–¥—Ü–µ."
        },
        {
            name: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
            symbol: "üé°",
            interpretation: "–ü–µ—Ä–µ–º–µ–Ω—ã –Ω–µ–∏–∑–±–µ–∂–Ω—ã. –£–¥–∞—á–∞ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤–∞–º –ª–∏—Ü–æ–º."
        },
        {
            name: "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å",
            symbol: "‚öñÔ∏è",
            interpretation: "–í—Ä–µ–º—è –¥–ª—è —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
        },
        {
            name: "–û—Ç—à–µ–ª—å–Ω–∏–∫",
            symbol: "üïØÔ∏è",
            interpretation: "–ü–µ—Ä–∏–æ–¥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞. –ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑–Ω—É—Ç—Ä–∏."
        }
    ];
}

// üìú –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê
function getHistoryFromStorage() {
    try {
        const history = localStorage.getItem('tarot_history');
        return history ? JSON.parse(history) : [];
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return [];
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ
function saveToHistory(type, data) {
    try {
        const history = getHistoryFromStorage();
        const newItem = {
            id: Date.now(),
            type: type,
            date: new Date().toLocaleDateString('ru-RU'),
            icon: getHistoryIcon(type),
            preview: data.preview || data.question || '–ì–∞–¥–∞–Ω–∏–µ',
            card: data.card,
            interpretation: data.interpretation,
            timestamp: Date.now()
        };
        
        history.unshift(newItem);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 50) {
            history.splice(50);
        }
        
        localStorage.setItem('tarot_history', JSON.stringify(history));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// üé≠ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ö–û–ù–ö–ò –î–õ–Ø –¢–ò–ü–ê –ò–°–¢–û–†–ò–ò
function getHistoryIcon(type) {
    const icons = {
        'daily': 'üåÖ',
        'question': '‚ùì',
        'spread': 'üé¥',
        'followup': 'üîç'
    };
    return icons[type] || 'üîÆ';
}

// üîç –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ö–ê–ó –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
function checkAndShowWelcome() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è...');
    try {
        const hasShownWelcome = localStorage.getItem('tarot_welcome_shown');
        if (!hasShownWelcome && currentUser && currentUser.isAnonymous) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            const welcomeModal = document.getElementById('profile-modal');
            if (welcomeModal) {
                welcomeModal.style.display = 'flex';
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
                setTimeout(() => {
                    welcomeModal.classList.add('show');
                }, 100);
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    }
}

// ================= –ü–†–û–§–ò–õ–¨: –§–£–ù–ö–¶–ò–ò =================

// üìã –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–§–ò–õ–Ø - –ó–ê–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
function closeProfileModal() {
    console.log('üö™ –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
        const profileModal = document.getElementById('profile-modal');
        if (profileModal) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            profileModal.classList.add('hide');
            // –ß–µ—Ä–µ–∑ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            setTimeout(() => {
                profileModal.style.display = 'none';
                profileModal.classList.remove('show', 'hide');
            }, 300);
            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
            localStorage.setItem('tarot_welcome_shown', 'true');
            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–∫—Ä—ã—Ç–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error);
    }
}

// üìã –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ü–†–ê–í–ö–ò –§–û–†–ú–´ –ü–†–û–§–ò–õ–Ø
async function handleProfileSubmit(event) {
    event.preventDefault();
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
        const submitBtn = document.getElementById('save-profile-btn');
        const displayNameInput = document.getElementById('display-name');
        const birthDateInput = document.getElementById('birth-date');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (submitBtn) {
            submitBtn.classList.add('loading');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span>‚è≥</span><span>–°–æ—Ö—Ä–∞–Ω—è–µ–º...</span>';
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const profileData = {
            displayName: displayNameInput ? displayNameInput.value.trim() : '',
            birthDate: birthDateInput ? birthDateInput.value : '',
            createdAt: new Date().toISOString()
        };
        
        console.log('üìù –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileData);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!profileData.displayName) {
            showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return;
        }
        
        if (profileData.displayName.length < 2) {
            showErrorMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
        saveUserData(profileData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (currentUser) {
            currentUser.displayName = profileData.displayName;
            currentUser.birthDate = profileData.birthDate;
            currentUser.isAnonymous = false;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Supabase (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try {
            if (supabase && currentUser && currentUser.id) {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ Supabase...');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
            }
        } catch (supabaseError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Supabase:', supabaseError);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        showMessage(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${profileData.displayName}! üéâ`, 'success');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
            closeProfileModal();
        }, 1000);
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    } finally {
        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = document.getElementById('save-profile-btn');
        if (submitBtn) {
            submitBtn.classList.remove('loading');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<span>‚ú®</span><span>–ù–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ</span>';
        }
    }
}

// üìã –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò "–ü–†–û–ü–£–°–¢–ò–¢–¨"
function handleProfileSkip() {
    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        showMessage('–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 'info');
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeProfileModal();
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–ø—É—â–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// üéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ü–†–û–§–ò–õ–Ø
function setupProfileEventListeners() {
    console.log('üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è...');
    try {
        // –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è
        const profileForm = document.getElementById('profile-form');
        if (profileForm) {
            profileForm.removeEventListener('submit', handleProfileSubmit);
            profileForm.addEventListener('submit', handleProfileSubmit);
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –≥–∞–¥–∞–Ω–∏–µ"
        const saveProfileBtn = document.getElementById('save-profile-btn');
        if (saveProfileBtn) {
            saveProfileBtn.removeEventListener('click', handleProfileClick);
            saveProfileBtn.addEventListener('click', handleProfileClick);
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        const skipProfileBtn = document.getElementById('skip-profile-btn');
        if (skipProfileBtn) {
            skipProfileBtn.removeEventListener('click', handleProfileSkip);
            skipProfileBtn.addEventListener('click', handleProfileSkip);
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        const profileModal = document.getElementById('profile-modal');
        if (profileModal) {
            profileModal.removeEventListener('click', handleModalOverlayClick);
            profileModal.addEventListener('click', handleModalOverlayClick);
        }
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// üñ±Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ö–ù–û–ü–ö–ï –ü–†–û–§–ò–õ–Ø
function handleProfileClick(event) {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ submit —Ñ–æ—Ä–º—ã, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
    if (event.target.type !== 'submit') {
        event.preventDefault();
        handleProfileSubmit(event);
    }
}

// üñ±Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –û–í–ï–†–õ–ï–Æ –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
function handleModalOverlayClick(event) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –∏–º–µ–Ω–Ω–æ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π, –∞ –Ω–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    if (event.target === event.currentTarget) {
        handleProfileSkip();
    }
}

// üîî –ü–û–ö–ê–ó–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï
function showMessage(message, type = 'info') {
    console.log(`üîî –°–æ–æ–±—â–µ–Ω–∏–µ (${type}):`, message);
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageDiv = document.createElement('div');
        messageDiv.className = `app-message app-message-${type}`;
        messageDiv.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: ${type === 'error' ? '#ef4444' : type === 'warning' ? '#f59e0b' : type === 'success' ? '#10b981' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            max-width: 90%;
            text-align: center;
            font-size: 14px;
        `;
        messageDiv.textContent = message;
        
        document.body.appendChild(messageDiv);
        
        // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.parentNode.removeChild(messageDiv);
            }
        }, 3000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// ‚ùå –ü–û–ö–ê–ó–ê–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
function showErrorMessage(message) {
    showMessage(message, 'error');
}

// üíæ –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
function saveUserData(userData) {
    try {
        localStorage.setItem('tarot_user_data', JSON.stringify(userData));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

function loadUserData() {
    try {
        const data = localStorage.getItem('tarot_user_data');
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

function saveAppState() {
    try {
        const stateToSave = {
            questionsLeft: appState.questionsLeft,
            isPremium: appState.isPremium,
            dailyCardUsed: appState.dailyCardUsed,
            lastCardDate: new Date().toDateString(),
            currentTab: appState.currentTab
        };
        localStorage.setItem('tarot_app_state', JSON.stringify(stateToSave));
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function loadAppState() {
    try {
        const data = localStorage.getItem('tarot_app_state');
        if (data) {
            const savedState = JSON.parse(data);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–æ–≤—ã–π –ª–∏ –¥–µ–Ω—å –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è
            const today = new Date().toDateString();
            if (savedState.lastCardDate !== today) {
                savedState.dailyCardUsed = false;
            }
            return savedState;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        return null;
    }
}

// üîß –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
function debugApp() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        appState: appState,
        currentUser: currentUser,
        supabaseInitialized: supabaseInitialized,
        isInitializing: isInitializing,
        configReady: window.isConfigReady ? window.isConfigReady() : false
    });
}

// üåü –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨
window.tarotApp = {
    initApp,
    switchTab,
    appState,
    currentUser,
    updateUI,
    handleDailyCardClick,
    handleAskQuestion,
    showMessage,
    showErrorMessage,
    debugApp,
    saveAppState,
    getRandomCard,
    getFallbackCards,
    saveToHistory,
    loadHistoryData
};

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
let appStarted = false;

document.addEventListener('DOMContentLoaded', function() {
    if (appStarted) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ');
        return;
    }
    
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    appStarted = true;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    setTimeout(() => {
        initApp();
    }, 100);
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ DOM —É–∂–µ –≥–æ—Ç–æ–≤
if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(() => {
        if (!appStarted) {
            console.log('üèÅ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
            appStarted = true;
            initApp();
        }
    }, 50);
}

console.log('‚úÖ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');)
