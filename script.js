function generateSpreadLayout(config) {
    const { positions, layout } = config;
    
    let layoutClass = 'spread-layout-' + layout;
    let cardsHTML = '';
    
    positions.forEach((position, index) => {
        cardsHTML += `
            <div class="spread-position" data-position="${index}">
                <div class="spread-card-slot" id="spread-card-${index}">
                    <div class="card-back">
                        <div class="card-symbol">üîÆ</div>
                        <div class="card-text">?</div>
                    </div>
                </div>
                <div class="position-label"> 17                      <strong>${position.name}</strong>
                    <small>${position.description}</small>
               </div>
              </div>
          `;
      });

     return `<div class="${layoutClass}">${cardsHTML}</div>`;
} // <-- –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è generateSpreadLayout
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let supabase;
let tg;
let currentUser = null;
let questionsLeft = 3;
let dailyCardDrawn = false;
let isPremium = false;
let history = [];
let currentQuestionId = null;
let selectedRating = 0;
let hasLaunched = false; // –ó–∞–º–µ–Ω—è–µ–º localStorage
let userName = '';
let userBirthdate = '';
let localReviews = []; // –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let testPremiumMode = false; // –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º
let currentSpread = null; // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tarot Web App');
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
        if (typeof window.supabase !== 'undefined' && SUPABASE_CONFIG) {
            supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
            console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        initTelegramWebApp();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadCurrentUser();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        initEventListeners();
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–∞–±–∞
        switchTab('daily');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        checkFirstLaunch();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        addTestPremiumButton();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Supabase
        initOfflineMode();
        initEventListeners();
        switchTab('daily');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegramWebApp() {
    if (window.Telegram && window.Telegram.WebApp) {
        tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        const user = tg.initDataUnsafe?.user;
        if (user) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
            currentUser = {
                telegram_id: user.id,
                username: user.username,
                first_name: user.first_name,
                last_name: user.last_name
            };
        }
        
        tg.MainButton.setText('üí≥ –ö—É–ø–∏—Ç—å Premium –∑–∞ 299‚ÇΩ');
        tg.MainButton.onClick(() => {
            if (API_CONFIG && API_CONFIG.paymentUrl) {
                tg.openLink(API_CONFIG.paymentUrl);
            }
        });
        
        tg.setHeaderColor('#1a1a2e');
        tg.setBackgroundColor('#1a1a2e');
        
    } else {
        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ Telegram)');
        currentUser = {
            telegram_id: Math.floor(Math.random() * 1000000) + 12345,
            username: 'test_user',
            first_name: 'Test User'
        };
    }
}

// –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function initOfflineMode() {
    console.log('üîß –ó–∞–ø—É—Å–∫ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
    currentUser = {
        telegram_id: Math.floor(Math.random() * 1000000) + 12345,
        username: 'test_user',
        first_name: 'Test User'
    };
    updateSubscriptionStatus(false);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadCurrentUser() {
    if (!currentUser || !supabase) return;
    
    try {
        const { data: existingUser, error } = await supabase
            .from(TABLES.userProfiles)
            .select('*')
            .eq('telegram_id', currentUser.telegram_id)
            .single();
        
        if (error && error.code !== 'PGRST116') {
            throw error;
        }
        
        if (existingUser) {
            currentUser = { ...currentUser, ...existingUser };
            questionsLeft = existingUser.free_questions_left || 0;
            isPremium = existingUser.is_premium && new Date(existingUser.premium_expires_at) > new Date();
            
            const today = new Date().toISOString().split('T')[0];
            dailyCardDrawn = existingUser.daily_card_drawn_date === today;
            
        } else {
            await createNewUser();
        }
        
        updateSubscriptionStatus(isPremium);
        updateQuestionsDisplay();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createNewUser() {
    try {
        const { data, error } = await supabase
            .from(TABLES.userProfiles)
            .insert([{
                telegram_id: currentUser.telegram_id,
                username: currentUser.username,
                first_name: currentUser.first_name,
                is_premium: false,
                free_questions_left: APP_CONFIG.freeQuestionsLimit
            }])
            .select()
            .single();
        
        if (error) throw error;
        
        currentUser = { ...currentUser, ...data };
        questionsLeft = APP_CONFIG.freeQuestionsLimit;
        isPremium = false;
        
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
function updateSubscriptionStatus(hasPremium) {
    const statusEl = document.getElementById('subscription-status');
    if (!statusEl) return;
    
    isPremium = hasPremium;
    
    if (hasPremium) {
        statusEl.innerHTML = `
            <span class="status-icon">üëë</span>
            <span class="status-text">–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω</span>
        `;
        statusEl.classList.add('premium');
        questionsLeft = 999;
        
        if (tg && tg.MainButton) {
            tg.MainButton.hide();
        }
    } else {
        statusEl.innerHTML = `
            <span class="status-icon">üåë</span>
            <span class="status-text">–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</span>
        `;
        statusEl.classList.remove('premium');
        
        if (tg && tg.MainButton) {
            tg.MainButton.show();
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
function updateQuestionsDisplay() {
    const questionsCountEl = document.getElementById('questions-count');
    if (questionsCountEl) {
        questionsCountEl.textContent = isPremium ? '‚àû' : questionsLeft;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±—ã
    const mainTabs = document.querySelectorAll('.nav-tabs .nav-tab');
    console.log('–ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–æ–≤:', mainTabs.length);

    mainTabs.forEach(tab => {
        const tabName = tab.getAttribute('data-tab');
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–∞:', tabName);

        // –£–î–ê–õ–ò–¢–ï –°–õ–ï–î–£–Æ–©–£–Æ –°–¢–†–û–ö–£:
        // tab.replaceWith(tab.cloneNode(true));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–æ–≤
    document.querySelectorAll('.nav-tabs .nav-tab').forEach(tab => {
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
        // –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É 'once: true' –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏,
        // –µ—Å–ª–∏ initEventListeners –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ initEventListeners –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ,
        // —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
        tab.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();

            const tabName = this.getAttribute('data-tab');
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±:', tabName);

            if (tabName) {
                switchTab(tabName);
            }
        });
    });

    // –í—Ç–æ—Ä–∏—á–Ω—ã–µ —Ç–∞–±—ã
    const secondaryTabs = document.querySelectorAll('.nav-tabs-secondary .nav-tab');
    console.log('–ù–∞–π–¥–µ–Ω–æ –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö —Ç–∞–±–æ–≤:', secondaryTabs.length);

    secondaryTabs.forEach(tab => {
        const tabName = tab.getAttribute('data-tab');
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ç–∞–±–∞:', tabName);

        // –£–î–ê–õ–ò–¢–ï –°–õ–ï–î–£–Æ–©–£–Æ –°–¢–†–û–ö–£:
        // tab.replaceWith(tab.cloneNode(true));
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–∏—á–Ω—ã—Ö —Ç–∞–±–æ–≤
    document.querySelectorAll('.nav-tabs-secondary .nav-tab').forEach(tab => {
        tab.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();

            const tabName = this.getAttribute('data-tab');
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–∞–±:', tabName);

            if (tabName) {
                switchTab(tabName);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', drawDailyCard);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"
    const askBtn = document.getElementById('ask-btn');
    if (askBtn) {
        askBtn.addEventListener('click', askQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ç–æ—á–Ω–∏—Ç—å"
    const followUpBtn = document.getElementById('follow-up-btn');
    if (followUpBtn) {
        followUpBtn.addEventListener('click', askFollowUpQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    const submitReviewBtn = document.getElementById('submit-review-btn');
    if (submitReviewBtn) {
        submitReviewBtn.addEventListener('click', submitReview);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener('click', clearHistory);
    }
    
    // Enter –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const questionInput = document.getElementById('question-input');
    if (questionInput) {
        questionInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                askQuestion();
            }
        });
    }
    
    const followUpInput = document.getElementById('follow-up-input');
    if (followUpInput) {
        followUpInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                askFollowUpQuestion();
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤
    const stars = document.querySelectorAll('.star');
    stars.forEach(star => {
        star.addEventListener('click', function() {
            selectedRating = parseInt(this.dataset.rating);
            updateStarsDisplay();
        });
        
        star.addEventListener('mouseover', function() {
            const rating = parseInt(this.dataset.rating);
            highlightStars(rating);
        });
    });
    
    const starsContainer = document.getElementById('rating-stars');
    if (starsContainer) {
        starsContainer.addEventListener('mouseleave', function() {
            updateStarsDisplay();
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    document.querySelectorAll('.spread-card').forEach(card => {
        card.addEventListener('click', function() {
            const spreadType = this.getAttribute('data-spread');
            if (spreadType) {
                openSpread(spreadType);
            }
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏  
    document.addEventListener('click', function(e) {
        if (e.target.closest('.history-item')) {
            const historyItem = e.target.closest('.history-item');
            const itemId = historyItem.getAttribute('data-id');
            if (itemId) {
                viewHistoryItem(itemId);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö
    const backBtn = document.querySelector('.back-btn');
    if (backBtn) {
        backBtn.addEventListener('click', closeSpread);
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
function switchTab(tab) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±:', tab);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Ç–∞–±–æ–≤
    const allTabContents = document.querySelectorAll('.tab-content');
    allTabContents.forEach(content => {
        content.classList.remove('active');
    });
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    const allTabs = document.querySelectorAll('.nav-tab');
    allTabs.forEach(navTab => {
        navTab.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const targetContent = document.getElementById(tab + '-tab');
    if (targetContent) {
        targetContent.classList.add('active');
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è:', tab);
    } else {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∞–±–∞:', tab);
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
    const targetTab = document.querySelector(`[data-tab="${tab}"]`);
    if (targetTab) {
        targetTab.classList.add('active');
        console.log('‚úÖ –¢–∞–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', tab);
    } else {
        console.error('‚ùå –¢–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω:', tab);
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–æ–≤
    if (tab === 'history') {
        loadHistory();
    } else if (tab === 'reviews') {
        loadReviews(); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    } else if (tab === 'premium') {
        console.log('üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–µ—Ç–∏–ª Premium —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    } else if (tab === 'spreads') { // <-- –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –ó–î–ï–°–¨
        // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–†–∞—Å–∫–ª–∞–¥—ã" –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        // –∏ —Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.
        const spreadsGrid = document.querySelector('.spreads-grid');
        const spreadDetail = document.getElementById('spread-detail');

        if (spreadsGrid) spreadsGrid.style.display = 'grid'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–µ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–Ω–∞
        if (spreadDetail) spreadDetail.style.display = 'none'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å–∫—Ä—ã—Ç

        currentSpread = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—Å–∫–ª–∞–¥
        console.log('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–æ–≤.');
    }
}

// –°–±—Ä–æ—Å –∫–∞—Ä—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
function resetCardToDefault(cardElement) {
    if (!cardElement) return;
    
    // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–ª–∏–ø–∞ –µ—Å–ª–∏ –±—ã–ª–∞
    cardElement.classList.remove('flipped');
    
    // –û—á–∏—â–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –±–ª–µ—Å—Ç–æ–∫
    const sparkles = cardElement.querySelectorAll('.sparkle');
    sparkles.forEach(sparkle => sparkle.remove());
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–∏–¥ –∫–∞—Ä—Ç—ã
    cardElement.innerHTML = `
        <div class="card-back">
            <div class="card-symbol">üîÆ</div>
            <div class="card-text">–í–∞—à –æ—Ç–≤–µ—Ç</div>
        </div>
    `;
}

// –ö–∞—Ä—Ç–∞ –¥–Ω—è
async function drawDailyCard() {
    if (dailyCardDrawn) {
        showNotification('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –≤—ã—Ç—è–Ω—É—Ç–∞ —Å–µ–≥–æ–¥–Ω—è!');
        return;
    }
    
    const card = document.getElementById('daily-card');
    const loading = document.getElementById('daily-loading');
    
    if (!card || !loading) return;
    
    loading.style.display = 'block';
    card.style.pointerEvents = 'none';
    
    addSparkles(card);
    
    try {
        setTimeout(async () => {
            const randomCard = getRandomCard();
            
            card.innerHTML = `
                <div class="card-name">${randomCard.name}</div>
                <img src="${randomCard.image}" alt="${randomCard.name}" class="card-image" onerror="this.style.display='none'">
                <div class="card-symbol">${randomCard.symbol}</div>
                <div class="card-meaning">${randomCard.meaning}</div>
            `;
            
            card.classList.add('flipped');
            loading.style.display = 'none';
            dailyCardDrawn = true;
            
            await saveDailyCardToSupabase(randomCard);
            
            setTimeout(async () => {
                const aiPrediction = await generateAIPredictionToContainer('daily-ai-container', 'daily', randomCard, '');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
                if (history.length > 0) {
                    history[0].aiPrediction = aiPrediction;
                }
                
                setTimeout(() => {
                    const banner = document.getElementById('daily-info-banner');
                    if (banner) {
                        banner.style.display = 'block';
                    }
                }, 2000);
            }, 1000);
            
            addToLocalHistory('daily', '–ö–∞—Ä—Ç–∞ –¥–Ω—è', '', [randomCard]);
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        loading.style.display = 'none';
        card.style.pointerEvents = 'auto';
    }
}

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
function askQuestion() {
    console.log('üéØ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"');
    
    const questionInput = document.getElementById('question-input');
    if (!questionInput) {
        console.error('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const question = questionInput.value.trim();
    console.log('üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    if (!question) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    if (questionsLeft <= 0 && !isPremium) {
        console.log('‚ùå –í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
        checkAndShowSubscriptionBanner();
        return;
    }
    
    console.log('‚úÖ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', question);
    performPrediction(question, false);
}

// –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function askFollowUpQuestion() {
    const followUpInput = document.getElementById('follow-up-input');
    if (!followUpInput) return;
    
    const question = followUpInput.value.trim();
    if (!question) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    if (questionsLeft <= 0 && !isPremium) {
        checkAndShowSubscriptionBanner();
        return;
    }
    
    performPrediction(question, true);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async function performPrediction(question, isFollowUp) {
    console.log('üîÆ –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è:', question, 'isFollowUp:', isFollowUp);
    
    const answerSection = isFollowUp ? 
        document.getElementById('followup-answer-section') : 
        document.getElementById('first-answer-section');
    const answerCard = isFollowUp ? 
        document.getElementById('followup-answer-card') : 
        document.getElementById('answer-card');
    const loading = isFollowUp ? 
        document.getElementById('followup-loading') : 
        document.getElementById('question-loading');
    const askBtn = document.getElementById('ask-btn');
    const followUpBtn = document.getElementById('follow-up-btn');
    
    if (!answerSection || !answerCard || !loading) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    try {
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –≤–∏–¥—É
        resetCardToDefault(answerCard);
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if (!isFollowUp) {
            const firstAiContainer = document.getElementById('first-ai-container');
            if (firstAiContainer) {
                firstAiContainer.innerHTML = '';
            }
        } else {
            const followupAiContainer = document.getElementById('followup-ai-container');
            if (followupAiContainer) {
                followupAiContainer.innerHTML = '';
            }
        }
        
        answerSection.style.display = 'block';
        loading.style.display = 'block';
        if (askBtn) askBtn.disabled = true;
        if (followUpBtn) followUpBtn.disabled = true;
        
        if (!isFollowUp) {
            const followUpSection = document.getElementById('follow-up-section');
            const followupAnswerSection = document.getElementById('followup-answer-section');
            const subscriptionBanner = document.getElementById('subscription-banner-question');
            
            if (followUpSection) followUpSection.style.display = 'none';
            if (followupAnswerSection) followupAnswerSection.style.display = 'none';
            if (subscriptionBanner) subscriptionBanner.style.display = 'none';
            
            // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –æ—Å–Ω–æ–≤–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ
            const followupAiContainer = document.getElementById('followup-ai-container');
            if (followupAiContainer) {
                followupAiContainer.innerHTML = '';
            }
        }
        
        addSparkles(answerCard);
        
        const questionRecord = await saveQuestionToSupabase(question, isFollowUp);
        currentQuestionId = questionRecord?.id;
        
        setTimeout(async () => {
            const randomCard = getRandomCard();
            
            answerCard.innerHTML = `
                <div class="card-name">${randomCard.name}</div>
                <img src="${randomCard.image}" alt="${randomCard.name}" class="card-image" onerror="this.style.display='none'">
                <div class="card-symbol">${randomCard.symbol}</div>
                <div class="card-meaning">${randomCard.meaning}</div>
            `;
            
            loading.style.display = 'none';
            if (askBtn) askBtn.disabled = false;
            if (followUpBtn) followUpBtn.disabled = false;
            
            setTimeout(async () => {
                const aiContainerId = isFollowUp ? 'followup-ai-container' : 'first-ai-container';
                const aiPrediction = await generateAIPredictionToContainer(aiContainerId, 'question', randomCard, question);
                
                if (currentQuestionId) {
                    await saveAnswerToSupabase(currentQuestionId, randomCard, aiPrediction);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
                if (history.length > 0) {
                    history[0].aiPrediction = aiPrediction;
                }
                
                if (!isFollowUp) {
                    setTimeout(() => {
                        const followUpSection = document.getElementById('follow-up-section');
                        if (followUpSection) {
                            followUpSection.style.display = 'block';
                        }
                    }, 1500);
                }
                
                setTimeout(() => {
                    checkAndShowSubscriptionBanner();
                }, 2000);
                
            }, 1000);
            
            if (!isPremium) {
                questionsLeft--;
                await updateUserQuestionsInSupabase();
                updateQuestionsDisplay();
            }
            
            if (isFollowUp) {
                document.getElementById('follow-up-input').value = '';
            } else {
                document.getElementById('question-input').value = '';
            }
            
            addToLocalHistory('question', isFollowUp ? '–£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å' : '–í–æ–ø—Ä–æ—Å', question, [randomCard]);
            
        }, 2500);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ performPrediction:', error);
        if (loading) loading.style.display = 'none';
        if (askBtn) askBtn.disabled = false;
        if (followUpBtn) followUpBtn.disabled = false;
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã
function getRandomCard() {
    return TAROT_CARDS[Math.floor(Math.random() * TAROT_CARDS.length)];
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
async function generateAIPredictionToContainer(containerId, type, card, question = '') {
    const container = document.getElementById(containerId);
    if (!container) return '';
    
    const aiBlock = document.createElement('div');
    aiBlock.className = 'ai-prediction';
    aiBlock.innerHTML = `
        <div class="ai-header">
            <div class="ai-icon">ü§ñ</div>
            <div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div>
        </div>
        <div class="ai-content">
            <div class="generating-text">–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...</div>
        </div>
    `;
    
    container.appendChild(aiBlock);
    
    try {
        const prediction = generatePredictionText(type, card, question);
        
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            typeWriter(aiContent, prediction, 30);
        }, 2000);
        
        return prediction;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
        const prediction = generatePredictionText(type, card, question);
        
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            typeWriter(aiContent, prediction, 50);
        }, 2000);
        
        return prediction;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Ñ–æ–ª–ª–±—ç–∫)
function generatePredictionText(type, card, question) {
    const predictions = {
        daily: [
            `–°–µ–≥–æ–¥–Ω—è –∫–∞—Ä—Ç–∞ "${card.name}" –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å. ${card.meaning.toLowerCase()} –ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.`,
            `–≠–Ω–µ—Ä–≥–∏—è –∫–∞—Ä—Ç—ã "${card.name}" –æ–∫—Ä—É–∂–∞–µ—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –º–æ—â–Ω–æ–π –∞—É—Ä–æ–π. ${card.meaning.toLowerCase()} –≠—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–∂–Ω—ã–µ –æ–∑–∞—Ä–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–π —Å—Ñ–µ—Ä–µ.`,
            `"${card.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. ${card.meaning.toLowerCase()} –ü–ª–∞–Ω–µ—Ç—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –∫ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –≤ –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è.`
        ],
        question: [
            `–û—Ç–≤–µ—á–∞—è –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}", –∫–∞—Ä—Ç–∞ "${card.name}" –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª—É–±–æ–∫—É—é –∏—Å—Ç–∏–Ω—É. ${card.meaning.toLowerCase()} –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–ª—é—á –∫ —Ä–µ—à–µ–Ω–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö.`,
            `–í–∞—à –≤–æ–ø—Ä–æ—Å "${question}" —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç —Å —ç–Ω–µ—Ä–≥–∏–µ–π –∫–∞—Ä—Ç—ã "${card.name}". ${card.meaning.toLowerCase()} –î—É—Ö–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ —Å–æ–≤–µ—Ç—É—é—Ç –ø—Ä–æ—è–≤–∏—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3-7 –¥–Ω–µ–π.`,
            `–ö–∞—Ä—Ç–∞ "${card.name}" –¥–∞–µ—Ç —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ "${question}": ${card.meaning.toLowerCase()} –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–∞–Ω–µ—Ç –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Ç—É—â–µ–π –ª—É–Ω—ã.`
        ]
    };
    
    const typeArray = predictions[type] || predictions.daily;
    return typeArray[Math.floor(Math.random() * typeArray.length)];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–∫–∞–∑ –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
function checkAndShowSubscriptionBanner() {
    if (!isPremium && questionsLeft <= 0) {
        const banner = document.getElementById('subscription-banner-question');
        if (banner) {
            banner.style.display = 'block';
            setTimeout(() => {
                banner.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 300);
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
function checkFirstLaunch() {
    if (!hasLaunched) {
        showWelcomeModal();
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showWelcomeModal() {
    const modal = document.createElement('div');
    modal.className = 'welcome-modal';
    modal.innerHTML = `
        <div class="welcome-modal-content">
            <div class="welcome-header">
                <h2>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–µ–ø–æ—Ç –∫–∞—Ä—Ç ‚ú®</h2>
                <p>–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</p>
            </div>
            <div class="welcome-form">
                <div class="form-group">
                    <label for="user-name">üë§ –í–∞—à–µ –∏–º—è:</label>
                    <input type="text" id="user-name" class="welcome-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è">
                </div>
                <div class="form-group">
                    <label for="user-birthdate">üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</label>
                    <input type="date" id="user-birthdate" class="welcome-input">
                </div>
                <div class="form-group privacy-note">
                    <p>üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π</p>
                </div>
            </div>
            <div class="welcome-footer">
                <button class="btn btn-secondary" onclick="skipWelcome()">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                <button class="btn" onclick="saveWelcomeData()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
function saveWelcomeData() {
    const nameInput = document.getElementById('user-name');
    const birthdateInput = document.getElementById('user-birthdate');
    
    const inputName = nameInput ? nameInput.value.trim() : '';
    const inputBirthdate = birthdateInput ? birthdateInput.value : '';
    
    if (inputName) {
        userName = inputName;
        if (currentUser) {
            currentUser.display_name = inputName;
        }
    }
    
    if (inputBirthdate) {
        userBirthdate = inputBirthdate;
        if (currentUser) {
            currentUser.birthdate = inputBirthdate;
        }
    }
    
    hasLaunched = true;
    closeWelcomeModal();
    
    if (inputName) {
        showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${inputName}! –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ú®`);
    }
}

// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
function skipWelcome() {
    hasLaunched = true;
    closeWelcomeModal();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeWelcomeModal() {
    const modal = document.querySelector('.welcome-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showNotification(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

function typeWriter(element, text, speed = 50) {
    if (!element) return;
    element.innerHTML = '';
    let i = 0;
    
    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

function addSparkles(element) {
    if (!element) return;
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            const sparkle = document.createElement('div');
            sparkle.className = 'sparkle';
            sparkle.textContent = '‚ú®';
            sparkle.style.left = Math.random() * 100 + '%';
            sparkle.style.top = Math.random() * 100 + '%';
            element.appendChild(sparkle);
            
            setTimeout(() => {
                sparkle.remove();
            }, 2000);
        }, i * 200);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
function addToLocalHistory(type, title, question, cards, aiPrediction = '') {
    const now = new Date();
    const historyItem = {
        id: Date.now(),
        date: now.toLocaleDateString('ru-RU'),
        time: now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        timestamp: now.getTime(),
        type: type,
        title: title,
        question: question,
        cards: cards,
        aiPrediction: aiPrediction // –î–æ–±–∞–≤–ª—è–µ–º –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    };
    
    history.unshift(historyItem);
    
    const oneMonthAgo = now.getTime() - (30 * 24 * 60 * 60 * 1000);
    history = history.filter(item => item.timestamp > oneMonthAgo);
    
    if (history.length > 100) {
        history = history.slice(0, 100);
    }
    
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é:', historyItem);
}

// –§—É–Ω–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
async function loadHistory() {
    renderHistory();
}

function renderHistory() {
    const historyList = document.getElementById('history-list');
    if (!historyList) return;
    
    if (history.length === 0) {
        historyList.innerHTML = `
            <div class="empty-history">
                <div class="empty-icon">üîÆ</div>
                <p>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç–∞.<br>–ù–∞—á–Ω–∏—Ç–µ —Å –∫–∞—Ä—Ç—ã –¥–Ω—è –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!</p>
            </div>
        `;
        return;
    }
    
    const groupedHistory = {};
    history.forEach(item => {
        if (!groupedHistory[item.date]) {
            groupedHistory[item.date] = [];
        }
        groupedHistory[item.date].push(item);
    });
    
    let historyHTML = '';
    Object.keys(groupedHistory).forEach(date => {
        historyHTML += `<div class="history-date-group">
            <div class="history-date-header">${date}</div>`;
        
        groupedHistory[date].forEach(item => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            const typeIcon = item.type === 'daily' ? 'üåÖ' : '‚ùì';
            const typeColor = item.type === 'daily' ? '#ffd700' : '#667eea';
            
            historyHTML += `
                <div class="history-item" data-id="${item.id}" style="border-left-color: ${typeColor}">
                    <div class="history-header">
                        <div class="history-type">
                            <span class="history-icon">${typeIcon}</span>
                            ${item.title}
                        </div>
                        <div class="history-time">${item.time}</div>
                    </div>
                    ${item.question ? `<div class="history-question">"${item.question}"</div>` : ''}
                    <div class="history-cards">
                        ${item.cards.map(card => `
                            <div class="history-mini-card">${card.symbol} ${card.name}</div>
                        `).join('')}
                    </div>
                    <div class="history-actions">
                        <button class="history-btn" onclick="viewHistoryDetail('${item.id}')">
                            üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        ${item.aiPrediction ? `
                            <button class="history-btn" onclick="sendToTelegram('${item.id}')">
                                üì§ –í Telegram
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
        });
        
        historyHTML += '</div>';
    });
    
    historyList.innerHTML = historyHTML;
}

// –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
function viewHistoryDetail(id) {
    const item = history.find(h => h.id == id);
    if (!item) return;
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'history-modal';
    modal.innerHTML = `
        <div class="history-modal-content">
            <div class="history-modal-header">
                <h3>${item.type === 'daily' ? 'üåÖ' : '‚ùì'} ${item.title}</h3>
                <button class="history-modal-close" onclick="closeHistoryModal()">&times;</button>
            </div>
            <div class="history-modal-body">
                <div class="history-detail-date">üìÖ ${item.date} –≤ ${item.time}</div>
                
                ${item.question ? `
                    <div class="history-detail-question">
                        <strong>‚ùì –í–æ–ø—Ä–æ—Å:</strong>
                        <p>"${item.question}"</p>
                    </div>
                ` : ''}
                
                 <div class="history-detail-cards">
        <strong>üÉè –ö–∞—Ä—Ç—ã:</strong>
        ${item.cards.map(cardItem => ` // <--- –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å cardItem - —ç—Ç–æ –æ–±—ä–µ–∫—Ç { card, positionName, ... }
            <div class="history-detail-card">
                <div class="card-header">
                    <span class="card-symbol-large">${cardItem.card.symbol}</span> // <--- –î–û–°–¢–£–ü –ö –î–ê–ù–ù–´–ú –ö–ê–†–¢–´ –ß–ï–†–ï–ó .card
                    <span class="card-name-large">${cardItem.card.name}</span>
                </div>
                ${cardItem.positionName ? `<div class="card-position-name">${cardItem.positionName}:</div>` : ''} // <--- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                <div class="card-meaning-detail">${cardItem.card.meaning}</div>
            </div>
        `).join('')}
    </div>
                
                ${item.aiPrediction ? `
                    <div class="history-detail-prediction">
                        <strong>ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</strong>
                        <p>${item.aiPrediction}</p>
                    </div>
                ` : ''}
            </div>
            <div class="history-modal-footer">
                <button class="btn btn-secondary" onclick="closeHistoryModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
                ${item.aiPrediction ? `
                    <button class="btn" onclick="sendToTelegram('${item.id}')">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram</button>
                ` : ''}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
function closeHistoryModal() {
    const modal = document.querySelector('.history-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
function sendToTelegram(id) {
    const item = history.find(h => h.id == id);
    if (!item) return;
    
    let message = `üîÆ ${item.title}\n`;
    message += `üìÖ ${item.date} –≤ ${item.time}\n\n`;
    
    if (item.question) {
        message += `‚ùì –í–æ–ø—Ä–æ—Å: "${item.question}"\n\n`;
    }
    
    message += `üÉè –ö–∞—Ä—Ç—ã:\n`;
    item.cards.forEach(card => {
        message += `${card.symbol} ${card.name}\n${card.meaning}\n\n`;
    });
    
    if (item.aiPrediction) {
        message += `ü§ñ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:\n${item.aiPrediction}`;
    }
    
    if (tg && tg.showAlert) {
        // –í Telegram Web App –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
        tg.sendData(JSON.stringify({
            type: 'history_share',
            data: item
        }));
        tg.showAlert('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–∞!');
    } else {
        // –§–æ–ª–ª–±—ç–∫ - –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(message).then(() => {
            showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }).catch(() => {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        });
    }
}

function viewHistoryItem(id) {
    // –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é
    viewHistoryDetail(id);
}

function clearHistory() {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?')) {
        history = [];
        renderHistory();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
async function loadReviews() {
    console.log('üìù –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤');
    renderReviews();
}

function renderReviews() {
    const reviewsList = document.getElementById('reviews-list');
    if (!reviewsList) return;
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∑—ã–≤—ã + –ª–æ–∫–∞–ª—å–Ω—ã–µ
    const staticReviews = [
        {
            id: 1,
            author: '@maria_k',
            rating: 5,
            text: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è! –ö–∞—Ä—Ç–∞ –¥–Ω—è –≤—Å–µ–≥–¥–∞ –≤ —Ç–æ—á–∫—É –ø–æ–ø–∞–¥–∞–µ—Ç. –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ.',
            date: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
            isAnonymous: false
        },
        {
            id: 2,
            author: '–ê–Ω–æ–Ω–∏–º–Ω–æ',
            rating: 5,
            text: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–≥! –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã - —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ.',
            date: '5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥',
            isAnonymous: true
        },
        {
            id: 3,
            author: '@alexey_777',
            rating: 4,
            text: '–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–∞–¥–∞–Ω–∏—è. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫—Ä–∞—Å–∏–≤—ã–π, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ.',
            date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥',
            isAnonymous: false
        }
    ];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    const allReviews = [...localReviews, ...staticReviews];
    
    let reviewsHTML = '';
    
    allReviews.forEach(review => {
        const stars = '‚òÖ'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
        const isLongText = review.text.length > 150;
        const shortText = isLongText ? review.text.substring(0, 150) + '...' : review.text;
        
        reviewsHTML += `
            <div class="review-item">
                <div class="review-header">
                    <div class="review-author">${review.author}</div>
                    <div class="review-rating">${stars}</div>
                    <div class="review-date">${review.date}</div>
                </div>
                <div class="review-text" id="review-text-${review.id}">
                    <span class="review-short"${isLongText ? '' : ' style="display: none;"'}>${shortText}</span>
                    <span class="review-full"${isLongText ? ' style="display: none;"' : ''}>${review.text}</span>
                    ${isLongText ? `
                        <button class="review-expand-btn" onclick="toggleReviewText(${review.id})">
                            <span class="expand-text">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</span>
                            <span class="collapse-text" style="display: none;">–°–≤–µ—Ä–Ω—É—Ç—å</span>
                        </button>
                    ` : ''}
                </div>
            </div>
        `;
    });
    
    reviewsList.innerHTML = reviewsHTML;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateReviewsStats(allReviews);
}

function updateReviewsStats(reviews) {
    const totalReviews = reviews.length;
    const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / totalReviews;
    
    const reviewsTotalEl = document.getElementById('reviews-total');
    const ratingDisplay = document.querySelector('.rating');
    
    if (reviewsTotalEl) {
        reviewsTotalEl.textContent = totalReviews;
    }
    
    if (ratingDisplay) {
        const stars = '‚òÖ'.repeat(Math.round(averageRating)) + '‚òÜ'.repeat(5 - Math.round(averageRating));
        ratingDisplay.textContent = `${averageRating.toFixed(1)} ${stars}`;
    }
}

function toggleReviewText(reviewId) {
    const reviewTextEl = document.getElementById(`review-text-${reviewId}`);
    if (!reviewTextEl) return;
    
    const shortSpan = reviewTextEl.querySelector('.review-short');
    const fullSpan = reviewTextEl.querySelector('.review-full');
    const expandBtn = reviewTextEl.querySelector('.review-expand-btn');
    const expandText = expandBtn.querySelector('.expand-text');
    const collapseText = expandBtn.querySelector('.collapse-text');
    
    const isExpanded = fullSpan.style.display !== 'none';
    
    if (isExpanded) {
        // –°–≤–µ—Ä–Ω—É—Ç—å
        shortSpan.style.display = 'inline';
        fullSpan.style.display = 'none';
        expandText.style.display = 'inline';
        collapseText.style.display = 'none';
    } else {
        // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
        shortSpan.style.display = 'none';
        fullSpan.style.display = 'inline';
        expandText.style.display = 'none';
        collapseText.style.display = 'inline';
    }
}

async function submitReview() {
    const reviewText = document.getElementById('review-text');
    const anonymousCheckbox = document.getElementById('anonymous-review');
    
    if (!selectedRating) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É');
        return;
    }
    
    if (!reviewText) {
        showNotification('–ü–æ–ª–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    const text = reviewText.value.trim();
    if (!text) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞');
        return;
    }
    
    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        const isAnonymous = anonymousCheckbox ? anonymousCheckbox.checked : false;
        const authorName = isAnonymous ? '–ê–Ω–æ–Ω–∏–º–Ω–æ' : (userName || '@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        
        const newReview = {
            id: Date.now(),
            author: authorName,
            rating: selectedRating,
            text: text,
            date: '—Ç–æ–ª—å–∫–æ —á—Ç–æ',
            isAnonymous: isAnonymous,
            timestamp: Date.now()
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        localReviews.unshift(newReview);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const submitBtn = document.getElementById('submit-review-btn');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...';
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
            showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ ‚ú®');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            reviewText.value = '';
            selectedRating = 0;
            updateStarsDisplay();
            if (anonymousCheckbox) anonymousCheckbox.checked = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
            renderReviews();
            
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
            }
            
            // –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É –æ—Ç–∑—ã–≤—É
            setTimeout(() => {
                const reviewsList = document.getElementById('reviews-list');
                if (reviewsList) {
                    reviewsList.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            }, 300);
            
        }, 1500);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
        
        const submitBtn = document.getElementById('submit-review-btn');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
        }
    }
}

function updateStarsDisplay() {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
        if (index < selectedRating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}

function highlightStars(rating) {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.style.color = '#ffd700';
        } else {
            star.style.color = '#444';
        }
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
function openSpread(spreadType) {
    console.log('üÉè –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å (–≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    const hasAccess = isPremium || testPremiumMode;
    
    if (!hasAccess) {
        checkAndShowSubscriptionBanner();
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadConfig = getSpreadConfig(spreadType);
    if (!spreadConfig) {
        showNotification('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞');
        return;
    }
    
    currentSpread = {
        type: spreadType,
        config: spreadConfig,
        cards: [],
        question: ''
    };
    
    showSpreadModal(spreadConfig);
}

function getSpreadConfig(spreadType) {
    const configs = {
        love: {
            name: "üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            description: "–†–∞—Å–∫–ª–∞–¥ —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ —Å–µ—Ä–¥—Ü–∞",
            positions: [
                { name: "–í—ã", description: "–í–∞—à–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö" },
                { name: "–ü–∞—Ä—Ç–Ω–µ—Ä", description: "–ß—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞" },
                { name: "–û—Ç–Ω–æ—à–µ–Ω–∏—è", description: "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π" }
            ],
            layout: "horizontal"
        },
        career: {
            name: "üíº –ö–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", 
            description: "–ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —É—Å–ø–µ—Ö—É",
            positions: [
                { name: "–¢–µ–∫—É—â–µ–µ", description: "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" },
                { name: "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", description: "–ß—Ç–æ –º–µ—à–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç–∏—é" },
                { name: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", description: "–°–∫—Ä—ã—Ç—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã" },
                { name: "–°–æ–≤–µ—Ç", description: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç" }
            ],
            layout: "cross"
        },
        week: {
            name: "üìÖ –ù–µ–¥–µ–ª—è –≤–ø–µ—Ä–µ–¥–∏",
            description: "–ß—Ç–æ –≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
            positions: [
                { name: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", description: "–ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏" },
                { name: "–í—Ç–æ—Ä–Ω–∏–∫", description: "–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π" },
                { name: "–°—Ä–µ–¥–∞", description: "–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏" },
                { name: "–ß–µ—Ç–≤–µ—Ä–≥", description: "–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è" },
                { name: "–ü—è—Ç–Ω–∏—Ü–∞", description: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ª" },
                { name: "–°—É–±–±–æ—Ç–∞", description: "–û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ" },
                { name: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É" }
            ],
            layout: "week"
        },
        celtic: {
            name: "üçÄ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
            description: "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏",
            positions: [
                { name: "–°–∏—Ç—É–∞—Ü–∏—è", description: "–°—É—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è" },
                { name: "–í—ã–∑–æ–≤", description: "–ì–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è" },
                { name: "–ü—Ä–æ—à–ª–æ–µ", description: "–ö–æ—Ä–Ω–∏ —Å–∏—Ç—É–∞—Ü–∏–∏" },
                { name: "–ë—É–¥—É—â–µ–µ", description: "–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" },
                { name: "–¶–µ–ª—å", description: "–ö —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è" },
                { name: "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ", description: "–°–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã" },
                { name: "–í–∞—à –ø–æ–¥—Ö–æ–¥", description: "–ö–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ" },
                { name: "–û–∫—Ä—É–∂–µ–Ω–∏–µ", description: "–í–ª–∏—è–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π" },
                { name: "–°—Ç—Ä–∞—Ö–∏", description: "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç" },
                { name: "–ò—Ç–æ–≥", description: "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" }
            ],
            layout: "celtic"
        }
    };
    
    return configs[spreadType];
}

function showSpreadModal(config) {
    const modal = document.createElement('div');
    modal.className = 'spread-modal';
    modal.innerHTML = `
        <div class="spread-modal-content">
            <div class="spread-modal-header">
                <h3>${config.name}</h3>
                <button class="spread-modal-close" onclick="closeSpreadModal()">&times;</button>
            </div>
            <div class="spread-modal-body">
                <div class="spread-description">
                    <p>${config.description}</p>
                    <p><strong>–ü–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç:</strong> ${config.positions.length}</p>
                </div>
                
                <div class="spread-question-section">
                    <label for="spread-question">üí≠ –í–∞—à –≤–æ–ø—Ä–æ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
                    <textarea 
                        id="spread-question" 
                        class="spread-question-input" 
                        placeholder="–û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å? –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ..."
                        maxlength="300"
                    ></textarea>
                </div>
                
                <div class="spread-positions-preview">
                    <h4>üìç –ü–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:</h4>
                    <div class="positions-list">
                        ${config.positions.map((pos, index) => `
                            <div class="position-preview">
                                <span class="position-number">${index + 1}</span>
                                <div class="position-info">
                                    <strong>${pos.name}</strong>
                                    <small>${pos.description}</small>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            <div class="spread-modal-footer">
                <button class="btn btn-secondary" onclick="closeSpreadModal()">–û—Ç–º–µ–Ω–∞</button>
                <button class="btn spread-start-btn" onclick="startSpread()">
                    ‚ú® –ù–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

function startSpread() {
    const questionInput = document.getElementById('spread-question');
    const question = questionInput ? questionInput.value.trim() : '';
    
    if (currentSpread) {
        currentSpread.question = question;
    }
    
    closeSpreadModal();
    
    setTimeout(() => {
        showSpreadInterface();
    }, 300);
}

function showSpreadInterface() {
    if (!currentSpread) return;
    
    const { config } = currentSpread;
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadsGrid = document.querySelector('.spreads-grid');
    const spreadDetail = document.getElementById('spread-detail');
    
    if (spreadsGrid) spreadsGrid.style.display = 'none';
    if (spreadDetail) {
        spreadDetail.style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const spreadTitle = document.getElementById('spread-title');
        const spreadCardsContainer = document.getElementById('spread-cards-container');
        const drawSpreadBtn = document.getElementById('draw-spread-btn');
        
        if (spreadTitle) {
            spreadTitle.innerHTML = `
                ${config.name}
                ${currentSpread.question ? `<div class="spread-question-display">‚ùì ${currentSpread.question}</div>` : ''}
            `;
        }
        
        if (spreadCardsContainer) {
            spreadCardsContainer.innerHTML = generateSpreadLayout(config);
        }
        
        if (drawSpreadBtn) {
            drawSpreadBtn.textContent = `üÉè –í—ã—Ç—è–Ω—É—Ç—å ${config.positions.length} –∫–∞—Ä—Ç`;
            drawSpreadBtn.style.display = 'block';
            drawSpreadBtn.disabled = false; // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            
            // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            drawSpreadBtn.onclick = drawSpread;
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–µ—Ç
        const backBtn = spreadDetail.querySelector('.back-btn');
        if (backBtn) {
            backBtn.onclick = closeSpread;
        }
    }
}

function generateSpreadLayout(config) {
    const { positions, layout } = config;
    
    let layoutClass = 'spread-layout-' + layout;
    let cardsHTML = '';
    
    positions.forEach((position, index) => {
        cardsHTML += `
            <div class="spread-position" data-position="${index}">
                <div class="spread-card-slot" id="spread-card-${index}">
                    <div class="card-back">
                        <div class="card-symbol">üîÆ</div>
                        <div class="card-text">?</div>
                    </div>
                </div>
                <div class="position-label">
                    <strong>${position.name}</strong>
                    <small>${position.description}</small>
                </div>
            </div>
        `;
    });
    
    return `<div class="${layoutClass}">${cardsHTML}</div>`;
}

async function drawSpread() {
    console.log('üÉè –ù–∞—á–∏–Ω–∞–µ–º drawSpread, currentSpread:', currentSpread);
    
    if (!currentSpread) {
        console.error('‚ùå currentSpread is null');
        showNotification('–û—à–∏–±–∫–∞: —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }
    
    const { config } = currentSpread;
    const drawBtn = document.getElementById('draw-spread-btn');
    const loading = document.getElementById('spread-loading');
    
    console.log('üéØ –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', { drawBtn: !!drawBtn, loading: !!loading });
    
    try {
        if (drawBtn) {
            drawBtn.style.display = 'none';
            drawBtn.disabled = true;
        }
        
        if (loading) {
            loading.style.display = 'block';
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
        const spreadCards = [];
        const usedCards = new Set();
        
        console.log('üÉè –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è', config.positions.length, '–ø–æ–∑–∏—Ü–∏–π');
        
        for (let i = 0; i < config.positions.length; i++) {
            let randomCard;
            let attempts = 0;
            do {
                randomCard = getRandomCard();
                attempts++;
                if (attempts > 100) {
                    console.error('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç');
                    break;
                }
            } while (usedCards.has(randomCard.name) && attempts <= 100);
            
            usedCards.add(randomCard.name);
            spreadCards.push(randomCard);
        }
        
        currentSpread.cards = spreadCards;
        currentSpread.interpretations = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
        console.log('‚úÖ –ö–∞—Ä—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', spreadCards.length);
        
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < spreadCards.length; i++) {
            console.log(`üé¥ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É ${i + 1}/${spreadCards.length}`);
            
            await new Promise(resolve => {
                setTimeout(async () => {
                    try {
                        await revealSpreadCard(i, spreadCards[i], config.positions[i]);
                        resolve();
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞—Ä—Ç—ã ${i}:`, error);
                        resolve();
                    }
                }, i * 800);
            });
        }
        
        if (loading) {
            loading.style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
        showInterpretationsButton();
        
        console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é');

         // --- –ù–û–í–û–ï: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ ---
        const historyCards = currentSpread.cards.map((card, index) => {
        const position = currentSpread.config.positions[index];
        return {
            card: card, // –°–∞–º–∞ –∫–∞—Ä—Ç–∞
            positionName: position.name, // –ò–º—è –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä., "–í—ã")
            positionDescription: position.description // –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        };
    });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    setTimeout(() => {
        // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º historyCards –≤–º–µ—Å—Ç–æ spreadCards
        addToLocalHistory('spread', config.name, currentSpread.question || '', historyCards, currentSpread.interpretations);
    }, 1000);

}

// –ò–ó–ú–ï–ù–ï–ù–ò–ï –í –§–£–ù–ö–¶–ò–ò addToLocalHistory:
// –¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å 'cards' –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤,
// –≥–¥–µ –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 'card' –∏ 'positionName'/'positionDescription'.
function addToLocalHistory(type, title, question, cardsWithPositions, aiPrediction = '') {
    const now = new Date();
    const historyItem = {
        id: Date.now(),
        date: now.toLocaleDateString('ru-RU'),
        time: now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        timestamp: now.getTime(),
        type: type,
        title: title,
        question: question,
        cards: cardsWithPositions, // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { card, positionName, positionDescription }
        aiPrediction: aiPrediction
    };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ drawSpread:', error);
        
        if (loading) {
            loading.style.display = 'none';
        }
        
        if (drawBtn) {
            drawBtn.style.display = 'block';
            drawBtn.disabled = false;
        }
        
        showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

function showInterpretationsButton() {
    const spreadDetail = document.getElementById('spread-detail');
    if (!spreadDetail) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldBtn = spreadDetail.querySelector('.show-interpretations-btn');
    if (oldBtn) oldBtn.remove();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
    const button = document.createElement('button');
    button.className = 'show-interpretations-btn';
    button.textContent = 'üîÆ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç';
    button.onclick = showInterpretationsModal;
    
    spreadDetail.appendChild(button);
}

function showInterpretationsModal() {
    if (!currentSpread || !currentSpread.interpretations) return;
    
    const modal = document.createElement('div');
    modal.className = 'interpretations-modal';
    
    let interpretationsHTML = '';
    currentSpread.interpretations.forEach((interpretation, index) => {
        const card = currentSpread.cards[index];
        const position = currentSpread.config.positions[index];
        
        interpretationsHTML += `
            <div class="interpretation-item">
                <div class="interpretation-card-info">
                    <div class="interpretation-card-symbol">${card.symbol}</div>
                    <div class="interpretation-card-details">
                        <h4>${card.name}</h4>
                        <p class="position-name">${position.name} - ${position.description}</p>
                    </div>
                </div>
                <div class="interpretation-text">${interpretation}</div>
            </div>
        `;
    });
    
    modal.innerHTML = `
        <div class="interpretations-modal-content">
            <div class="interpretations-modal-header">
                <h3>üîÆ –¢–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞</h3>
                <button class="interpretations-modal-close" onclick="closeInterpretationsModal()">&times;</button>
            </div>
            <div class="interpretations-modal-body">
                ${currentSpread.question ? `
                    <div class="spread-question-display" style="margin-bottom: 20px;">
                        <strong>‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:</strong> ${currentSpread.question}
                    </div>
                ` : ''}
                ${interpretationsHTML}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

function closeInterpretationsModal() {
    const modal = document.querySelector('.interpretations-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

async function revealSpreadCard(index, card, position) {
    console.log(`üé¥ revealSpreadCard: ${index}, –∫–∞—Ä—Ç–∞: ${card.name}`);
    
    const cardSlot = document.getElementById(`spread-card-${index}`);
    if (!cardSlot) {
        console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç spread-card-${index}`);
        return;
    }
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–µ—Å—Ç–∫–∏
        addSparkles(cardSlot);
        
        await new Promise(resolve => {
            setTimeout(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
                cardSlot.innerHTML = `
                    <div class="card-name">${card.name}</div>
                    <img src="${card.image}" alt="${card.name}" class="card-image" onerror="this.style.display='none'">
                    <div class="card-symbol">${card.symbol}</div>
                    <div class="card-meaning">${card.meaning}</div>
                `;
                
                cardSlot.classList.add('flipped');
                console.log(`‚úÖ –ö–∞—Ä—Ç–∞ ${index} –ø–æ–∫–∞–∑–∞–Ω–∞`);
                resolve();
            }, 1000);
        });
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
        const interpretation = generatePositionInterpretation(card, position, currentSpread.question);
        currentSpread.interpretations[index] = interpretation;
        
        console.log(`‚úÖ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ ${index} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ revealSpreadCard ${index}:`, error);
    }
}

function generatePositionInterpretation(card, position, question) {
    const templates = [
        `–í –ø–æ–∑–∏—Ü–∏–∏ "${position.name}" –∫–∞—Ä—Ç–∞ "${card.name}" —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ ${card.meaning.toLowerCase()} –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ${position.description.toLowerCase()}.`,
        `"${card.name}" –≤ –ø–æ–∑–∏—Ü–∏–∏ "${position.name}" –≥–æ–≤–æ—Ä–∏—Ç: ${card.meaning.toLowerCase()} –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ ${position.description.toLowerCase()}.`,
        `–ü–æ–∑–∏—Ü–∏—è "${position.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É "${card.name}": ${card.meaning.toLowerCase()} –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –∞—Å–ø–µ–∫—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è ${position.description.toLowerCase()}.`
    ];
    
    let interpretation = templates[Math.floor(Math.random() * templates.length)];
    
    if (question) {
        interpretation += ` –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ "${question}" —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞–∂–Ω—ã–π —à–∞–≥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏.`;
    }
    
    return interpretation;
}

function closeSpread() {
    const spreadsGrid = document.querySelector('.spreads-grid');
    const spreadDetail = document.getElementById('spread-detail');
    
    if (spreadsGrid) spreadsGrid.style.display = 'grid';
    if (spreadDetail) spreadDetail.style.display = 'none';
    
    currentSpread = null;
}

function closeSpreadModal() {
    const modal = document.querySelector('.spread-modal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–º–∏—É–º —Ä–µ–∂–∏–º–∞
function addTestPremiumButton() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const header = document.querySelector('.header');
    if (header && !document.getElementById('test-premium-btn')) {
        const testBtn = document.createElement('button');
        testBtn.id = 'test-premium-btn';
        testBtn.className = 'test-premium-btn';
        testBtn.textContent = testPremiumMode ? 'üëë –¢–µ—Å—Ç Premium ON' : 'üÜì –¢–µ—Å—Ç Premium OFF';
        testBtn.onclick = toggleTestPremium;
        header.appendChild(testBtn);
    }
}

function toggleTestPremium() {
    testPremiumMode = !testPremiumMode;
    const btn = document.getElementById('test-premium-btn');
    if (btn) {
        btn.textContent = testPremiumMode ? 'üëë –¢–µ—Å—Ç Premium ON' : 'üÜì –¢–µ—Å—Ç Premium OFF';
        btn.style.background = testPremiumMode ? 
            'linear-gradient(45deg, #ffd700, #ffed4a)' : 
            'rgba(255, 255, 255, 0.1)';
        btn.style.color = testPremiumMode ? '#1a1a2e' : '#fff';
    }
    
    showNotification(testPremiumMode ? 
        '–¢–µ—Å—Ç–æ–≤—ã–π Premium —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω! üëë' : 
        '–¢–µ—Å—Ç–æ–≤—ã–π Premium —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω üÜì'
    );
}

// –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è Supabase
async function saveDailyCardToSupabase(card) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:', card.name);
    if (!supabase || !currentUser) return null;
    
    try {
        const { data, error } = await supabase
            .from(TABLES.dailyCards)
            .insert([{
                user_id: currentUser.telegram_id,
                card_name: card.name,
                card_symbol: card.symbol,
                card_meaning: card.meaning,
                drawn_date: new Date().toISOString().split('T')[0]
            }]);
        
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return null;
    }
}

async function saveQuestionToSupabase(question, isFollowUp) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:', question);
    if (!supabase || !currentUser) return { id: Date.now() };
    
    try {
        const { data, error } = await supabase
            .from(TABLES.questions)
            .insert([{
                user_id: currentUser.telegram_id,
                question_text: question,
                is_follow_up: isFollowUp,
                created_at: new Date().toISOString()
            }])
            .select()
            .single();
        
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return { id: Date.now() };
    }
}

async function saveAnswerToSupabase(questionId, card, aiPrediction) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
    if (!supabase || !currentUser) return null;
    
    try {
        const { data, error } = await supabase
            .from(TABLES.answers)
            .insert([{
                question_id: questionId,
                user_id: currentUser.telegram_id,
                card_name: card.name,
                card_symbol: card.symbol,
                card_meaning: card.meaning,
                ai_prediction: aiPrediction,
                created_at: new Date().toISOString()
            }]);
        
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return null;
    }
}

async function updateUserQuestionsInSupabase() {
    console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsLeft);
    if (!supabase || !currentUser) return;
    
    try {
        const { error } = await supabase
            .from(TABLES.userProfiles)
            .update({ free_questions_left: questionsLeft })
            .eq('telegram_id', currentUser.telegram_id);
        
        if (error) throw error;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
console.log('üîÆ Script.js (–ø–æ–ª–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
