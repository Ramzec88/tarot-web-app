// script.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–±–æ—á–∏–º–∏ —Ç–∞–±–∞–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
// ========================================================================

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ config.js –∏–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö init)
let currentUser = null; // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑ initTelegramUser
let appState = {
    currentTab: 'daily',
    questionsLeft: 3, // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    isPremium: false  // –ë—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
async function initApp() {
    try {
        console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tarot Web App...');

        // 1. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ Supabase-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        //    (Supabase –∫–ª–∏–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ initSupabase() –≤ supabase-functions.js)
        await ensureSupabaseLibrary(); // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ window.supabase –¥–æ—Å—Ç—É–ø–µ–Ω
        // –¢–µ–ø–µ—Ä—å client.js –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å initSupabase() –∏–∑ supabase-functions.js

        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        initTelegramWebApp();

        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ supabase-functions.js)
        //    –≠–¢–û–¢ –í–´–ó–û–í –¢–ï–ü–ï–†–¨ –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –ü–û–õ–£–ß–ï–ù–ò–ï currentUser –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï appState
        currentUser = await initTelegramUser(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ supabase-functions.js
        
        if (currentUser) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω/—Å–æ–∑–¥–∞–Ω.');
            // appState.questionsLeft –∏ appState.isPremium –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ initTelegramUser()
            // —á–µ—Ä–µ–∑ window.appState –∏ window.updateUI()
            updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†–∞–±–æ—Ç–∞–µ–º –≤ –≥–æ—Å—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ.');
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç Telegram ID),
            // –æ—Å—Ç–∞–≤–ª—è–µ–º appState –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
            const localData = localStorage.getItem('tarot_user_data');
            if (localData) {
                const parsedData = JSON.parse(localData);
                appState.questionsLeft = parsedData.questionsLeft || APP_CONFIG.freeQuestionsLimit;
                appState.isPremium = parsedData.isPremium || false;
            }
            updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ç–µ–∫—É—â–∏–º (–≤–æ–∑–º–æ–∂–Ω–æ, –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º) —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        }
        
        // 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∞–±–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã –¥–æ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞)
        setupTabEventListeners();

        // 5. –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        checkAndShowWelcome();

        // 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        setupOtherEventListeners();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// üîó –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô –î–õ–Ø –¢–ê–ë–û–í
function setupTabEventListeners() {
    console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–∞–±–æ–≤...');

    const navTabs = document.querySelectorAll('.nav-tab');

    if (navTabs.length === 0) {
        console.error('‚ùå –¢–∞–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM');
        return;
    }

    navTabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
            e.preventDefault();

            const tabName = this.getAttribute('data-tab');
            if (tabName) {
                console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${tabName}`);
                switchTab(tabName);
            }
        });
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è ${navTabs.length} —Ç–∞–±–æ–≤`);
}

// üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ú–ï–ñ–î–£ –¢–ê–ë–ê–ú–ò
function switchTab(tabName) {
    try {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${tabName}`);

        appState.currentTab = tabName;

        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });

        const currentTabElement = document.querySelector(`[data-tab="${tabName}"]`);
        if (currentTabElement) {
            currentTabElement.classList.add('active');
        }

        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
            content.style.display = 'none';
        });

        const targetContent = document.getElementById(`${tabName}-tab`);
        if (targetContent) {
            targetContent.classList.add('active');
            targetContent.style.display = 'block';
        } else {
            console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–∞–±–∞ ${tabName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        handleTabSpecificLogic(tabName);

        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.expand();
        }

        console.log(`‚úÖ –¢–∞–± ${tabName} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–∞ ${tabName}:`, error);
    }
}

// üéØ –°–ü–ï–¶–ò–§–ò–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–ê–ñ–î–û–ì–û –¢–ê–ë–ê
function handleTabSpecificLogic(tabName) {
    switch (tabName) {
        case 'daily':
            handleDailyTab();
            break;
        case 'question':
            handleQuestionTab();
            break;
        case 'spreads':
            handleSpreadsTab();
            break;
        case 'history':
            handleHistoryTab();
            break;
        case 'reviews':
            handleReviewsTab();
            break;
        case 'premium':
            handlePremiumTab();
            break;
        default:
            console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–±: ${tabName}`);
    }
}

// üìÖ –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–ö–ê–†–¢–ê –î–ù–Ø"
function handleDailyTab() {
    console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"');
    checkTodayCard(); // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è
}

// ‚ùì –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–í–û–ü–†–û–°"
function handleQuestionTab() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–í–æ–ø—Ä–æ—Å"');
    updateQuestionsCounter();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    const subscriptionBanner = document.getElementById('subscription-banner-question');
    if (subscriptionBanner) {
        if (!appState.isPremium && appState.questionsLeft <= 0) {
            subscriptionBanner.style.display = 'block';
        } else {
            subscriptionBanner.style.display = 'none';
        }
    }
    // –°–∫—Ä—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    document.getElementById('follow-up-section').style.display = 'none';
    document.getElementById('followup-answer-section').style.display = 'none';
    document.getElementById('first-answer-section').style.display = 'none';
}

// üÉè –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–†–ê–°–ö–õ–ê–î–´"
function handleSpreadsTab() {
    console.log('üÉè –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–†–∞—Å–∫–ª–∞–¥—ã"');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º
    if (!appState.isPremium) {
        showPremiumRequired('spreads'); // –ü–µ—Ä–µ–¥–∞–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    }
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
    document.getElementById('spread-detail').style.display = 'none';
    document.querySelectorAll('.spreads-grid .spread-card').forEach(card => card.style.display = 'block');
}

// üìñ –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–ò–°–¢–û–†–ò–Ø"
function handleHistoryTab() {
    console.log('üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–ò—Å—Ç–æ—Ä–∏—è"');
    loadUserHistory();
}

// ‚≠ê –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–û–¢–ó–´–í–´"
function handleReviewsTab() {
    console.log('‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–û—Ç–∑—ã–≤—ã"');
    loadReviews();
}

// üëë –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "PREMIUM"
function handlePremiumTab() {
    console.log('üëë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "Premium"');
    // –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π - —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Premium
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');

    try {
        if (window.Telegram?.WebApp) {
            const tg = window.Telegram.WebApp;

            tg.ready();
            tg.expand();
            tg.enableClosingConfirmation();

            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.backgroundColor || '#1a1a2e');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.textColor || '#ffffff');
            
            // –ó–¥–µ—Å—å –º—ã –±–æ–ª—å—à–µ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentUser, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç initTelegramUser –∏–∑ supabase-functions.js
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram)');
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram:
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç Telegram WebApp
            window.Telegram = {
                WebApp: {
                    initDataUnsafe: {
                        user: {
                            id: 'test_user_id_123', // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID
                            first_name: '–¢–µ—Å—Ç',
                            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                            username: 'testuser',
                            language_code: 'ru'
                        }
                    },
                    ready: () => console.log('Mock Telegram WebApp ready.'),
                    expand: () => console.log('Mock Telegram WebApp expanded.'),
                    enableClosingConfirmation: () => console.log('Mock Telegram WebApp closing confirmation enabled.'),
                    showAlert: (message) => { // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º showPopup –æ—à–∏–±–∫—É
                        console.log(`[Mock Telegram WebApp ALERT]: ${message}`);
                        alert(message); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert –¥–ª—è –ü–ö
                    },
                    backgroundColor: '#1a1a2e',
                    textColor: '#ffffff'
                }
            };
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// üóÑÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE (–≠–¢–ê –§–£–ù–ö–¶–ò–Ø –¢–ï–ü–ï–†–¨ –ù–ê–•–û–î–ò–¢–°–Ø –í supabase-functions.js)
// –ï—ë –≤—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ initTelegramUser() –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π,
// –µ—Å–ª–∏ supabase-functions.js —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç initSupabase.
// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ supabase-functions.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç supabase
async function ensureSupabaseLibrary() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase
    if (typeof window.supabase !== 'undefined' && window.supabase.createClient) {
        console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return true;
    }

    console.log('üìö –ó–∞–≥—Ä—É–∂–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase...');

    return new Promise((resolve) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/dist/umd/supabase.min.js';
        script.async = true;

        script.onload = () => {
            console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –≤—ã–∑—ã–≤–∞–µ–º initSupabase –∏–∑ supabase-functions.js
            if (typeof window.initSupabase === 'function') { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ initSupabase –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω
                const supabaseClientReady = window.initSupabase();
                if (supabaseClientReady) {
                    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ supabase-functions.js');
                    resolve(true);
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ supabase-functions.js');
                    resolve(false);
                }
            } else {
                console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è initSupabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ supabase-functions.js');
                resolve(false);
            }
        };

        script.onerror = () => {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase');
            resolve(false);
        };

        document.head.appendChild(script);

        setTimeout(() => {
            resolve(false);
        }, 10000); // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
    });
}


// üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê (—Å–¥–µ–ª–∞–µ–º –µ—ë –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ supabase-functions.js)
window.updateUI = function() { // –î–µ–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI...');
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questionsCounter = document.getElementById('questions-count');
    if (questionsCounter) {
        questionsCounter.textContent = appState.questionsLeft;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionStatus = document.getElementById('subscription-status');
    if (subscriptionStatus) {
        if (appState.isPremium) {
            subscriptionStatus.classList.add('premium');
            subscriptionStatus.innerHTML = `
                <span class="status-icon">‚ú®</span>
                <span class="status-text">Premium –∞–∫—Ç–∏–≤–µ–Ω</span>
            `;
        } else {
            subscriptionStatus.classList.remove('premium');
            subscriptionStatus.innerHTML = `
                <span class="status-icon">üåë</span>
                <span class="status-text">–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è</span>
            `;
        }
    }
    console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω.');
}

// üîß –ù–ê–°–¢–†–û–ô–ö–ê –î–†–£–ì–ò–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupOtherEventListeners() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    const askBtn = document.getElementById('ask-btn');
    if (askBtn) {
        askBtn.addEventListener('click', handleAskQuestion);
    }
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const followUpBtn = document.getElementById('follow-up-btn');
    if (followUpBtn) {
        followUpBtn.addEventListener('click', handleFollowUpQuestion);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç—ã –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', handleDailyCardClick);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener('click', handleClearHistory);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    document.querySelectorAll('.spread-card').forEach(card => {
        card.addEventListener('click', function() {
            const spreadType = this.getAttribute('data-spread');
            selectSpread(spreadType);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –±–∞–Ω–Ω–µ—Ä–æ–≤
    document.querySelectorAll('.banner-buttons .btn').forEach(button => {
        button.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            if (tab) switchTab(tab);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    const submitReviewBtn = document.getElementById('submit-review-btn');
    if (submitReviewBtn) {
        submitReviewBtn.addEventListener('click', handleSubmitReview);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const ratingStars = document.getElementById('rating-stars');
    if (ratingStars) {
        ratingStars.addEventListener('click', handleRatingClick);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const saveProfileBtn = document.getElementById('save-profile-btn');
    const skipProfileBtn = document.getElementById('skip-profile-btn');
    if (saveProfileBtn) {
        saveProfileBtn.addEventListener('click', saveProfile);
    }
    if (skipProfileBtn) {
        skipProfileBtn.addEventListener('click', skipProfile);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ index.html)
    const historyList = document.getElementById('history-list');
    if (historyList) {
        historyList.addEventListener('click', function(event) {
            const historyItem = event.target.closest('.history-item');
            if (historyItem) {
                const historyItemId = historyItem.dataset.id;
                const historyItemType = historyItem.dataset.type;
                if (historyItemId && historyItemType) {
                    showHistoryDetail(historyItemId, historyItemType);
                }
            }
        });
    }

    console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
}

// –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –î–ù–Ø
let currentDailyCard = null;

// üÉè –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ì–†–û–í–û–ô –õ–û–ì–ò–ö–ò
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...');

    const questionInput = document.getElementById('question-input');
    if (!questionInput) return;

    const question = questionInput.value.trim();
    if (!question) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å');
        return;
    }

    if (!currentUser) {
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
    }

    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('question');
        return;
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
    const askBtn = document.getElementById('ask-btn');
    askBtn.disabled = true;
    document.getElementById('question-loading').style.display = 'block';

    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∞
        document.getElementById('first-answer-section').style.display = 'block';
        document.getElementById('first-ai-container').innerHTML = `<div class="ai-prediction"><div class="ai-header"><span class="ai-icon">ü§ñ</span><div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div></div><div class="ai-content generating-text">${APP_CONFIG.texts.loading}</div></div>`;

        // –í—ã—Ç—è–≥–∏–≤–∞–µ–º –æ–¥–Ω—É –∫–∞—Ä—Ç—É
        const drawnCards = drawRandomCards(1);
        const card = drawnCards[0];
        const isReversed = Math.random() < 0.5; // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞—Ä—Ç—ã
        const answerCardElement = document.getElementById('answer-card');
        answerCardElement.innerHTML = `
            <div class="card-name">${card.name} ${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</div>
            <img src="${isReversed ? card.imageReversed || card.image : card.imageUpright || card.image}" alt="${card.name}" class="card-image">
            <div class="card-meaning">${isReversed ? card.meaningReversed : card.meaningUpright}</div>
        `;
        answerCardElement.classList.add('flipped');

        // –ü–æ–ª—É—á–∞–µ–º –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        const aiPrediction = await sendPredictionToN8N(currentUser.user_id, question, [{...card, isReversed}], 'question');
        document.getElementById('first-ai-container').innerHTML = `
            <div class="ai-prediction">
                <div class="ai-header"><span class="ai-icon">ü§ñ</span><div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div></div>
                <div class="ai-content">${aiPrediction}</div>
            </div>
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤–æ–ø—Ä–æ—Å–∞
        await saveCompleteQuestionSession(currentUser.user_id, question, [{card: card, isReversed: isReversed}], aiPrediction, 'question');

        if (!appState.isPremium) {
            appState.questionsLeft--;
            updateQuestionsCounter();
        }

        questionInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('question-loading').style.display = 'none';
        askBtn.disabled = false;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        document.getElementById('follow-up-section').style.display = 'block';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        document.getElementById('question-loading').style.display = 'none';
        askBtn.disabled = false;
    }
}

async function handleFollowUpQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...');

    const followUpInput = document.getElementById('follow-up-input');
    if (!followUpInput) return;

    const followUpQuestion = followUpInput.value.trim();
    if (!followUpQuestion) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        return;
    }

    if (!currentUser) {
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
    }

    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('question');
        return;
    }

    const followUpBtn = document.getElementById('follow-up-btn');
    followUpBtn.disabled = true;
    document.getElementById('followup-loading').style.display = 'block';

    try {
        document.getElementById('followup-answer-section').style.display = 'block';
        document.getElementById('followup-ai-container').innerHTML = `<div class="ai-prediction"><div class="ai-header"><span class="ai-icon">ü§ñ</span><div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div></div><div class="ai-content generating-text">${APP_CONFIG.texts.loading}</div></div>`;

        const drawnCards = drawRandomCards(1);
        const card = drawnCards[0];
        const isReversed = Math.random() < 0.5;

        const followupAnswerCardElement = document.getElementById('followup-answer-card');
        followupAnswerCardElement.innerHTML = `
            <div class="card-name">${card.name} ${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</div>
            <img src="${isReversed ? card.imageReversed || card.image : card.imageUpright || card.image}" alt="${card.name}" class="card-image">
            <div class="card-meaning">${isReversed ? card.meaningReversed : card.meaningUpright}</div>
        `;
        followupAnswerCardElement.classList.add('flipped');

        const aiPrediction = await sendPredictionToN8N(currentUser.user_id, followUpQuestion, [{...card, isReversed}], 'follow_up');
        document.getElementById('followup-ai-container').innerHTML = `
            <div class="ai-prediction">
                <div class="ai-header"><span class="ai-icon">ü§ñ</span><div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div></div>
                <div class="ai-content">${aiPrediction}</div>
            </div>
        `;

        await saveCompleteQuestionSession(currentUser.user_id, followUpQuestion, [{card: card, isReversed: isReversed}], aiPrediction, 'follow_up');

        if (!appState.isPremium) {
            appState.questionsLeft--;
            updateQuestionsCounter();
        }

        followUpInput.value = '';
        document.getElementById('followup-loading').style.display = 'none';
        followUpBtn.disabled = false;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
        showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        document.getElementById('followup-loading').style.display = 'none';
        followUpBtn.disabled = false;
    }
}


async function handleDailyCardClick() {
    console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è...');

    if (!currentUser) {
        showErrorMessage('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        return;
    }

    const dailyCardElement = document.getElementById('daily-card');
    const dailyLoadingElement = document.getElementById('daily-loading');
    dailyCardElement.classList.add('loading-state');
    dailyLoadingElement.style.display = 'block';

    try {
        const existingCard = await getTodayDailyCard(currentUser.user_id);

        if (existingCard) {
            currentDailyCard = existingCard.card_data;
            const aiPrediction = existingCard.ai_prediction;
            
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –≤—ã—Ç—è–Ω—É—Ç–∞ —Å–µ–≥–æ–¥–Ω—è.');
            renderDailyCard(currentDailyCard, aiPrediction);
            dailyLoadingElement.style.display = 'none';
            dailyCardElement.classList.remove('loading-state');
            return;
        }

        const drawnCard = drawRandomCards(1)[0];
        const isReversed = Math.random() < 0.5;
        const cardData = {...drawnCard, isReversed: isReversed}; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏

        // –ü–æ–ª—É—á–∞–µ–º –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const aiPrediction = await sendPredictionToN8N(currentUser.user_id, '–ö–∞—Ä—Ç–∞ –¥–Ω—è', [cardData], 'daily');

        await saveCompleteDailyCardSession(currentUser.user_id, cardData, aiPrediction); // –í supabase-functions.js –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

        currentDailyCard = cardData; // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        renderDailyCard(currentDailyCard, aiPrediction);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        dailyLoadingElement.style.display = 'none';
        dailyCardElement.classList.remove('loading-state');
    }
}

// üìÖ –†–ï–ù–î–ï–†–ò–ù–ì –ö–ê–†–¢–´ –î–ù–Ø
function renderDailyCard(card, aiPrediction) {
    const dailyCardElement = document.getElementById('daily-card');
    const dailyAiContainer = document.getElementById('daily-ai-container');
    const dailyInfoBanner = document.getElementById('daily-info-banner');

    if (!dailyCardElement || !dailyAiContainer || !dailyInfoBanner) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã UI –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
    }

    dailyCardElement.classList.add('flipped');
    dailyCardElement.innerHTML = `
        <div class="card-name">${card.name} ${card.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</div>
        <img src="${card.isReversed ? card.imageReversed || card.image : card.imageUpright || card.image}" alt="${card.name}" class="card-image">
        <div class="card-meaning">${card.isReversed ? card.meaningReversed : card.meaningUpright}</div>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    dailyAiContainer.innerHTML = `
        <div class="ai-prediction">
            <div class="ai-header"><span class="ai-icon">ü§ñ</span><div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div></div>
            <div class="ai-content">${aiPrediction || '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.'}</div>
        </div>
    `;
    dailyAiContainer.style.display = 'block';
    dailyInfoBanner.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å/—Å–∫—Ä—ã–≤–∞—Ç—å AI-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    dailyCardElement.onclick = () => {
        dailyAiContainer.style.display = dailyAiContainer.style.display === 'none' ? 'block' : 'none';
    };
}


async function checkTodayCard() {
    console.log('üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è...');
    if (!currentUser) {
        console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è.');
        document.getElementById('daily-loading').style.display = 'none';
        document.getElementById('daily-card').classList.remove('loading-state');
        return;
    }
    
    const existingCard = await getTodayDailyCard(currentUser.user_id);
    if (existingCard) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å, –æ—Ç–æ–±—Ä–∞–∂–∞—é...');
        currentDailyCard = existingCard.card_data;
        renderDailyCard(currentDailyCard, existingCard.ai_prediction);
    } else {
        console.log('‚è≥ –ö–∞—Ä—Ç—ã –¥–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç. –û–∂–∏–¥–∞—é –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è...');
        // –°–∫—Ä—ã–≤–∞–µ–º AI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ç–∫ –∫–∞—Ä—Ç—ã
        document.getElementById('daily-ai-container').style.display = 'none';
        document.getElementById('daily-info-banner').style.display = 'none';
        const dailyCardElement = document.getElementById('daily-card');
        dailyCardElement.classList.remove('flipped');
        dailyCardElement.innerHTML = `
            <div class="card-back">
                <div class="card-symbol">üîÆ</div>
                <div class="card-text">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã<br>—É–∑–Ω–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è</div>
            </div>
        `;
    }
}


function drawRandomCards(count) {
    const allCards = window.ALL_TAROT_CARDS || window.FALLBACK_CARDS;
    if (!allCards || allCards.length === 0) {
        console.error('‚ùå –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
        throw new Error('–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    const shuffled = allCards.sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
}

// üìö –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function loadUserHistory() {
    console.log('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const historyListElement = document.getElementById('history-list');
    if (!historyListElement) return;

    historyListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é

    if (!currentUser) {
        historyListElement.innerHTML = `
            <div class="empty-history">
                <div class="empty-icon">‚ö†Ô∏è</div>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.</p>
            </div>
        `;
        console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
        return;
    }

    try {
        const history = await getUserHistory(currentUser.user_id, APP_CONFIG.maxHistoryItems);

        if (history.length === 0) {
            historyListElement.innerHTML = `
                <div class="empty-history">
                    <div class="empty-icon">üîÆ</div>
                    <p>–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤</p>
                </div>
            `;
            return;
        }

        let currentGroupDate = '';
        history.forEach(item => {
            const itemDate = new Date(item.created_at).toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            if (itemDate !== currentGroupDate) {
                const dateHeader = document.createElement('div');
                dateHeader.className = 'history-date-header';
                dateHeader.textContent = itemDate;
                historyListElement.appendChild(dateHeader);
                currentGroupDate = itemDate;
            }

            const itemElement = document.createElement('div');
            itemElement.className = 'history-item';
            itemElement.dataset.id = item.id;
            itemElement.dataset.type = item.type; // 'daily', 'question', 'spread'

            let typeText = '';
            let mainText = '';
            let cardsHtml = '';
            let icon = 'üìñ';

            if (item.type === 'daily') {
                typeText = '–ö–∞—Ä—Ç–∞ –¥–Ω—è';
                icon = '‚òÄÔ∏è';
                const card = item.card_data;
                mainText = card.name + (card.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '');
                cardsHtml = `<div class="history-mini-card">${card.symbol || 'üîÆ'} ${card.name}</div>`;
            } else if (item.type === 'question' && item.tarot_answers && item.tarot_answers.length > 0) {
                typeText = '–í–æ–ø—Ä–æ—Å';
                icon = '‚ùì';
                mainText = item.question_text;
                item.tarot_answers.forEach(answer => {
                    if (answer.cards_drawn && answer.cards_drawn.length > 0) {
                        answer.cards_drawn.forEach(cardData => {
                            const card = cardData.card;
                            cardsHtml += `<div class="history-mini-card">${card.symbol || 'üîÆ'} ${card.name}</div>`;
                        });
                    }
                });
            } else if (item.type === 'spread') {
                typeText = `–†–∞—Å–∫–ª–∞–¥: ${item.spread_name}`;
                icon = 'üÉè';
                mainText = item.question || '–ë–µ–∑ –≤–æ–ø—Ä–æ—Å–∞';
                if (item.cards_data && item.cards_data.length > 0) {
                    item.cards_data.forEach(cardPos => {
                        const card = cardPos.card;
                        cardsHtml += `<div class="history-mini-card">${card.symbol || 'üîÆ'} ${card.name}</div>`;
                    });
                }
            } else {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            }

            itemElement.innerHTML = `
                <div class="history-header">
                    <div class="history-type">${icon} ${typeText}</div>
                    <div class="history-time">${new Date(item.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
                </div>
                <div class="history-question">"${mainText}"</div>
                <div class="history-cards">${cardsHtml}</div>
            `;
            historyListElement.appendChild(itemElement);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        historyListElement.innerHTML = `
            <div class="empty-history">
                <div class="empty-icon">üòî</div>
                <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
            </div>
        `;
    }
}

async function showHistoryDetail(id, type) {
    console.log(`–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏: ID=${id}, –¢–∏–ø=${type}`);
    if (!currentUser) {
        showErrorMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏.');
        return;
    }

    let detailItem = null;
    try {
        if (type === 'daily') {
            const { data, error } = await supabase.from(TABLES.dailyCards).select('*').eq('id', id).single();
            if (error) throw error;
            detailItem = data;
        } else if (type === 'question') {
            const { data, error } = await supabase.from(TABLES.questions).select(`*, tarot_answers(*)`).eq('id', id).single();
            if (error) throw error;
            detailItem = data;
        } else if (type === 'spread') {
            const { data, error } = await supabase.from(TABLES.spreads).select('*').eq('id', id).single();
            if (error) throw error;
            detailItem = data;
        }

        if (!detailItem) {
            showErrorMessage('–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const modal = document.createElement('div');
        modal.className = 'history-modal';
        modal.innerHTML = `
            <div class="history-modal-content">
                <div class="history-modal-header">
                    <h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</h3>
                    <button class="history-modal-close">‚úñ</button>
                </div>
                <div class="history-modal-body">
                    <div class="history-detail-date">${new Date(detailItem.created_at).toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })}</div>
                    
                    ${detailItem.question_text ? `
                    <div class="history-detail-question">
                        <strong>–í–∞—à –≤–æ–ø—Ä–æ—Å:</strong>
                        <p>"${detailItem.question_text}"</p>
                    </div>` : ''}

                    <div class="history-detail-cards">
                        <strong>–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:</strong>
                        ${renderDetailCards(detailItem, type)}
                    </div>

                    ${detailItem.ai_prediction ? `
                    <div class="history-detail-prediction">
                        <strong>–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</strong>
                        <p>${detailItem.ai_prediction}</p>
                    </div>` : ''}

                    ${detailItem.spread_name ? `
                    <div class="history-detail-spread">
                        <strong>–¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:</strong>
                        <p>${detailItem.spread_name}</p>
                    </div>` : ''}
                </div>
                <div class="history-modal-footer">
                    <button class="btn btn-secondary history-modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        setTimeout(() => modal.classList.add('show'), 10); // –ü–æ–∫–∞–∑–∞—Ç—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π

        modal.querySelectorAll('.history-modal-close').forEach(btn => {
            btn.addEventListener('click', () => {
                modal.classList.remove('show');
                setTimeout(() => modal.remove(), 300); // –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            });
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—Ä–∏–∏:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.');
    }
}

function renderDetailCards(item, type) {
    let cards = [];
    if (type === 'daily') {
        cards.push(item.card_data);
    } else if (type === 'question' && item.tarot_answers && item.tarot_answers.length > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤)
        item.tarot_answers.forEach(answer => {
            if (answer.cards_drawn) {
                cards = cards.concat(answer.cards_drawn);
            }
        });
    } else if (type === 'spread') {
        cards = item.cards_data;
    }

    return cards.map(cardItem => {
        const card = cardItem.card || cardItem; // –ú–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ {card: {}, isReversed: true} —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ {}
        const isReversed = cardItem.isReversed || false;
        const positionName = cardItem.position_name || ''; // –î–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        const positionDescription = cardItem.position_description || ''; // –î–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤

        return `
            <div class="history-detail-card">
                <div class="card-header">
                    <span class="card-symbol-large">${card.symbol || 'üîÆ'}</span>
                    <span class="card-name-large">${card.name} ${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</span>
                </div>
                ${positionName ? `<div class="card-position-name">${positionName}${positionDescription ? `: ${positionDescription}` : ''}</div>` : ''}
                <div class="card-meaning-detail">
                    ${isReversed ? card.meaningReversed : card.meaningUpright}
                </div>
            </div>
        `;
    }).join('');
}


async function handleClearHistory() {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...');
    if (!currentUser) {
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
    }

    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) {
        try {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { error: dailyError } = await supabase.from(TABLES.dailyCards).delete().eq('user_id', currentUser.user_id);
            const { error: questionsError } = await supabase.from(TABLES.questions).delete().eq('user_id', currentUser.user_id);
            const { error: spreadsError } = await supabase.from(TABLES.spreads).delete().eq('user_id', currentUser.user_id);
            const { error: answersError } = await supabase.from(TABLEs.answers).delete().eq('user_id', currentUser.user_id); // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–æ–∂–µ

            if (dailyError || questionsError || spreadsError || answersError) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
            }

            loadUserHistory(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            showSuccessMessage('–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}


// –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê–ú–ò
let selectedSpread = null;

function selectSpread(spreadType) {
    console.log(`–í—ã–±—Ä–∞–Ω —Ä–∞—Å–∫–ª–∞–¥: ${spreadType}`);
    selectedSpread = SPREADS_CONFIG[spreadType];

    if (!selectedSpread) {
        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:', spreadType);
        showErrorMessage('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.');
        return;
    }

    if (!appState.isPremium) {
        showPremiumRequired('spreads');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
    document.querySelectorAll('.spreads-grid .spread-card').forEach(card => card.style.display = 'none');
    
    const spreadDetail = document.getElementById('spread-detail');
    const spreadTitle = document.getElementById('spread-title');
    const spreadCardsContainer = document.getElementById('spread-cards-container');
    const drawSpreadBtn = document.getElementById('draw-spread-btn');

    spreadTitle.textContent = selectedSpread.name;
    spreadCardsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞—Ä—Ç
    selectedSpread.positions.forEach((pos, index) => {
        const slot = document.createElement('div');
        slot.className = 'spread-position'; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        slot.innerHTML = `
            <div class="spread-card-slot" data-index="${index}">
                <div class="card-back">
                    <div class="card-symbol">üîÆ</div>
                    <div class="card-text">–ü–æ–∑–∏—Ü–∏—è ${index + 1}</div>
                </div>
            </div>
            <div class="position-label">
                <strong>${pos.name}</strong>
                <small>${pos.description}</small>
            </div>
        `;
        spreadCardsContainer.appendChild(slot);
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç
    spreadCardsContainer.className = 'spread-cards-container'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –º–∞–∫–µ—Ç–æ–≤
    if (selectedSpread.layout === 'cross') { // –ï—Å–ª–∏ —É —Ä–∞—Å–∫–ª–∞–¥–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ layout
        spreadCardsContainer.classList.add('spread-layout-cross');
    } else if (selectedSpread.layout === 'celtic') {
        spreadCardsContainer.classList.add('spread-layout-celtic');
    } else if (selectedSpread.layout === 'week') {
        spreadCardsContainer.classList.add('spread-layout-week');
    } else {
        spreadCardsContainer.classList.add('spread-layout-horizontal'); // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π
    }

    spreadDetail.style.display = 'block';
    drawSpreadBtn.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥"
}

function closeSpread() {
    selectedSpread = null;
    document.getElementById('spread-detail').style.display = 'none';
    document.querySelectorAll('.spreads-grid .spread-card').forEach(card => card.style.display = 'block');
    document.getElementById('spread-cards-container').innerHTML = ''; // –û—á–∏—â–∞–µ–º
    document.getElementById('spread-loading').style.display = 'none';
    document.getElementById('draw-spread-btn').disabled = false;
}

async function drawSpread() {
    console.log('‚ú® –î–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥...');

    if (!selectedSpread) {
        showErrorMessage('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞.');
        return;
    }

    if (!currentUser) {
        showErrorMessage('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return;
    }

    if (!appState.isPremium) {
        showPremiumRequired('spreads');
        return;
    }

    const drawSpreadBtn = document.getElementById('draw-spread-btn');
    const spreadLoading = document.getElementById('spread-loading');
    drawSpreadBtn.disabled = true;
    spreadLoading.style.display = 'block';

    try {
        const questionInput = document.createElement('textarea'); // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π textarea –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        questionInput.value = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):');
        const question = questionInput.value.trim();

        const drawnCards = drawRandomCards(selectedSpread.cardCount);
        const cardsWithPositions = [];

        // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        for (let i = 0; i < selectedSpread.cardCount; i++) {
            const card = drawnCards[i];
            const isReversed = Math.random() < 0.5;
            const positionInfo = selectedSpread.positions[i];

            const cardData = {
                card: card,
                isReversed: isReversed,
                position_name: positionInfo.name,
                position_description: positionInfo.description
            };
            cardsWithPositions.push(cardData);

            const cardSlot = document.querySelector(`.spread-card-slot[data-index="${i}"]`);
            if (cardSlot) {
                cardSlot.innerHTML = `
                    <div class="spread-card-revealed">
                        <div class="card-name">${card.name} ${isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</div>
                        <img src="${isReversed ? card.imageReversed || card.image : card.imageUpright || card.image}" alt="${card.name}" class="card-image">
                        <div class="card-meaning">${isReversed ? card.meaningReversed : card.meaningUpright}</div>
                        <div class="position-context">
                            <strong>${positionInfo.name}</strong>
                            <small>${positionInfo.description}</small>
                        </div>
                    </div>
                `;
                cardSlot.classList.add('revealing'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                await new Promise(resolve => setTimeout(resolve, 300)); // –ü–∞—É–∑–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞
        let aiSummary = '';
        if (currentUser) {
            aiSummary = await sendPredictionToN8N(currentUser.user_id, question, cardsWithPositions, selectedSpread.name);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"
        const interpretationsBtn = document.createElement('button');
        interpretationsBtn.className = 'btn show-interpretations-btn';
        interpretationsBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ ü§ñ';
        interpretationsBtn.addEventListener('click', () => showSpreadInterpretationsModal(cardsWithPositions, aiSummary, question));
        document.getElementById('spread-cards-container').appendChild(interpretationsBtn);


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –≤ Supabase
        await saveSpreadToSupabase(currentUser.user_id, selectedSpread.name, cardsWithPositions, question);

        showSuccessMessage(`–†–∞—Å–∫–ª–∞–¥ "${selectedSpread.name}" –≥–æ—Ç–æ–≤!`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        spreadLoading.style.display = 'none';
        drawSpreadBtn.disabled = false;
        drawSpreadBtn.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥" –ø–æ—Å–ª–µ –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    }
}

function showSpreadInterpretationsModal(cardsWithPositions, aiSummary, question) {
    const modal = document.createElement('div');
    modal.className = 'interpretations-modal';
    modal.innerHTML = `
        <div class="interpretations-modal-content">
            <div class="interpretations-modal-header">
                <h3>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ "${selectedSpread.name}"</h3>
                <button class="interpretations-modal-close">‚úñ</button>
            </div>
            <div class="interpretations-modal-body">
                ${question ? `<div class="spread-question-display"><strong>–í–∞—à –≤–æ–ø—Ä–æ—Å:</strong> "${question}"</div>` : ''}

                ${cardsWithPositions.map(item => `
                    <div class="interpretation-item">
                        <div class="interpretation-card-info">
                            <span class="interpretation-card-symbol">${item.card.symbol || 'üîÆ'}</span>
                            <div class="interpretation-card-details">
                                <h4>${item.card.name} ${item.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : ''}</h4>
                                <p class="position-name">–ü–æ–∑–∏—Ü–∏—è: ${item.position_name} - ${item.position_description}</p>
                                <p class="card-basic-meaning">–ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${item.isReversed ? item.card.meaningReversed : item.card.meaningUpright}</p>
                            </div>
                        </div>
                        <div class="interpretation-text">
                            ${item.ai_prediction || '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}
                        </div>
                    </div>
                `).join('')}

                ${aiSummary ? `
                <div class="spread-summary">
                    <h4>–û–±—â–∏–π —Å–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç:</h4>
                    <p>${aiSummary}</p>
                </div>` : ''}

            </div>
            <div class="history-modal-footer">
                <button class="btn btn-secondary interpretations-modal-close">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);
    setTimeout(() => modal.classList.add('show'), 10);

    modal.querySelectorAll('.interpretations-modal-close').forEach(btn => {
        btn.addEventListener('click', () => {
            modal.classList.remove('show');
            setTimeout(() => modal.remove(), 300);
        });
    });
}


// –û–¢–ó–´–í–´
let currentRating = 0;

function handleRatingClick(event) {
    const clickedStar = event.target.closest('.star');
    if (!clickedStar) return;

    const rating = parseInt(clickedStar.dataset.rating);
    currentRating = rating;

    document.querySelectorAll('#rating-stars .star').forEach(star => {
        if (parseInt(star.dataset.rating) <= rating) {
            star.classList.add('active');
        } else {
            star.classList.remove('active');
        }
    });
}

async function handleSubmitReview() {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞...');
    const reviewText = document.getElementById('review-text').value.trim();
    const isAnonymous = document.getElementById('anonymous-review').checked;

    if (currentRating === 0) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–≤–µ–∑–¥–∞–º–∏.');
        return;
    }
    if (!reviewText) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –æ—Ç–∑—ã–≤–µ.');
        return;
    }

    if (!currentUser) {
        showErrorMessage('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        return;
    }

    const submitBtn = document.getElementById('submit-review-btn');
    submitBtn.disabled = true;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';

    try {
        await saveReviewToSupabase(currentUser.user_id, currentRating, reviewText, isAnonymous);
        showSuccessMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('review-text').value = '';
        document.getElementById('anonymous-review').checked = false;
        currentRating = 0;
        document.querySelectorAll('#rating-stars .star').forEach(star => star.classList.remove('active'));

        loadReviews(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–µ —Å—Ä–∞–∑—É –ø–æ—è–≤–∏—Ç—Å—è, —Ç.–∫. is_approved=false)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
    }
}

async function loadReviews() {
    console.log('‚≠ê –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...');
    const reviewsListElement = document.getElementById('reviews-list');
    const reviewsTotalElement = document.getElementById('reviews-total');
    if (!reviewsListElement || !reviewsTotalElement) return;

    reviewsListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã

    try {
        const reviews = await getApprovedReviews();

        if (reviews.length === 0) {
            reviewsListElement.innerHTML = `
                <div class="empty-history">
                    <div class="empty-icon">ü§∑‚Äç‚ôÄÔ∏è</div>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.</p>
                </div>
            `;
            reviewsTotalElement.textContent = '0';
            return;
        }

        reviewsTotalElement.textContent = reviews.length;

        reviews.forEach(review => {
            const reviewItem = document.createElement('div');
            reviewItem.className = 'review-item';
            
            const author = review.is_anonymous ? '–ê–Ω–æ–Ω–∏–º–Ω–æ' : (review.tarot_user_profiles?.username || review.tarot_user_profiles?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
            const starsHtml = '‚òÖ'.repeat(review.rating) + '‚òÜ'.repeat(5 - review.rating);
            const reviewDate = new Date(review.created_at).toLocaleDateString('ru-RU', { day: 'numeric', month: 'long', year: 'numeric' });

            reviewItem.innerHTML = `
                <div class="review-header">
                    <div class="review-author">@${author}</div>
                    <div class="review-rating">${starsHtml}</div>
                    <div class="review-date">${reviewDate}</div>
                </div>
                <div class="review-text">${review.review_text}</div>
            `;
            reviewsListElement.appendChild(reviewItem);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        reviewsListElement.innerHTML = `
            <div class="empty-history">
                <div class="empty-icon">üòî</div>
                <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.</p>
            </div>
        `;
        reviewsTotalElement.textContent = '0';
    }
}


// üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò –°–û–û–ë–©–ï–ù–ò–ô
function showErrorMessage(message) {
    console.error('üö® –û—à–∏–±–∫–∞:', message);
    if (window.Telegram?.WebApp && window.Telegram.WebApp.showAlert) {
        window.Telegram.WebApp.showAlert(message);
    } else {
        alert(message);
    }
}

function showSuccessMessage(message) {
    console.log('‚úÖ –£—Å–ø–µ—Ö:', message);
    if (window.Telegram?.WebApp && window.Telegram.WebApp.showNotification) { // Telegram WebApp notifications
        window.Telegram.WebApp.showNotification({
            message: message,
            type: 'success'
        });
    } else {
        alert(message);
    }
}


function showPremiumRequired(sourceTab = '') {
    console.log(`üëë –¢—Ä–µ–±—É–µ—Ç—Å—è Premium (–∏—Å—Ç–æ—á–Ω–∏–∫: ${sourceTab})`);
    switchTab('premium');
}

// üéâ –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ô –≠–ö–†–ê–ù (–ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
function checkAndShowWelcome() {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ò–õ–ò —É –Ω–µ–≥–æ –µ—Å—Ç—å –∏–º—è, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    const hasSeenWelcome = localStorage.getItem('tarot_seen_welcome_modal');
    if (hasSeenWelcome === 'true' || (currentUser && currentUser.display_name)) { // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ display_name —ç—Ç–æ —Ç–æ, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º
        console.log('üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –∏–ª–∏ –∏–º—è –µ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞—é.');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.style.display = 'flex';
        profileModal.classList.add('show');
    } else {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
}

async function saveProfile(event) {
    event.preventDefault();
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');

    const displayNameInput = document.getElementById('display-name');
    const birthDateInput = document.getElementById('birth-date');

    const displayName = displayNameInput.value.trim();
    const birthDate = birthDateInput.value;

    if (!displayName) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.');
        return;
    }

    const saveBtn = document.getElementById('save-profile-btn');
    saveBtn.disabled = true;
    saveBtn.classList.add('loading');

    try {
        if (!currentUser) {
            showErrorMessage('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        await updateUserProfile(currentUser.user_id, {
            display_name: displayName, // –î–æ–±–∞–≤–∏–º display_name –≤ —Å—Ö–µ–º—É user_profiles
            birth_date: birthDate || null // –ï—Å–ª–∏ –ø—É—Å—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ null
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç currentUser
        currentUser.display_name = displayName;
        currentUser.birth_date = birthDate || null;

        localStorage.setItem('tarot_seen_welcome_modal', 'true'); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ
        
        showSuccessMessage('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        closeProfileModal();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        saveBtn.disabled = false;
        saveBtn.classList.remove('loading');
    }
}

function skipProfile() {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.');
    localStorage.setItem('tarot_seen_welcome_modal', 'true');
    closeProfileModal();
}

function closeProfileModal() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.classList.remove('show');
        profileModal.classList.add('hide'); // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
            profileModal.style.display = 'none';
            profileModal.classList.remove('hide');
        }, 300); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    }
}

// üåü –≠–ö–°–ü–û–†–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ò –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –î–û–°–¢–£–ü–ê
window.tarotApp = {
    switchTab,
    appState,
    currentUser,
    initApp,
    updateUI // –î–µ–ª–∞–µ–º updateUI –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
};

console.log('üìú Script.js –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ DOM...');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ app –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ config.js —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å app.
    // initializeConfig –≤ config.js —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise,
    // —Ç–∞–∫ —á—Ç–æ –º—ã –º–æ–∂–µ–º –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    // –ï—Å–ª–∏ config.js —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ index.html, —Ç–æ –µ–≥–æ initializeConfig()
    // –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º. –ü—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ initApp() –¥–æ–∂–¥–µ—Ç—Å—è.
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ initializeConfig —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª isConfigReady()
    // –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º initApp —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ
    const checkConfigAndInit = async () => {
        if (typeof window.isConfigReady === 'function' && window.isConfigReady()) {
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞, –∑–∞–ø—É—Å–∫–∞—é initApp()...');
            initApp();
        } else {
            console.warn('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞, –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é initApp()...');
            // –ï—Å–ª–∏ config.js –µ—â–µ –Ω–µ —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∂–¥–µ–º
            setTimeout(checkConfigAndInit, 50); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 50–º—Å
        }
    };
    checkConfigAndInit();
});
