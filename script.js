// ========================================================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SCRIPT.JS - –®—ë–ø–æ—Ç –∫–∞—Ä—Ç (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
// ========================================================================

// üåü –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
let appState = {
    dailyCardUsed: false,
    lastCardDate: null,
    questionsUsed: 0,
    isPremium: false,
    freeQuestionsLimit: 3,
    history: []
};

// üì¶ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let allCards = [];
let isInitialized = false;
let currentRating = 0;

// üéØ DOM –≠–õ–ï–ú–ï–ù–¢–´
let mainNav, secondaryNav, tabContents;
let tarotCard, cardBack, cardFront, cardImage;
let cardInfoAfterFlip, flippedCardName, cardIntroText;
let aiAnswerContainer, aiInterpretationTitle, aiInterpretationTextElement;
let afterDailyCardBanner, askMoreQuestionsBtn, premiumBannerBtn;
let starAnimationContainer, questionsLeftElement;
let questionTextarea, submitQuestionBtn, charCounter;
let loadingState, questionAnswerContainer, questionAnswerText, questionCardImage;
let premiumTestToggle, premiumTestLabel;
let clarifyingQuestionContainer, clarifyingQuestionTextarea, submitClarifyingQuestionBtn, clarifyingQuestionWarning;

// üîÆ –í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ò-–û–¢–í–ï–¢–ê
const simulatedAiText = "–ì–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —ç–Ω–µ—Ä–≥–∏–∏ –¥–Ω—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤ –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–º–Ω–µ–Ω–∏–π –∏ —Å–º–µ–ª–æ –∏–¥–∏—Ç–µ –≤–ø–µ—Ä–µ–¥, –¥–æ–≤–µ—Ä—è—è —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∏—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ –∏—Å—Ö–æ–¥–∏—Ç –∏–∑–Ω—É—Ç—Ä–∏, –∏, –ø—Ä–æ—è–≤–ª—è—è –µ–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.";

// üìù –†–ê–ù–î–û–ú–ù–´–ï –¢–ï–ö–°–¢–´ –ü–ï–†–ï–î –ò–ò-–ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ï–ô
const preInterpretationPhrases = [
    "–°–µ–π—á–∞—Å —É–∑–Ω–∞–µ–º, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è...",
    "–ü—Ä–∏–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω—ã –¥–Ω—è...",
    "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π...",
    "–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª?",
    "–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –≥–ª—É–±–∏–Ω—ã –º—É–¥—Ä–æ—Å—Ç–∏ –¢–∞—Ä–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –±—É–¥—É—â–µ–µ..."
];

// ========================================================================
// üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú
// ========================================================================

function saveAppState() {
    try {
        localStorage.setItem('tarotAppState', JSON.stringify(appState));
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

function loadAppState() {
    try {
        const saved = localStorage.getItem('tarotAppState');
        if (saved) {
            const parsedState = JSON.parse(saved);
            appState = { ...appState, ...parsedState };
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', appState);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        appState = { ...appState };
    }
}

// ========================================================================
// üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ========================================================================

function showMessage(message, type = 'info', duration = 3000) {
    console.log(`${type.toUpperCase()}: ${message}`);
    
    const toast = document.getElementById('toast');
    if (!toast) {
        console.warn('Toast —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    toast.textContent = message;
    toast.className = `toast ${type}`;
    toast.classList.remove('hidden');

    setTimeout(() => {
        toast.classList.add('hidden');
    }, duration);
}

// ========================================================================
// üÉè –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ö–ê–†–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// ========================================================================

async function loadCards() {
    try {
        console.log('üÉè –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç –∏–∑ cards.json...');
        
        const possiblePaths = [
            './cards.json',
            '/cards.json',
            'cards.json'
        ];
        
        let cardsLoaded = false;
        
        for (const path of possiblePaths) {
            try {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑: ${path}`);
                const response = await fetch(path);
                
                if (response.ok) {
                    const cardsData = await response.json();
                    
                    if (cardsData && Array.isArray(cardsData) && cardsData.length > 0) {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                        allCards = cardsData.map(card => {
                            const processedCard = { ...card };
                            
                            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                            if (card.image) {
                                processedCard.image = normalizeImagePath(card.image);
                            }
                            if (card.imageUpright) {
                                processedCard.imageUpright = normalizeImagePath(card.imageUpright);
                            }
                            if (card.imageReversed) {
                                processedCard.imageReversed = normalizeImagePath(card.imageReversed);
                            }
                            
                            return processedCard;
                        });
                        
                        console.log(`‚úÖ –ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ${path}:`, allCards.length);
                        console.log('üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', allCards.slice(0, 3).map(c => ({ 
                            name: c.name, 
                            image: c.image,
                            imageUpright: c.imageUpright,
                            imageReversed: c.imageReversed
                        })));
                        
                        cardsLoaded = true;
                        break;
                    }
                }
            } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${path}:`, error.message);
            }
        }
        
        if (!cardsLoaded) {
            throw new Error('–í—Å–µ –ø—É—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –Ω–µ —É–¥–∞–ª–∏—Å—å');
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ:', error);
        allCards = getBuiltInCards();
        console.log('‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allCards.length);
    }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
function normalizeImagePath(imagePath) {
    if (!imagePath) return null;
    
    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
        return imagePath;
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
    if (imagePath.startsWith('/')) {
        imagePath = imagePath.substring(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º ./ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!imagePath.startsWith('./')) {
        imagePath = './' + imagePath;
    }
    
    return imagePath;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ placeholder –¥–ª—è –∫–∞—Ä—Ç—ã
function createCardPlaceholder(card) {
    const symbol = card.symbol || 'üîÆ';
    const name = encodeURIComponent(card.name || '–ö–∞—Ä—Ç–∞');
    const colors = [
        '4B0082/FFD700', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π/–ó–æ–ª–æ—Ç–æ–π
        '663399/FF69B4', // –ü—É—Ä–ø—É—Ä–Ω—ã–π/–†–æ–∑–æ–≤—ã–π  
        '2E8B57/98FB98', // –ó–µ–ª–µ–Ω—ã–π/–°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        '8B0000/FFA500', // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π/–û—Ä–∞–Ω–∂–µ–≤—ã–π
        '191970/87CEEB', // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π/–ì–æ–ª—É–±–æ–π
        '800080/DDA0DD'  // –ü—É—Ä–ø—É—Ä–Ω—ã–π/–°–ª–∏–≤–æ–≤—ã–π
    ];
    
    const colorPair = colors[Math.floor(Math.random() * colors.length)];
    
    return `https://via.placeholder.com/180x270/${colorPair}?text=${symbol}+${name}&fontSize=16`;
}

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function getBuiltInCards() {
    const baseCards = [
        {
            id: "built_in_1",
            name: "–ó–≤–µ–∑–¥–∞",
            symbol: "‚≠ê",
            meaningUpright: "–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ",
            description: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        },
        {
            id: "built_in_2", 
            name: "–°–æ–ª–Ω—Ü–µ",
            symbol: "‚òÄÔ∏è",
            meaningUpright: "–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞",
            description: "–°–∏–º–≤–æ–ª —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞. –í–ø–µ—Ä–µ–¥–∏ —Å–≤–µ—Ç–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –ø–æ–ª–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
        },
        {
            id: "built_in_3",
            name: "–õ—É–Ω–∞", 
            symbol: "üåô",
            meaningUpright: "–ò–ª–ª—é–∑–∏–∏, –∏–Ω—Ç—É–∏—Ü–∏—è, —Å—Ç—Ä–∞—Ö–∏",
            description: "–ö–∞—Ä—Ç–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Ç–∞–π–Ω. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É –∏ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º —Å—É–¥—å–±—ã."
        },
        {
            id: "built_in_4",
            name: "–ú–∞–≥",
            symbol: "üîÆ",
            meaningUpright: "–°–∏–ª–∞ –≤–æ–ª–∏, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
            description: "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é."
        },
        {
            id: "built_in_5",
            name: "–î—É—Ä–∞–∫",
            symbol: "üÉè",
            meaningUpright: "–ù–∞—á–∞–ª–æ, –Ω–µ–≤–∏–Ω–Ω–æ—Å—Ç—å, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å",
            description: "–ö–∞—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –°–º–µ–ª–æ –∏–¥–∏—Ç–µ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É - –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è."
        },
        {
            id: "built_in_6",
            name: "–°–∏–ª–∞",
            symbol: "ü¶Å",
            meaningUpright: "–ú—É–∂–µ—Å—Ç–≤–æ, —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞",
            description: "–ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ –≤ –º—è–≥–∫–æ—Å—Ç–∏. –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–ª–µ –¥—É—Ö–∞."
        },
        {
            id: "built_in_7",
            name: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
            symbol: "üé°",
            meaningUpright: "–£–¥–∞—á–∞, —Ü–∏–∫–ª—ã, —Å—É–¥—å–±–∞",
            description: "–ö–æ–ª–µ—Å–æ —Å—É–¥—å–±—ã –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –í—Ä–µ–º—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        },
        {
            id: "built_in_8",
            name: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
            symbol: "üëë",
            meaningUpright: "–ò–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ø—Ä–∏—Ä–æ–¥–∞",
            description: "–í—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –∏–∑–æ–±–∏–ª–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ —Ä–∞—Å—Ü–≤–µ—Å—Ç–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π –∂–∏–∑–Ω–∏."
        },
        {
            id: "built_in_9",
            name: "–ë–∞—à–Ω—è",
            symbol: "üèóÔ∏è",
            meaningUpright: "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ, –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–µ, –∏—Å—Ç–∏–Ω–∞",
            description: "–°—Ç–∞—Ä—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—É—à–∞—Ç—Å—è, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ. –ü—Ä–∏–º–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω—ã –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞."
        },
        {
            id: "built_in_10",
            name: "–°–º–µ—Ä—Ç—å",
            symbol: "üíÄ",
            meaningUpright: "–ö–æ–Ω–µ—Ü, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ",
            description: "–í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Ä–æ–≥—É –±—É–¥—É—â–µ–º—É."
        }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
    return baseCards.map(card => ({
        ...card,
        image: createCardPlaceholder(card)
    }));
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkImageAvailability(imagePath) {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
        img.src = imagePath;
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        setTimeout(() => resolve(false), 3000);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
function getRandomCard() {
    if (!allCards || allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ');
        allCards = getBuiltInCards();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    const baseCard = allCards[Math.floor(Math.random() * allCards.length)];
    const randomCard = { ...baseCard };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    randomCard.isReversed = Math.random() < 0.5;

    // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (randomCard.isReversed && randomCard.imageReversed) {
        randomCard.displayImage = randomCard.imageReversed;
    } else if (!randomCard.isReversed && randomCard.imageUpright) {
        randomCard.displayImage = randomCard.imageUpright;
    } else if (randomCard.image) {
        randomCard.displayImage = randomCard.image;
    } else {
        // Fallback –∫ placeholder
        randomCard.displayImage = createCardPlaceholder(randomCard);
    }
    
    console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: ${randomCard.name} (${randomCard.isReversed ? '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' : '–ü—Ä—è–º–∞—è'})`);
    console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${randomCard.displayImage}`);
    
    return randomCard;
}

// ========================================================================
// üé® –ê–ù–ò–ú–ê–¶–ò–ò –ò –≠–§–§–ï–ö–¢–´
// ========================================================================

function animateStars(count = 3) {
    if (!starAnimationContainer) return;
    
    starAnimationContainer.innerHTML = '';
    const stars = ['‚ú®', 'üåü', 'üí´'];
    const positions = [
        { x: '10%', y: '20%' },
        { x: '15%', y: '80%' },
        { x: '80%', y: '50%' }
    ];

    for (let i = 0; i < count; i++) {
        const star = document.createElement('span');
        star.textContent = stars[i % stars.length];
        star.classList.add('sparkle-star');
        
        star.style.left = positions[i].x;
        star.style.top = positions[i].y;
        star.style.animationDelay = `${i * 0.1}s`;
        star.style.animationDuration = `${0.8 + Math.random() * 0.4}s`;
        
        starAnimationContainer.appendChild(star);
    }
}

function typeText(element, text, speed = 15) {
    if (!element) return Promise.resolve();
    
    let i = 0;
    element.textContent = '';
    element.classList.remove('finished-typing');

    return new Promise(resolve => {
        function typeChar() {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                i++;
                setTimeout(typeChar, speed);
            } else {
                element.classList.add('finished-typing');
                resolve();
            }
        }
        typeChar();
    });
}

// ========================================================================
// üîÑ –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ========================================================================

function switchTab(tabId) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    tabContents.forEach(content => {
        content.classList.remove('active');
        content.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const targetTab = document.getElementById(tabId);
    if (targetTab) {
        targetTab.classList.add('active');
        targetTab.classList.remove('hidden');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const allNavTabs = document.querySelectorAll('.nav-tab');
    allNavTabs.forEach(tab => tab.classList.remove('active'));

    const targetNavTab = document.querySelector(`.nav-tab[data-tab="${tabId}"]`);
    if (targetNavTab) {
        targetNavTab.classList.add('active');
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
    if (tabId !== 'daily-card') {
        resetDailyCardState();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    if (tabId === 'question') {
        updateQuestionsCounter();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏
    if (tabId === 'history') {
        updateHistoryDisplay();
    }
}

function resetDailyCardState() {
    if (!tarotCard) return;
    
    tarotCard.classList.remove('flipped');
    cardFront?.classList.add('hidden');
    cardBack?.classList.remove('hidden');
    cardInfoAfterFlip?.classList.add('hidden');
    
    if (cardIntroText) cardIntroText.textContent = '';
    
    aiAnswerContainer?.classList.remove('show');
    aiAnswerContainer?.classList.add('hidden');
    
    afterDailyCardBanner?.classList.remove('show');
    afterDailyCardBanner?.classList.add('hidden');
    
    if (aiInterpretationTextElement) {
        aiInterpretationTextElement.textContent = '';
        aiInterpretationTextElement.classList.remove('finished-typing');
    }
    
    if (starAnimationContainer) {
        starAnimationContainer.innerHTML = '';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    const today = new Date().toDateString();
    if (appState.lastCardDate !== today) {
        appState.dailyCardUsed = false;
        saveAppState();
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è');
    }
}

// ========================================================================
// üÉè –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–†–¢–´ –î–ù–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–û –° –£–õ–£–ß–®–ï–ù–ù–û–ô –ó–ê–ì–†–£–ó–ö–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô)
// ========================================================================

async function handleDailyCardClick() {
    console.log('üÉè –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    if (appState.dailyCardUsed) {
        showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∑–∞–≤—Ç—Ä–∞.', 'info');
        return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    resetDailyCardState();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
    animateStars(3);

    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
    tarotCard.classList.add('flipped');

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    const randomCard = getRandomCard();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª–æ–≤–∏–Ω—É –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(async () => {
        starAnimationContainer.innerHTML = '';
        
        if (cardImage && randomCard.displayImage) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageAvailable = await checkImageAvailability(randomCard.displayImage);
            
            if (imageAvailable) {
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ:', randomCard.displayImage);
                cardImage.src = randomCard.displayImage;
            } else {
                console.warn('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder:', randomCard.displayImage);
                cardImage.src = createCardPlaceholder(randomCard);
            }
            
            cardImage.alt = randomCard.name;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            cardImage.onload = function() {
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
            };
            
            cardImage.onerror = function() {
                console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder');
                this.src = createCardPlaceholder(randomCard);
            };
        }
        
        cardFront?.classList.remove('hidden');
        cardBack?.classList.add('hidden');
    }, 400);

    // –ü–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    setTimeout(async () => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–∞—Ä—Ç—ã
        if (flippedCardName) {
            const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
            flippedCardName.textContent = `${randomCard.name}${orientationText} ${randomCard.symbol || ''}`;
        }
        cardInfoAfterFlip?.classList.remove('hidden');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        const randomPrePhrase = preInterpretationPhrases[Math.floor(Math.random() * preInterpretationPhrases.length)];
        if (cardIntroText) {
            cardIntroText.textContent = randomPrePhrase;
            cardIntroText.classList.remove('hidden');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        if (aiInterpretationTitle) {
            aiInterpretationTitle.textContent = '–ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üîÆ';
        }

        aiAnswerContainer?.classList.remove('hidden');
        aiAnswerContainer?.classList.add('show');

        // –ü–µ—á–∞—Ç–∞–µ–º –ò–ò-—Ç–µ–∫—Å—Ç
        const interpretationText = randomCard.description || simulatedAiText;
        await typeText(aiInterpretationTextElement, interpretationText);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        setTimeout(() => {
            afterDailyCardBanner?.classList.remove('hidden');
            afterDailyCardBanner?.classList.add('show');
        }, 500);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await addToHistory('daily-card', randomCard.name, interpretationText);
        
    }, 800);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    appState.dailyCardUsed = true;
    appState.lastCardDate = new Date().toDateString();
    saveAppState();
}

// ========================================================================
// ‚ùì –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–û–í
// ========================================================================

function updateQuestionsCounter() {
    if (!questionsLeftElement) return;

    if (appState.isPremium) {
        questionsLeftElement.textContent = '–í–æ–ø—Ä–æ—Å—ã: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ';
        questionsLeftElement.style.color = 'var(--accent-gold)';
        return;
    }
    
    const remaining = Math.max(0, appState.freeQuestionsLimit - appState.questionsUsed);
    questionsLeftElement.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${remaining}`;
    
    if (remaining === 0) {
        questionsLeftElement.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium!';
        questionsLeftElement.style.color = '#ff6b6b';
    } else {
        questionsLeftElement.style.color = 'var(--primary-text)';
    }
}

function handleQuestionInput() {
    if (!questionTextarea || !charCounter || !submitQuestionBtn) return;
    
    const text = questionTextarea.value;
    const length = text.length;
    
    charCounter.textContent = `${length}/200`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const canAsk = length > 0 && length <= 200 && 
                  (appState.isPremium || appState.questionsUsed < appState.freeQuestionsLimit);
    
    submitQuestionBtn.disabled = !canAsk;
    
    if (length > 200) {
        charCounter.style.color = '#ff6b6b';
    } else {
        charCounter.style.color = '#b0b0b0';
    }
}

async function handleAskQuestion() {
    if (!questionTextarea) return;
    
    const question = questionTextarea.value.trim();
    
    if (!question) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å', 'error');
        return;
    }
    
    if (!appState.isPremium && appState.questionsUsed >= appState.freeQuestionsLimit) {
        showMessage('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!', 'error');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loadingState?.classList.remove('hidden');
    questionAnswerContainer?.classList.add('hidden');
    submitQuestionBtn.disabled = true;
    
    try {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const randomCard = getRandomCard();
        const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
        const answer = `–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}" –∫–∞—Ä—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç —á–µ—Ä–µ–∑ ${randomCard.name}${orientationText}:\n\n${randomCard.description || simulatedAiText}`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        loadingState?.classList.add('hidden');
        
        if (questionCardImage) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageAvailable = await checkImageAvailability(randomCard.displayImage);
            
            if (imageAvailable) {
                questionCardImage.src = randomCard.displayImage;
            } else {
                questionCardImage.src = createCardPlaceholder(randomCard);
            }
            
            questionCardImage.classList.remove('hidden');
        }

        if (questionAnswerText) {
            await typeText(questionAnswerText, answer);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if (!appState.isPremium) {
            appState.questionsUsed++;
            saveAppState();
            updateQuestionsCounter();
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await addToHistory('clarifying-question', question, answer);

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        clarifyingQuestionTextarea.value = '';

        showMessage('–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!', 'success');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
        loadingState?.classList.add('hidden');
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    } finally {
        submitClarifyingQuestionBtn.disabled = false;
    }
}

// ========================================================================
// üìö –ò–°–¢–û–†–ò–Ø
// ========================================================================

async function addToHistory(type, title, content) {
    const telegramId = getTelegramUserId();
    
    try {
        if (window.TarotDB && window.TarotDB.isConnected()) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            if (type === 'daily-card') {
                await window.TarotDB.saveDailyCard(telegramId, {
                    id: Date.now(),
                    name: title,
                    interpretation: content
                });
            } else if (type === 'question') {
                const question = await window.TarotDB.saveQuestion(telegramId, title);
                if (question) {
                    await window.TarotDB.saveAnswer(question.id, {
                        id: Date.now(),
                        name: 'AI Response'
                    }, content);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ fallback
    const historyItem = {
        id: Date.now(),
        type: type,
        title: title,
        content: content,
        date: new Date().toLocaleString('ru-RU')
    };
    
    appState.history.unshift(historyItem);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    if (appState.history.length > 50) {
        appState.history = appState.history.slice(0, 50);
    }
    
    saveAppState();
    updateHistoryDisplay();
}

function updateHistoryDisplay() {
    const historyList = document.getElementById('historyList');
    const historyEmptyState = document.getElementById('historyEmptyState');
    
    if (!historyList) return;
    
    if (appState.history.length === 0) {
        historyEmptyState?.classList.remove('hidden');
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingItems = historyList.querySelectorAll('.history-item');
        existingItems.forEach(item => item.remove());
        return;
    }
    
    historyEmptyState?.classList.add('hidden');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    const existingItems = historyList.querySelectorAll('.history-item');
    existingItems.forEach(item => item.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
    appState.history.forEach(item => {
        const historyItemElement = document.createElement('div');
        historyItemElement.className = 'history-item';
        historyItemElement.innerHTML = `
            <div class="history-header">
                <div class="history-type">${item.type === 'daily-card' ? 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è' : '‚ùì –í–æ–ø—Ä–æ—Å'}</div>
                <div class="history-date">${item.date}</div>
            </div>
            <div class="history-title">${item.title}</div>
            <div class="history-content">${item.content.length > 100 ? item.content.substring(0, 100) + '...' : item.content}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        historyItemElement.addEventListener('click', () => {
            const content = historyItemElement.querySelector('.history-content');
            if (content.textContent.endsWith('...')) {
                content.textContent = item.content;
            } else {
                content.textContent = item.content.length > 100 ? item.content.substring(0, 100) + '...' : item.content;
            }
        });
        
        historyList.appendChild(historyItemElement);
    });
}

// ========================================================================
// ‚≠ê –û–¢–ó–´–í–´
// ========================================================================

function setupStarRating() {
    const stars = document.querySelectorAll('.star');
    
    stars.forEach((star, index) => {
        star.addEventListener('click', () => {
            currentRating = index + 1;
            updateStarsDisplay(currentRating);
            console.log('‚≠ê –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:', currentRating);
        });
        
        star.addEventListener('mouseenter', () => {
            updateStarsDisplay(index + 1);
        });
    });
    
    const starRating = document.getElementById('starRating');
    starRating?.addEventListener('mouseleave', () => {
        updateStarsDisplay(currentRating);
    });
    
    function updateStarsDisplay(rating) {
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.add('active');
            } else {
                star.classList.remove('active');
            }
        });
    }
}

function handleSubmitReview() {
    const reviewText = document.getElementById('reviewText');
    
    const rating = currentRating;
    const text = reviewText?.value.trim();
    
    if (!rating || rating === 0) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É', 'error');
        return;
    }
    
    if (!text) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤', 'error');
        return;
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('üìù –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', { rating, text });
    
    showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!', 'success');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    if (reviewText) reviewText.value = '';
    currentRating = 0;
    document.querySelectorAll('.star').forEach(star => star.classList.remove('active'));
}

// ========================================================================
// üëë PREMIUM
// ========================================================================

function updateSubscriptionStatus(isPremium = false) {
    const statusElement = document.getElementById('subscriptionStatus');
    const statusIcon = document.getElementById('statusIcon');
    const statusText = document.getElementById('statusText');
    
    if (!statusElement || !statusIcon || !statusText) return;
    
    if (isPremium) {
        statusElement.classList.add('premium');
        statusIcon.textContent = 'üëë';
        statusText.textContent = 'Premium-–ø–æ–¥–ø–∏—Å–∫–∞';
    } else {
        statusElement.classList.remove('premium');
        statusIcon.textContent = 'üåë';
        statusText.textContent = '–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç';
    }

    // Update test toggle
    if (premiumTestToggle) {
        premiumTestToggle.checked = isPremium;
    }
    if (premiumTestLabel) {
        premiumTestLabel.textContent = isPremium ? 'Premium —Ä–µ–∂–∏–º' : '–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º';
    }
}

function handlePremiumTestToggle() {
    const isPremium = premiumTestToggle.checked;
    appState.isPremium = isPremium;
    saveAppState();
    updateSubscriptionStatus(isPremium);
    updateQuestionsCounter();
    showMessage(`–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${isPremium ? 'Premium' : '–ë–∞–∑–æ–≤—ã–π'}`, 'info');
}

function handlePremiumPurchase() {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    console.log('üí∞ –ü–æ–∫—É–ø–∫–∞ Premium');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è –¥–µ–º–æ
    appState.isPremium = true;
    saveAppState();
    updateSubscriptionStatus(true);
    updateQuestionsCounter();
    
    showMessage('Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!', 'success');
}

// ========================================================================
// üõ†Ô∏è –£–¢–ò–õ–ò–¢–´
// ========================================================================

function getTelegramUserId() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        return window.Telegram.WebApp.initDataUnsafe.user.id;
    }
    
    // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return 'test_user_' + Date.now();
}

// ========================================================================
// üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DOM –≠–õ–ï–ú–ï–ù–¢–û–í
// ========================================================================

function initializeDOMElements() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    mainNav = document.getElementById('mainNav');
    secondaryNav = document.getElementById('secondaryNav');
    tabContents = document.querySelectorAll('.tab-content');
    
    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    tarotCard = document.getElementById('tarotCard');
    cardBack = tarotCard?.querySelector('.card-back');
    cardFront = tarotCard?.querySelector('.card-front');
    cardImage = document.getElementById('cardImage');
    cardInfoAfterFlip = document.getElementById('cardInfoAfterFlip');
    flippedCardName = document.getElementById('flippedCardName');
    cardIntroText = document.getElementById('cardIntroText');
    
    // –ò–ò-–æ—Ç–≤–µ—Ç—ã
    aiAnswerContainer = document.getElementById('aiAnswerContainer');
    aiInterpretationTitle = document.getElementById('aiInterpretationTitle');
    aiInterpretationTextElement = document.getElementById('aiInterpretationText');
    
    // –ë–∞–Ω–Ω–µ—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
    afterDailyCardBanner = document.getElementById('afterDailyCardBanner');
    askMoreQuestionsBtn = document.getElementById('askMoreQuestionsBtn');
    premiumBannerBtn = document.getElementById('premiumBannerBtn');
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    starAnimationContainer = document.getElementById('starAnimationContainer');
    
    // –í–æ–ø—Ä–æ—Å—ã
    questionsLeftElement = document.getElementById('questionsLeft');
    questionTextarea = document.getElementById('questionTextarea');
    submitQuestionBtn = document.getElementById('submitQuestionBtn');
    charCounter = document.getElementById('charCounter');
    loadingState = document.getElementById('loadingState');
    questionAnswerContainer = document.getElementById('questionAnswerContainer');
    questionAnswerText = document.getElementById('questionAnswerText');
    questionCardImage = document.getElementById('questionCardImage');
    
    // –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    clarifyingQuestionContainer = document.getElementById('clarifyingQuestionContainer');
    clarifyingQuestionTextarea = document.getElementById('clarifyingQuestionTextarea');
    submitClarifyingQuestionBtn = document.getElementById('submitClarifyingQuestionBtn');
    clarifyingQuestionWarning = document.getElementById('clarifyingQuestionWarning');

    // Test Toggle
    premiumTestToggle = document.getElementById('premiumTestToggle');
    premiumTestLabel = document.getElementById('premiumTestLabel');

    console.log('‚úÖ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// ========================================================================
// üéÆ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
// ========================================================================

function setupEventListeners() {
    console.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    mainNav?.addEventListener('click', (e) => {
        if (e.target.classList.contains('nav-tab')) {
            switchTab(e.target.dataset.tab);
        }
    });

    secondaryNav?.addEventListener('click', (e) => {
        if (e.target.classList.contains('nav-tab')) {
            switchTab(e.target.dataset.tab);
        }
    });

    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    tarotCard?.addEventListener('click', handleDailyCardClick);
    
    // –ö–Ω–æ–ø–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞
    askMoreQuestionsBtn?.addEventListener('click', () => switchTab('question'));
    premiumBannerBtn?.addEventListener('click', () => switchTab('premium'));
    
    // –í–æ–ø—Ä–æ—Å—ã
    questionTextarea?.addEventListener('input', handleQuestionInput);
    submitQuestionBtn?.addEventListener('click', handleAskQuestion);
    submitClarifyingQuestionBtn?.addEventListener('click', handleClarifyingQuestion);
    
    // –û—Ç–∑—ã–≤—ã
    setupStarRating();
    const submitReviewBtn = document.getElementById('submitReviewBtn');
    submitReviewBtn?.addEventListener('click', handleSubmitReview);
    
    // Premium
    const premiumBuyBtn = document.getElementById('premiumBuyBtn');
    premiumBuyBtn?.addEventListener('click', handlePremiumPurchase);

    // Test Toggle
    premiumTestToggle?.addEventListener('change', handlePremiumTestToggle);
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// ========================================================================
// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// ========================================================================

async function initApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    try {
        // 1. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (typeof window.isConfigReady === 'function') {
            let configReady = false;
            let attempts = 0;
            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
            
            while (!configReady && attempts < maxAttempts) {
                configReady = window.isConfigReady();
                if (!configReady) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    attempts++;
                }
            }
            
            if (!configReady) {
                console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback');
            }
        }
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM
        initializeDOMElements();
        
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        loadAppState();
        
        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã
        await loadCards();
        
        // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupEventListeners();
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateSubscriptionStatus(appState.isPremium);
        updateQuestionsCounter();
        updateHistoryDisplay();
        
        // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        initializeTelegramWebApp();
        
        isInitialized = true;
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
        // 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
        if (allCards && allCards.length > 0) {
            console.log(`üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allCards.length}`);
            console.log('üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç:', allCards.slice(0, 3).map(c => ({ 
                name: c.name, 
                image: c.image,
                imageUpright: c.imageUpright,
                imageReversed: c.imageReversed,
                displayImage: c.displayImage
            })));
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

// ========================================================================
// üì± –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM WEBAPP
// ========================================================================

function initializeTelegramWebApp() {
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            console.log('üì± Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            window.Telegram.WebApp.expand();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
            window.Telegram.WebApp.setHeaderColor('#1a1a2e');
            window.Telegram.WebApp.setBackgroundColor('#1a1a2e');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            window.Telegram.WebApp.ready();
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('üåê –†–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–Ω–µ –≤ Telegram)');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// ========================================================================
// üß™ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// ========================================================================

function debugApp() {
    console.log('üß™ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', appState);
    console.log('–ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allCards.length);
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', isInitialized);
    console.log('–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:', currentRating);
    console.log('DOM —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        tarotCard: !!tarotCard,
        questionTextarea: !!questionTextarea,
        submitQuestionBtn: !!submitQuestionBtn,
        historyList: !!document.getElementById('historyList')
    });
    
    if (allCards.length > 0) {
        console.log('üÉè –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç:');
        allCards.slice(0, 3).forEach(card => {
            console.log(`- ${card.name}:`);
            console.log(`  –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.image}`);
            console.log(`  –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.imageUpright}`);
            console.log(`  –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.imageReversed}`);
        });
    }
}

function resetApp() {
    console.log('üîÑ –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    localStorage.removeItem('tarotAppState');
    location.reload();
}

function testNotification() {
    showMessage('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'info');
}

function testCardImage() {
    if (allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    const randomCard = getRandomCard();
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', randomCard);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const testImg = new Image();
    testImg.onload = () => {
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ:', randomCard.displayImage);
    };
    testImg.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', randomCard.displayImage);
        console.log('üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º placeholder:', createCardPlaceholder(randomCard));
    };
    testImg.src = randomCard.displayImage;
}

function testAllCardImages() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç...');
    
    if (allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    allCards.forEach(async (card, index) => {
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã ${index + 1}/${allCards.length}: ${card.name}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.image) {
            const available = await checkImageAvailability(card.image);
            console.log(`  –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.image}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.imageUpright) {
            const available = await checkImageAvailability(card.imageUpright);
            console.log(`  –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.imageUpright}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.imageReversed) {
            const available = await checkImageAvailability(card.imageReversed);
            console.log(`  –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.imageReversed}`);
        }
    });
}

// ========================================================================
// üèÅ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ========================================================================

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    await initApp();
});

// –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initApp);
} else {
    initApp();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.TarotApp = {
    appState,
    allCards,
    switchTab,
    showMessage,
    getRandomCard,
    debugApp,
    resetApp,
    testNotification,
    testCardImage,
    testAllCardImages,
    updateHistoryDisplay,
    currentRating,
    createCardPlaceholder,
    checkImageAvailability,
    normalizeImagePath
};Card.displayImage;
            } else {
                questionCardImage.src = createCardPlaceholder(randomCard);
            }
            
            questionCardImage.classList.remove('hidden');
        }

        if (questionAnswerText) {
            await typeText(questionAnswerText, answer);
        }
        questionAnswerContainer?.classList.remove('hidden');
        questionAnswerContainer?.classList.add('show');
        
        clarifyingQuestionContainer?.classList.remove('hidden');
        if (!appState.isPremium) {
            clarifyingQuestionWarning?.classList.remove('hidden');
        } else {
            clarifyingQuestionWarning?.classList.add('hidden');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        if (!appState.isPremium) {
            appState.questionsUsed++;
            saveAppState();
            updateQuestionsCounter();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await addToHistory('question', question, answer);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        questionTextarea.value = '';
        handleQuestionInput();
        
        showMessage('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!', 'success');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
        loadingState?.classList.add('hidden');
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    } finally {
        submitQuestionBtn.disabled = false;
    }
}

async function handleClarifyingQuestion() {
    if (!clarifyingQuestionTextarea) return;

    const question = clarifyingQuestionTextarea.value.trim();
    if (!question) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å', 'error');
        return;
    }

    if (!appState.isPremium && appState.questionsUsed >= appState.freeQuestionsLimit) {
        showMessage('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!', 'error');
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loadingState?.classList.remove('hidden');
    submitClarifyingQuestionBtn.disabled = true;

    try {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–∞
        await new Promise(resolve => setTimeout(resolve, 2000));

        const randomCard = getRandomCard();
        const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
        const answer = `–ù–∞ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å "${question}" –∫–∞—Ä—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç —á–µ—Ä–µ–∑ ${randomCard.name}${orientationText}:\n\n${randomCard.description || simulatedAiText}`;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        loadingState?.classList.add('hidden');

        if (questionCardImage) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const imageAvailable = await checkImageAvailability(randomCard.displayImage);
            
            if (imageAvailable) {
                questionCardImage.src = random
