// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ n8n API

// –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
async function createOrUpdateUser() {
    if (!currentUser) return;
    
    try {
        const response = await fetch(API_CONFIG.createUser, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                username: currentUser.username,
                first_name: currentUser.first_name,
                last_name: currentUser.last_name
            })
        });
        
        if (!response.ok) throw new Error('Failed to create/update user');
        
        const userData = await response.json();
        currentUser = { ...currentUser, ...userData };
        questionsLeft = userData.free_questions_left || 0;
        isPremium = userData.is_premium;
        
        updateSubscriptionStatus(isPremium);
        updateQuestionsDisplay();
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        initOfflineMode();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è —á–µ—Ä–µ–∑ API
async function saveDailyCardToAPI(card) {
    if (!currentUser) return;
    
    try {
        const response = await fetch(API_CONFIG.saveDailyCard, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                card_name: card.name,
                card_symbol: card.symbol,
                card_meaning: card.meaning,
                drawn_date: new Date().toISOString().split('T')[0]
            })
        });
        
        if (!response.ok) throw new Error('Failed to save daily card');
        
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ API');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API
async function saveQuestionToAPI(question, isFollowUp = false) {
    if (!currentUser) return null;
    
    try {
        const response = await fetch(API_CONFIG.saveQuestion, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                question_text: question,
                is_follow_up: isFollowUp,
                created_at: new Date().toISOString()
            })
        });
        
        if (!response.ok) throw new Error('Failed to save question');
        
        const questionData = await response.json();
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ API:', questionData.id);
        
        return questionData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return { id: Date.now() }; // Fallback ID
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API
async function loadHistoryFromAPI() {
    if (!currentUser) return;
    
    try {
        const response = await fetch(`${API_CONFIG.getHistory}?telegram_id=${currentUser.telegram_id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (!response.ok) throw new Error('Failed to load history');
        
        const historyData = await response.json();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        history = historyData.map(item => ({
            id: item.id,
            date: new Date(item.created_at).toLocaleDateString('ru-RU'),
            time: new Date(item.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
            timestamp: new Date(item.created_at).getTime(),
            type: item.type || 'question',
            title: item.question_text ? '–í–æ–ø—Ä–æ—Å' : '–ö–∞—Ä—Ç–∞ –¥–Ω—è',
            question: item.question_text || '',
            cards: item.cards || []
        }));
        
        renderHistory();
        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ API');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        renderHistory();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API
async function updateSubscriptionViaAPI(subscriptionCode) {
    if (!currentUser) return false;
    
    try {
        const response = await fetch(API_CONFIG.updateSubscription, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: currentUser.telegram_id,
                subscription_code: subscriptionCode
            })
        });
        
        if (!response.ok) throw new Error('Failed to update subscription');
        
        const result = await response.json();
        
        if (result.success) {
            isPremium = true;
            questionsLeft = 999;
            updateSubscriptionStatus(true);
            updateQuestionsDisplay();
            
            showNotification('üéâ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!');
            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API');
            return true;
        } else {
            showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏');
        return false;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ n8n + OpenAI
async function generateAIPredictionViaAPI(type, card, question = '') {
    try {
        const response = await fetch(API_CONFIG.generatePrediction, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                telegram_id: currentUser?.telegram_id,
                type: type, // 'daily' –∏–ª–∏ 'question'
                card: {
                    name: card.name,
                    symbol: card.symbol,
                    meaning: card.meaning
                },
                question: question,
                user_context: {
                    is_premium: isPremium,
                    questions_asked: (APP_CONFIG.freeQuestionsLimit - questionsLeft)
                }
            })
        });
        
        if (!response.ok) throw new Error('Failed to generate prediction');
        
        const predictionData = await response.json();
        
        console.log('‚úÖ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ API');
        return predictionData.prediction || generatePredictionText(type, card, question);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        return generatePredictionText(type, card, question);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadCurrentUser() {
    if (!currentUser) return;
    
    try {
        // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Supabase –∏—Å–ø–æ–ª—å–∑—É–µ–º API
        await createOrUpdateUser();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        initOfflineMode();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è
async function saveDailyCardToSupabase(card) {
    await saveDailyCardToAPI(card);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async function saveQuestionToSupabase(question, isFollowUp) {
    return await saveQuestionToAPI(question, isFollowUp);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async function generateAIPredictionToContainer(containerId, type, card, question = '') {
    const container = document.getElementById(containerId);
    if (!container) return '';
    
    const aiBlock = document.createElement('div');
    aiBlock.className = 'ai-prediction';
    aiBlock.innerHTML = `
        <div class="ai-header">
            <div class="ai-icon">ü§ñ</div>
            <div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div>
        </div>
        <div class="ai-content">
            <div class="generating-text">–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...</div>
        </div>
    `;
    
    container.appendChild(aiBlock);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
        const prediction = await generateAIPredictionViaAPI(type, card, question);
        
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            typeWriter(aiContent, prediction, 30);
        }, 2000);
        
        return prediction;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
        const prediction = generatePredictionText(type, card, question);
        
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            typeWriter(aiContent, prediction, 50);
        }, 2000);
        
        return prediction;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
async function loadHistory() {
    await loadHistoryFromAPI();
}
