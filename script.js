// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –≤ script.js
// ========================================================================

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï SUPABASE
let supabase = null;
let supabaseReady = false;
let supabaseConnectionRetries = 0;
const MAX_SUPABASE_RETRIES = 3;

// üóÑÔ∏è –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
async function initSupabase() {
    try {
        console.log('üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const config = getSupabaseConfigSafely();
        if (!config) {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Supabase
        if (!await ensureSupabaseLibrary()) {
            console.error('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return false;
        }
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if (!validateSupabaseConfig(config)) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase');
            return false;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        supabase = window.supabase.createClient(config.url, config.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            },
            realtime: {
                params: {
                    eventsPerSecond: 2
                }
            }
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const connectionTest = await testSupabaseConnection();
        if (connectionTest) {
            supabaseReady = true;
            console.log('‚úÖ Supabase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            setupSupabaseEventHandlers();
            
            return true;
        } else {
            console.warn('‚ö†Ô∏è Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return handleSupabaseInitError(error);
    }
}

// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò SUPABASE
function getSupabaseConfigSafely() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (typeof window.getSupabaseConfig === 'function') {
            const config = window.getSupabaseConfig();
            if (config && config.url && config.anonKey) {
                return config;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        if (window.SUPABASE_CONFIG && window.SUPABASE_CONFIG.url && window.SUPABASE_CONFIG.anonKey) {
            return window.SUPABASE_CONFIG;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const envConfig = {
            url: getEnvVar('SUPABASE_URL'),
            anonKey: getEnvVar('SUPABASE_ANON_KEY')
        };
        
        if (envConfig.url && envConfig.anonKey) {
            return envConfig;
        }
        
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase:', error);
        return null;
    }
}

// üìö –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ë–ò–ë–õ–ò–û–¢–ï–ö–ò SUPABASE
async function ensureSupabaseLibrary() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
        if (typeof window.supabase !== 'undefined' && window.supabase.createClient) {
            console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return true;
        }
        
        console.log('üìö –ó–∞–≥—Ä—É–∂–∞—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        return new Promise((resolve) => {
            const script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/dist/umd/supabase.min.js';
            script.async = true;
            
            script.onload = () => {
                console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                setTimeout(() => resolve(true), 100);
            };
            
            script.onerror = () => {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É Supabase');
                resolve(false);
            };
            
            document.head.appendChild(script);
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
            setTimeout(() => {
                if (typeof window.supabase === 'undefined') {
                    console.error('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Supabase');
                    resolve(false);
                }
            }, 10000);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Supabase:', error);
        return false;
    }
}

// ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò SUPABASE
function validateSupabaseConfig(config) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!config || !config.url || !config.anonKey) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
        try {
            const url = new URL(config.url);
            if (!url.hostname.includes('supabase')) {
                console.warn('‚ö†Ô∏è URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Supabase URL');
            }
        } catch (urlError) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL Supabase:', urlError);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
        if (config.anonKey.length < 50) {
            console.error('‚ùå Anon key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ anon key
        if (!config.anonKey.startsWith('eyJ')) {
            console.error('‚ùå Anon key –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            return false;
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø SUPABASE
async function testSupabaseConnection() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase...');
        
        if (!supabase) {
            throw new Error('–ö–ª–∏–µ–Ω—Ç Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const { data, error } = await supabase
            .from('tarot_user_profiles')
            .select('count')
            .limit(1);
        
        if (error) {
            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ —Ç–æ–∂–µ OK - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if (error.message.includes('relation') && error.message.includes('does not exist')) {
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)');
                return true;
            }
            
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Supabase:', error.message);
            return false;
        }
        
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Supabase:', error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        if (error.message.includes('fetch') && supabaseConnectionRetries < MAX_SUPABASE_RETRIES) {
            supabaseConnectionRetries++;
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${supabaseConnectionRetries}/${MAX_SUPABASE_RETRIES})...`);
            
            await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            return await testSupabaseConnection();
        }
        
        return false;
    }
}

// üì° –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô SUPABASE
function setupSupabaseEventHandlers() {
    try {
        if (!supabase) return;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        supabase.auth.onAuthStateChange((event, session) => {
            console.log('üîê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', event);
            
            switch (event) {
                case 'SIGNED_IN':
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');
                    break;
                case 'SIGNED_OUT':
                    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
                    break;
                case 'TOKEN_REFRESHED':
                    console.log('üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
                    break;
            }
        });
        
        console.log('üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Supabase:', error);
    }
}

// üö® –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò SUPABASE
function handleSupabaseInitError(error) {
    try {
        console.error('üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        const errorType = getSupabaseErrorType(error);
        
        switch (errorType) {
            case 'network':
                console.warn('üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                return false;
                
            case 'config':
                console.error('‚öôÔ∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                return false;
                
            case 'auth':
                console.error('üîê –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏');
                return false;
                
            default:
                console.error('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Supabase');
                return false;
        }
        
    } catch (handlerError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ Supabase:', handlerError);
        return false;
    }
}

// üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –û–®–ò–ë–ö–ò SUPABASE
function getSupabaseErrorType(error) {
    const message = error.message.toLowerCase();
    
    if (message.includes('fetch') || message.includes('network') || message.includes('cors')) {
        return 'network';
    }
    
    if (message.includes('invalid') || message.includes('key') || message.includes('token')) {
        return 'auth';
    }
    
    if (message.includes('url') || message.includes('config')) {
        return 'config';
    }
    
    return 'unknown';
}

// üîÑ –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE
async function reconnectSupabase() {
    try {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
        
        supabaseReady = false;
        supabaseConnectionRetries = 0;
        
        const result = await initSupabase();
        
        if (result) {
            console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            window.dispatchEvent(new CustomEvent('supabase-reconnected'));
        } else {
            console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –Ω–µ —É–¥–∞–ª–æ—Å—å');
        }
        
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
        return false;
    }
}

// üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê SUPABASE
function getSupabaseStatus() {
    return {
        ready: supabaseReady,
        connected: !!supabase,
        retries: supabaseConnectionRetries,
        lastError: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏
        config: {
            hasUrl: !!(window.SUPABASE_CONFIG?.url),
            hasKey: !!(window.SUPABASE_CONFIG?.anonKey),
            urlValid: window.SUPABASE_CONFIG?.url ? isValidUrl(window.SUPABASE_CONFIG.url) : false
        }
    };
}

// üß™ –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò SUPABASE
async function testSupabaseOperations() {
    if (!supabase || !supabaseReady) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return false;
    }
    
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π Supabase...');
        
        // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        const { data: readData, error: readError } = await supabase
            .from('tarot_user_profiles')
            .select('user_id')
            .limit(1);
        
        if (readError && !readError.message.includes('does not exist')) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', readError);
            return false;
        }
        
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã (–∑–∞–ø–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ç.–¥.)
        
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π Supabase:', error);
        return false;
    }
}

// üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° SUPABASE
function getSupabaseClient() {
    if (!supabaseReady || !supabase) {
        console.warn('‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return null;
    }
    return supabase;
}

function isSupabaseReady() {
    return supabaseReady && !!supabase;
}

// üìã –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô SUPABASE
window.supabaseManager = {
    init: initSupabase,
    isReady: isSupabaseReady,
    getClient: getSupabaseClient,
    getStatus: getSupabaseStatus,
    reconnect: reconnectSupabase,
    test: testSupabaseOperations
};
