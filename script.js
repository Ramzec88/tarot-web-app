// script.js - –ü–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–®—ë–ø–æ—Ç –∫–∞—Ä—Ç"
// ========================================================================

console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ script.js...');

// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let supabase = null;
let currentUser = null;
let appState = {
    currentTab: 'daily',
    questionsLeft: 3,
    isPremium: false,
    isInitialized: false,
    currentRating: 0
};

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
async function initApp() {
    console.log('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    if (appState.isInitialized) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        return;
    }

    try {
        // 1. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await waitForConfig();
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
        await initSupabase();
        
        // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        initTelegramWebApp();
        
        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await initUser();
        
        // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        
        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        checkAndShowWelcome();
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        appState.isInitialized = true;
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// ‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ì–û–¢–û–í–ù–û–°–¢–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function waitForConfig() {
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    const maxAttempts = 50;
    let attempts = 0;
    
    while (attempts < maxAttempts) {
        if (window.isConfigReady && window.isConfigReady()) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞');
            return;
        }
        
        attempts++;
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    throw new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
}

// üîó –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
async function initSupabase() {
    try {
        const config = window.getSupabaseConfig();
        
        if (!config || !config.url || !config.anonKey) {
            console.warn('‚ö†Ô∏è Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ë–î');
            return false;
        }
        
        if (!window.supabase || !window.supabase.createClient) {
            console.warn('‚ö†Ô∏è Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            return false;
        }
        
        supabase = window.supabase.createClient(config.url, config.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            }
        });
        
        console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üì± –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM WEBAPP
function initTelegramWebApp() {
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#1a1a2e');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#ffffff');
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', tg.initDataUnsafe?.user);
            
        } else {
            console.log('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫—Ä—ã—Ç–æ –Ω–µ –≤ Telegram)');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// üë§ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function initUser() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
        
        if (telegramUser) {
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', telegramUser);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å Supabase, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            if (supabase) {
                currentUser = await createOrGetUserProfile(telegramUser);
            }
            
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω/–ø–æ–ª—É—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (currentUser) {
                appState.questionsLeft = currentUser.questions_left || 3;
                appState.isPremium = currentUser.is_premium || false;
            }
        } else {
            console.log('‚ö†Ô∏è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≥–æ—Å—Ç–µ–≤–æ–º —Ä–µ–∂–∏–º–µ');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
            const localData = localStorage.getItem('tarot_user_data');
            if (localData) {
                const userData = JSON.parse(localData);
                appState.questionsLeft = userData.questionsLeft || 3;
                appState.isPremium = userData.isPremium || false;
            }
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        
        // Fallback –∫ localStorage
        const localData = localStorage.getItem('tarot_user_data');
        if (localData) {
            const userData = JSON.parse(localData);
            appState.questionsLeft = userData.questionsLeft || 3;
            appState.isPremium = userData.isPremium || false;
        }
    }
}

// üë§ –°–û–ó–î–ê–ù–ò–ï –ò–õ–ò –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async function createOrGetUserProfile(telegramUser) {
    if (!supabase) return null;
    
    try {
        const tables = window.getTablesConfig();
        if (!tables) return null;
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id
        const { data: existingUser, error: searchError } = await supabase
            .from(tables.userProfiles)
            .select('*')
            .eq('telegram_user_id', telegramUser.id)
            .single();
            
        if (existingUser && !searchError) {
            console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω');
            return existingUser;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUserData = {
            telegram_user_id: telegramUser.id,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name || null,
            username: telegramUser.username || null,
            display_name: telegramUser.first_name,
            questions_left: 3,
            is_premium: false,
            created_at: new Date().toISOString()
        };
        
        const { data: newUser, error: createError } = await supabase
            .from(tables.userProfiles)
            .insert([newUserData])
            .select()
            .single();
            
        if (createError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
            return null;
        }
        
        console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
        return newUser;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// üîó –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    console.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–±–æ–≤
    setupTabEventListeners();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ä—Ç—ã –¥–Ω—è
    const dailyCard = document.getElementById('daily-card');
    if (dailyCard) {
        dailyCard.addEventListener('click', handleDailyCardClick);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    const askBtn = document.getElementById('ask-btn');
    if (askBtn) {
        askBtn.addEventListener('click', handleAskQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const followUpBtn = document.getElementById('follow-up-btn');
    if (followUpBtn) {
        followUpBtn.addEventListener('click', handleFollowUpQuestion);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Premium –∫–Ω–æ–ø–∫–∏
    const buyPremiumBtn = document.getElementById('buy-premium-btn');
    if (buyPremiumBtn) {
        buyPremiumBtn.addEventListener('click', handleBuyPremium);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
    const profileForm = document.getElementById('profile-form');
    if (profileForm) {
        profileForm.addEventListener('submit', handleSaveProfile);
    }
    
    const skipProfileBtn = document.getElementById('skip-profile-btn');
    if (skipProfileBtn) {
        skipProfileBtn.addEventListener('click', skipProfile);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    document.querySelectorAll('.spread-card').forEach(card => {
        card.addEventListener('click', function() {
            const spreadType = this.getAttribute('data-spread');
            selectSpread(spreadType);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
    document.querySelectorAll('.banner-buttons .btn, .btn[data-tab]').forEach(button => {
        button.addEventListener('click', function() {
            const tab = this.getAttribute('data-tab');
            if (tab) switchTab(tab);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const clearHistoryBtn = document.getElementById('clear-history-btn');
    if (clearHistoryBtn) {
        clearHistoryBtn.addEventListener('click', handleClearHistory);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
    const submitReviewBtn = document.getElementById('submit-review-btn');
    if (submitReviewBtn) {
        submitReviewBtn.addEventListener('click', handleSubmitReview);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
    const ratingStars = document.getElementById('rating-stars');
    if (ratingStars) {
        ratingStars.addEventListener('click', handleRatingClick);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö
    const backToSpreadsBtn = document.getElementById('back-to-spreads');
    if (backToSpreadsBtn) {
        backToSpreadsBtn.addEventListener('click', function() {
            document.getElementById('spread-detail').style.display = 'none';
            document.querySelectorAll('.spreads-grid .spread-card').forEach(card => {
                card.style.display = 'block';
            });
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ Enter
    const questionInput = document.getElementById('question-input');
    if (questionInput) {
        questionInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                handleAskQuestion();
            }
        });
    }
    
    const followupInput = document.getElementById('followup-input');
    if (followupInput) {
        followupInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                handleFollowUpQuestion();
            }
        });
    }
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// üîó –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –¢–ê–ë–û–í
function setupTabEventListeners() {
    const navTabs = document.querySelectorAll('.nav-tab');
    
    navTabs.forEach(tab => {
        tab.addEventListener('click', function(e) {
            e.preventDefault();
            const tabName = this.getAttribute('data-tab');
            if (tabName) {
                switchTab(tabName);
            }
        });
    });
}

// üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í
function switchTab(tabName) {
    try {
        console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–∞–±: ${tabName}`);
        
        appState.currentTab = tabName;
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
        const currentTab = document.querySelector(`[data-tab="${tabName}"]`);
        if (currentTab) {
            currentTab.classList.add('active');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Ç–∞–±–æ–≤
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
            content.style.display = 'none';
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const targetContent = document.getElementById(`${tabName}-tab`);
        if (targetContent) {
            targetContent.classList.add('active');
            targetContent.style.display = 'block';
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–∞–±–∞
        handleTabSpecificLogic(tabName);
        
        // –†–∞—Å—à–∏—Ä—è–µ–º WebApp –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        if (window.Telegram?.WebApp) {
            window.Telegram.WebApp.expand();
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–∞ ${tabName}:`, error);
    }
}

// üéØ –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –¢–ê–ë–û–í
function handleTabSpecificLogic(tabName) {
    switch (tabName) {
        case 'daily':
            handleDailyTab();
            break;
        case 'question':
            handleQuestionTab();
            break;
        case 'spreads':
            handleSpreadsTab();
            break;
        case 'history':
            handleHistoryTab();
            break;
        case 'reviews':
            handleReviewsTab();
            break;
        case 'premium':
            handlePremiumTab();
            break;
    }
}

// üìÖ –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–ö–ê–†–¢–ê –î–ù–Ø"
function handleDailyTab() {
    console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–ö–∞—Ä—Ç–∞ –¥–Ω—è"');
    checkTodayCard();
}

// ‚ùì –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–í–û–ü–†–û–°"
function handleQuestionTab() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–í–æ–ø—Ä–æ—Å"');
    updateQuestionsCounter();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionBanner = document.getElementById('subscription-banner-question');
    if (subscriptionBanner) {
        if (!appState.isPremium && appState.questionsLeft <= 0) {
            subscriptionBanner.style.display = 'block';
        } else {
            subscriptionBanner.style.display = 'none';
        }
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Ç–∞–±
    const firstAnswerSection = document.getElementById('first-answer-section');
    const followUpSection = document.getElementById('follow-up-section');
    const followupAnswerSection = document.getElementById('followup-answer-section');
    
    if (firstAnswerSection) firstAnswerSection.style.display = 'none';
    if (followUpSection) followUpSection.style.display = 'none';
    if (followupAnswerSection) followupAnswerSection.style.display = 'none';
}

// üÉè –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–†–ê–°–ö–õ–ê–î–´"
function handleSpreadsTab() {
    console.log('üÉè –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–†–∞—Å–∫–ª–∞–¥—ã"');
    
    if (!appState.isPremium) {
        showPremiumRequired('spreads');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadDetail = document.getElementById('spread-detail');
    if (spreadDetail) {
        spreadDetail.style.display = 'none';
    }
}

// üìñ –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–ò–°–¢–û–†–ò–Ø"
function handleHistoryTab() {
    console.log('üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–ò—Å—Ç–æ—Ä–∏—è"');
    loadUserHistory();
}

// ‚≠ê –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "–û–¢–ó–´–í–´"
function handleReviewsTab() {
    console.log('‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "–û—Ç–∑—ã–≤—ã"');
    loadReviews();
}

// üëë –õ–û–ì–ò–ö–ê –¢–ê–ë–ê "PREMIUM"
function handlePremiumTab() {
    console.log('üëë –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–∞ "Premium"');
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Premium —Ç–∞–±–∞
}

// üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï UI
function updateUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    updateQuestionsCounter();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    updateSubscriptionStatus();
}

// üî¢ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –í–û–ü–†–û–°–û–í
function updateQuestionsCounter() {
    const questionsCount = document.getElementById('questions-count');
    if (questionsCount) {
        questionsCount.textContent = appState.questionsLeft;
    }
}

// üí≥ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–û–î–ü–ò–°–ö–ò
function updateSubscriptionStatus() {
    const statusElement = document.getElementById('subscription-status');
    if (statusElement) {
        const icon = statusElement.querySelector('.status-icon');
        const text = statusElement.querySelector('.status-text');
        
        if (appState.isPremium) {
            if (icon) icon.textContent = 'üëë';
            if (text) text.textContent = 'Premium';
            statusElement.classList.add('premium');
        } else {
            if (icon) icon.textContent = 'üåë';
            if (text) text.textContent = '–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è';
            statusElement.classList.remove('premium');
        }
    }
}

// üÉè –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ö–ê–†–¢–ï –î–ù–Ø
async function handleDailyCardClick() {
    console.log('üÉè –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    const dailyCard = document.getElementById('daily-card');
    const loading = document.getElementById('daily-loading');
    const aiContainer = document.getElementById('daily-ai-container');
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (loading) loading.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
        const cardData = await getDailyCard();
        
        if (cardData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
            updateCardDisplay(dailyCard, cardData);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç –ò–ò
            const interpretation = await getAIInterpretation(cardData, 'daily');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            if (aiContainer && interpretation) {
                aiContainer.innerHTML = createAIResponseHTML(interpretation);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        if (loading) loading.style.display = 'none';
    }
}

// üÉè –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢–´ –î–õ–Ø –û–¢–í–ï–¢–ê
async function getAnswerCard(question) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
        const cards = window.getFallbackCards();
        const randomCard = cards[Math.floor(Math.random() * cards.length)];
        
        return {
            ...randomCard,
            question: question,
            type: 'answer',
            timestamp: new Date().toISOString()
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', error);
        throw error;
    }
}

// ü§ñ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–õ–ö–û–í–ê–ù–ò–Ø –û–¢ –ò–ò
async function getAIInterpretation(cardData, type, question = null) {
    try {
        const apiConfig = window.getAPIConfig();
        if (!apiConfig || !apiConfig.n8nWebhookUrl) {
            console.warn('‚ö†Ô∏è N8N webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ');
            return getFallbackInterpretation(cardData, type, question);
        }
        
        const requestData = {
            card: cardData,
            type: type,
            question: question,
            user: currentUser
        };
        
        const response = await fetch(apiConfig.n8nWebhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData),
            timeout: apiConfig.timeout || 10000
        });
        
        if (response.ok) {
            const result = await response.json();
            return result.interpretation || result.message || result.answer;
        } else {
            console.warn('‚ö†Ô∏è N8N webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            return getFallbackInterpretation(cardData, type, question);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –æ—Ç –ò–ò:', error);
        return getFallbackInterpretation(cardData, type, question);
    }
}

// üé≠ FALLBACK –¢–û–õ–ö–û–í–ê–ù–ò–ï
function getFallbackInterpretation(cardData, type, question) {
    const interpretations = {
        daily: `–ö–∞—Ä—Ç–∞ "${cardData.name}" –ø—Ä–µ–¥–≤–µ—â–∞–µ—Ç ${cardData.keywords[0]} –≤ –≤–∞—à–µ–º –¥–Ω–µ. ${cardData.description} –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å ${cardData.keywords.join(', ')}.`,
        question: `–ö–∞—Ä—Ç–∞ "${cardData.name}" –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}". ${cardData.description} –ö–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏: ${cardData.keywords.join(', ')}.`,
        followup: `–£—Ç–æ—á–Ω—è—è –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}", –∫–∞—Ä—Ç–∞ "${cardData.name}" —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ ${cardData.keywords[0]}. ${cardData.description}`
    };
    
    return interpretations[type] || `–ö–∞—Ä—Ç–∞ "${cardData.name}": ${cardData.description}`;
}

// üé® –°–û–ó–î–ê–ù–ò–ï HTML –î–õ–Ø –û–¢–í–ï–¢–ê –ò–ò
function createAIResponseHTML(interpretation) {
    return `
        <div class="ai-response">
            <div class="ai-response-header">
                <div class="ai-icon">üîÆ</div>
                <h4>–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç</h4>
            </div>
            <div class="ai-response-content">
                <p>${interpretation}</p>
            </div>
        </div>
    `;
}

// üé® –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–†–¢–´
function updateCardDisplay(cardElement, cardData) {
    if (!cardElement) return;
    
    cardElement.innerHTML = `
        <div class="card-front">
            <div class="card-header">
                <div class="card-number">${cardData.arcana === 'major' ? cardData.number : ''}</div>
                <div class="card-symbol">${cardData.image || 'üÉè'}</div>
            </div>
            <div class="card-name">${cardData.name}</div>
            <div class="card-keywords">${cardData.keywords.slice(0, 2).join(' ‚Ä¢ ')}</div>
        </div>
    `;
    
    cardElement.classList.add('flipped');
}

// üîÑ –°–ë–†–û–° –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–ê–†–¢–´
function resetCardDisplay(cardElement, text) {
    if (!cardElement) return;
    
    cardElement.innerHTML = `
        <div class="card-back">
            <div class="card-symbol">üîÆ</div>
            <div class="card-text">${text}</div>
        </div>
    `;
    
    cardElement.classList.remove('flipped');
}

// üí≥ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ö–£–ü–ö–ò PREMIUM
function handleBuyPremium() {
    console.log('üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ Premium');
    
    const apiConfig = window.getAPIConfig();
    const paymentUrl = apiConfig?.paymentUrl || 'https://www.wildberries.ru/catalog/199937445/detail.aspx';
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
    if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.openLink(paymentUrl);
    } else {
        window.open(paymentUrl, '_blank');
    }
}

// üîí –ü–û–ö–ê–ó –¢–†–ï–ë–û–í–ê–ù–ò–Ø PREMIUM
function showPremiumRequired(context) {
    const messages = {
        questions: '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è Premium –ø–æ–¥–ø–∏—Å–∫–∞',
        spreads: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium –≤–µ—Ä—Å–∏–∏'
    };
    
    const message = messages[context] || '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è Premium';
    
    showMessage(message, 'premium');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–∞–± Premium
    setTimeout(() => {
        switchTab('premium');
    }, 2000);
}

// üÉè –í–´–ë–û–† –†–ê–°–ö–õ–ê–î–ê
function selectSpread(spreadType) {
    console.log(`üÉè –í—ã–±–æ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞: ${spreadType}`);
    
    if (!appState.isPremium) {
        showPremiumRequired('spreads');
        return;
    }
    
    const spreadsConfig = window.getSpreadsConfig();
    const spread = spreadsConfig[spreadType];
    
    if (!spread) {
        showErrorMessage('–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ç–∫—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    document.querySelectorAll('.spreads-grid .spread-card').forEach(card => {
        card.style.display = 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
    const spreadDetail = document.getElementById('spread-detail');
    const spreadTitle = document.getElementById('spread-title');
    const spreadContent = document.getElementById('spread-content');
    
    if (spreadDetail) spreadDetail.style.display = 'block';
    if (spreadTitle) spreadTitle.textContent = spread.name;
    if (spreadContent) {
        spreadContent.innerHTML = createSpreadHTML(spread);
    }
}

// üé® –°–û–ó–î–ê–ù–ò–ï HTML –î–õ–Ø –†–ê–°–ö–õ–ê–î–ê
function createSpreadHTML(spread) {
    return `
        <div class="spread-description">
            <p>${spread.description}</p>
        </div>
        <div class="spread-cards">
            ${spread.cards.map((card, index) => `
                <div class="spread-position">
                    <div class="position-number">${index + 1}</div>
                    <div class="position-name">${card.name}</div>
                    <div class="position-description">${card.description}</div>
                    <div class="tarot-card spread-card" data-position="${index}">
                        <div class="card-back">
                            <div class="card-symbol">üîÆ</div>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
        <div class="spread-actions">
            <button class="btn btn-primary" onclick="performSpread('${spread.name}')">
                –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ ‚ú®
            </button>
        </div>
    `;
}

// üéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –†–ê–°–ö–õ–ê–î–ê
async function performSpread(spreadName) {
    console.log(`üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞: ${spreadName}`);
    
    const spreadsConfig = window.getSpreadsConfig();
    const spread = Object.values(spreadsConfig).find(s => s.name === spreadName);
    
    if (!spread) {
        showErrorMessage('–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    try {
        const cards = window.getFallbackCards();
        const spreadCards = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        for (let i = 0; i < spread.cards.length; i++) {
            const randomCard = cards[Math.floor(Math.random() * cards.length)];
            spreadCards.push({
                ...randomCard,
                position: i,
                positionName: spread.cards[i].name,
                positionDescription: spread.cards[i].description
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç
        const spreadPositions = document.querySelectorAll('.spread-position');
        spreadPositions.forEach((position, index) => {
            const cardElement = position.querySelector('.tarot-card');
            if (cardElement && spreadCards[index]) {
                updateCardDisplay(cardElement, spreadCards[index]);
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        saveToHistory({
            type: 'spread',
            spreadName: spreadName,
            cards: spreadCards,
            timestamp: new Date().toISOString()
        });
        
        showMessage('–†–∞—Å–∫–ª–∞–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'info');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// üìñ –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function loadUserHistory() {
    console.log('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const historyList = document.getElementById('history-list');
    const historyEmpty = document.getElementById('history-empty');
    
    if (!historyList) return;
    
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        
        if (history.length === 0) {
            historyList.style.display = 'none';
            if (historyEmpty) historyEmpty.style.display = 'block';
            return;
        }
        
        if (historyEmpty) historyEmpty.style.display = 'none';
        historyList.style.display = 'block';
        
        historyList.innerHTML = history.reverse().map(item => createHistoryItemHTML(item)).join('');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        if (historyEmpty) historyEmpty.style.display = 'block';
    }
}

// üé® –°–û–ó–î–ê–ù–ò–ï HTML –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–ê –ò–°–¢–û–†–ò–ò
function createHistoryItemHTML(item) {
    const date = new Date(item.timestamp).toLocaleDateString('ru-RU');
    const time = new Date(item.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    
    let content = `
        <div class="history-item">
            <div class="history-header">
                <div class="history-type">${getHistoryTypeText(item.type)}</div>
                <div class="history-date">${date} ${time}</div>
            </div>
    `;
    
    if (item.question) {
        content += `<div class="history-question">"${item.question}"</div>`;
    }
    
    if (item.card) {
        content += `
            <div class="history-card">
                <span class="card-icon">${item.card.image || 'üÉè'}</span>
                <span class="card-name">${item.card.name}</span>
            </div>
        `;
    }
    
    if (item.cards && item.cards.length > 0) {
        content += `
            <div class="history-cards">
                ${item.cards.map(card => `
                    <span class="card-icon">${card.image || 'üÉè'}</span>
                `).join('')}
                <span class="cards-count">${item.cards.length} –∫–∞—Ä—Ç</span>
            </div>
        `;
    }
    
    if (item.interpretation) {
        content += `<div class="history-interpretation">${item.interpretation}</div>`;
    }
    
    content += '</div>';
    return content;
}

// üìù –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –¢–ò–ü–ê –ò–°–¢–û–†–ò–ò
function getHistoryTypeText(type) {
    const types = {
        daily: 'üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è',
        question: '‚ùì –í–æ–ø—Ä–æ—Å',
        followup: 'üîç –£—Ç–æ—á–Ω–µ–Ω–∏–µ',
        spread: 'üÉè –†–∞—Å–∫–ª–∞–¥'
    };
    return types[type] || 'üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ';
}

// üóëÔ∏è –û–ß–ò–°–¢–ö–ê –ò–°–¢–û–†–ò–ò
function handleClearHistory() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?')) {
        localStorage.removeItem('tarot_user_history');
        loadUserHistory();
        showMessage('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'info');
    }
}

// ‚≠ê –ó–ê–ì–†–£–ó–ö–ê –û–¢–ó–´–í–û–í
function loadReviews() {
    console.log('‚≠ê –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤');
    
    const reviewsList = document.getElementById('reviews-list');
    if (!reviewsList) return;
    
    // –ü—Ä–∏–º–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã –∏–∑ Supabase)
    const mockReviews = [
        {
            name: '–ê–Ω–Ω–∞',
            rating: 5,
            text: '–û—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è! –ö–∞—Ä—Ç–∞ –¥–Ω—è –≤—Å–µ–≥–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ç–æ—á–∫—É.',
            date: '2024-01-15'
        },
        {
            name: '–ú–∏—Ö–∞–∏–ª',
            rating: 4,
            text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.',
            date: '2024-01-14'
        },
        {
            name: '–ï–ª–µ–Ω–∞',
            rating: 5,
            text: 'Premium –≤–µ—Ä—Å–∏—è —Ç–æ–≥–æ —Å—Ç–æ–∏—Ç! –†–∞—Å–∫–ª–∞–¥—ã –æ—á–µ–Ω—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ.',
            date: '2024-01-13'
        }
    ];
    
    reviewsList.innerHTML = mockReviews.map(review => `
        <div class="review-item">
            <div class="review-header">
                <div class="review-author">${review.name}</div>
                <div class="review-rating">${'‚≠ê'.repeat(review.rating)}</div>
            </div>
            <div class="review-text">${review.text}</div>
            <div class="review-date">${new Date(review.date).toLocaleDateString('ru-RU')}</div>
        </div>
    `).join('');
}

// ‚≠ê –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–ê –ü–û –ó–í–ï–ó–î–ê–ú
function handleRatingClick(e) {
    if (e.target.classList.contains('star')) {
        const rating = parseInt(e.target.getAttribute('data-rating'));
        appState.currentRating = rating;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥
        const stars = document.querySelectorAll('.star');
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.add('active');
            } else {
                star.classList.remove('active');
            }
        });
    }
}

// üìù –û–¢–ü–†–ê–í–ö–ê –û–¢–ó–´–í–ê
async function handleSubmitReview() {
    const reviewText = document.getElementById('review-text');
    const submitBtn = document.getElementById('submit-review-btn');
    
    if (!reviewText || !reviewText.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤');
        return;
    }
    
    if (appState.currentRating === 0) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É');
        return;
    }
    
    try {
        submitBtn.disabled = true;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è—é...';
        
        const reviewData = {
            rating: appState.currentRating,
            text: reviewText.value.trim(),
            user: currentUser?.display_name || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            timestamp: new Date().toISOString()
        };
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Supabase
        console.log('–û—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', reviewData);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        reviewText.value = '';
        appState.currentRating = 0;
        document.querySelectorAll('.star').forEach(star => star.classList.remove('active'));
        
        showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!', 'info');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
        loadReviews();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ
function saveToHistory(item) {
    try {
        const history = JSON.parse(localStorage.getItem('tarot_user_history') || '[]');
        history.push(item);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if (history.length > 100) {
            history.splice(0, history.length - 100);
        }
        
        localStorage.setItem('tarot_user_history', JSON.stringify(history));
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
}

// üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
function saveUserData() {
    try {
        const userData = {
            questionsLeft: appState.questionsLeft,
            isPremium: appState.isPremium,
            lastUpdated: new Date().toISOString()
        };
        
        localStorage.setItem('tarot_user_data', JSON.stringify(userData));
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (supabase && currentUser) {
            updateUserInSupabase(userData);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// üì§ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í SUPABASE
async function updateUserInSupabase(userData) {
    if (!supabase || !currentUser) return;
    
    try {
        const tables = window.getTablesConfig();
        if (!tables) return;
        
        const { error } = await supabase
            .from(tables.userProfiles)
            .update({
                questions_left: userData.questionsLeft,
                is_premium: userData.isPremium,
                updated_at: new Date().toISOString()
            })
            .eq('telegram_user_id', currentUser.telegram_user_id);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase:', error);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Supabase:', error);
    }
}

// üé≠ –ü–†–û–í–ï–†–ö–ê –ò –ü–û–ö–ê–ó –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
function checkAndShowWelcome() {
    const hasSeenWelcome = localStorage.getItem('tarot_seen_welcome_modal');
    
    if (!hasSeenWelcome && !currentUser) {
        showProfileModal();
    }
}

// üìù –ü–û–ö–ê–ó –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–§–ò–õ–Ø
function showProfileModal() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.style.display = 'flex';
        setTimeout(() => {
            profileModal.classList.add('show');
        }, 50);
    }
}

// üíæ –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–†–û–§–ò–õ–Ø
async function handleSaveProfile(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const displayName = formData.get('display_name');
    const birthDate = formData.get('birth_date');
    
    if (!displayName) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        const profileData = {
            displayName: displayName,
            birthDate: birthDate,
            createdAt: new Date().toISOString()
        };
        
        localStorage.setItem('tarot_user_profile', JSON.stringify(profileData));
        localStorage.setItem('tarot_seen_welcome_modal', 'true');
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        closeProfileModal();
        showMessage('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®—ë–ø–æ—Ç –∫–∞—Ä—Ç!', 'info');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// ‚è≠Ô∏è –ü–†–û–ü–£–°–ö –ü–†–û–§–ò–õ–Ø
function skipProfile() {
    localStorage.setItem('tarot_seen_welcome_modal', 'true');
    closeProfileModal();
}

// ‚ùå –ó–ê–ö–†–´–¢–ò–ï –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê –ü–†–û–§–ò–õ–Ø
function closeProfileModal() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        profileModal.classList.remove('show');
        setTimeout(() => {
            profileModal.style.display = 'none';
        }, 300);
    }
}

// üì¢ –ü–û–ö–ê–ó –°–û–û–ë–©–ï–ù–ò–ô
function showMessage(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageEl = document.createElement('div');
    messageEl.className = `message message-${type}`;
    messageEl.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    Object.assign(messageEl.style, {
        position: 'fixed',
        top: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        background: type === 'error' ? '#e74c3c' : type === 'premium' ? '#f39c12' : '#27ae60',
        color: 'white',
        padding: '12px 20px',
        borderRadius: '8px',
        zIndex: '9999',
        fontSize: '14px',
        boxShadow: '0 4px 12px rgba(0,0,0,0.3)',
        opacity: '0',
        transition: 'opacity 0.3s ease',
        maxWidth: '90%',
        textAlign: 'center'
    });
    
    document.body.appendChild(messageEl);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        messageEl.style.opacity = '1';
    }, 50);
    
    // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        messageEl.style.opacity = '0';
        setTimeout(() => {
            if (document.body.contains(messageEl)) {
                document.body.removeChild(messageEl);
            }
        }, 300);
    }, 3000);
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

// üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
function debugApp() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        appState: appState,
        currentUser: currentUser,
        supabase: !!supabase,
        configReady: window.isConfigReady ? window.isConfigReady() : false
    });
}

// üåü –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨
window.tarotApp = {
    initApp,
    switchTab,
    appState,
    currentUser,
    updateUI,
    handleDailyCardClick,
    handleAskQuestion,
    handleFollowUpQuestion,
    handleBuyPremium,
    selectSpread,
    performSpread,
    showMessage,
    showErrorMessage,
    debugApp,
    saveUserData,
    loadUserHistory,
    handleClearHistory,
    handleSubmitReview,
    handleRatingClick
};

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', function() {
    console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    setTimeout(() => {
        initApp();
    }, 100);
});

console.log('‚úÖ Script.js –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    }
}

// üìÖ –ü–†–û–í–ï–†–ö–ê –ö–ê–†–¢–´ –î–ù–Ø
function checkTodayCard() {
    const today = new Date().toDateString();
    const lastCardDate = localStorage.getItem('tarot_last_daily_card_date');
    
    if (lastCardDate !== today) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        localStorage.removeItem('tarot_daily_card_data');
        localStorage.setItem('tarot_last_daily_card_date', today);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        const dailyCard = document.getElementById('daily-card');
        if (dailyCard) {
            resetCardDisplay(dailyCard, '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã<br>—É–∑–Ω–∞—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
        }
        
        const aiContainer = document.getElementById('daily-ai-container');
        if (aiContainer) {
            aiContainer.innerHTML = '';
        }
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
        const savedCardData = localStorage.getItem('tarot_daily_card_data');
        if (savedCardData) {
            try {
                const cardData = JSON.parse(savedCardData);
                const dailyCard = document.getElementById('daily-card');
                const aiContainer = document.getElementById('daily-ai-container');
                
                if (dailyCard) {
                    updateCardDisplay(dailyCard, cardData);
                }
                
                if (aiContainer && cardData.interpretation) {
                    aiContainer.innerHTML = createAIResponseHTML(cardData.interpretation);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã:', error);
            }
        }
    }
}

// üÉè –ü–û–õ–£–ß–ï–ù–ò–ï –ö–ê–†–¢–´ –î–ù–Ø
async function getDailyCard() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toDateString();
        const savedCardData = localStorage.getItem('tarot_daily_card_data');
        const lastCardDate = localStorage.getItem('tarot_last_daily_card_date');
        
        if (savedCardData && lastCardDate === today) {
            return JSON.parse(savedCardData);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
        const cards = window.getFallbackCards();
        const randomCard = cards[Math.floor(Math.random() * cards.length)];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è
        const cardData = {
            ...randomCard,
            date: today,
            type: 'daily'
        };
        
        localStorage.setItem('tarot_daily_card_data', JSON.stringify(cardData));
        localStorage.setItem('tarot_last_daily_card_date', today);
        
        return cardData;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        throw error;
    }
}

// ‚ùì –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°
async function handleAskQuestion() {
    console.log('‚ùì –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
    
    const questionInput = document.getElementById('question-input');
    const askBtn = document.getElementById('ask-btn');
    const firstAnswerSection = document.getElementById('first-answer-section');
    const followUpSection = document.getElementById('follow-up-section');
    const loading = document.getElementById('question-loading');
    
    if (!questionInput || !questionInput.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('questions');
        return;
    }
    
    const question = questionInput.value.trim();
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (askBtn) {
            askBtn.disabled = true;
            askBtn.textContent = '–ü–æ–ª—É—á–∞—é –æ—Ç–≤–µ—Ç...';
        }
        if (loading) loading.style.display = 'block';
        if (firstAnswerSection) firstAnswerSection.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const cardData = await getAnswerCard(question);
        
        if (cardData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            const answerCard = document.getElementById('answer-card');
            if (answerCard) {
                updateCardDisplay(answerCard, cardData);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç –ò–ò
            const interpretation = await getAIInterpretation(cardData, 'question', question);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            const aiContainer = document.getElementById('first-ai-container');
            if (aiContainer && interpretation) {
                aiContainer.innerHTML = createAIResponseHTML(interpretation);
            }
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ Premium)
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                updateQuestionsCounter();
                saveUserData();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if (followUpSection) {
                followUpSection.style.display = 'block';
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            questionInput.value = '';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'question',
                question: question,
                card: cardData,
                interpretation: interpretation,
                timestamp: new Date().toISOString()
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        if (askBtn) {
            askBtn.disabled = false;
            askBtn.textContent = '–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç ‚ú®';
        }
        if (loading) loading.style.display = 'none';
    }
}

// üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö –£–¢–û–ß–ù–Ø–Æ–©–ï–ì–û –í–û–ü–†–û–°–ê
async function handleFollowUpQuestion() {
    console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
    
    const followupInput = document.getElementById('followup-input');
    const followUpBtn = document.getElementById('follow-up-btn');
    const followupAnswerSection = document.getElementById('followup-answer-section');
    const loading = document.getElementById('followup-loading');
    
    if (!followupInput || !followupInput.value.trim()) {
        showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ (—É—Ç–æ—á–Ω—è—é—â–∏–µ —Ç–æ–∂–µ —Å—á–∏—Ç–∞—é—Ç—Å—è)
    if (!appState.isPremium && appState.questionsLeft <= 0) {
        showPremiumRequired('questions');
        return;
    }
    
    const question = followupInput.value.trim();
    
    try {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if (followUpBtn) {
            followUpBtn.disabled = true;
            followUpBtn.textContent = '–£—Ç–æ—á–Ω—è—é...';
        }
        if (loading) loading.style.display = 'block';
        if (followupAnswerSection) followupAnswerSection.style.display = 'block';
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const cardData = await getAnswerCard(question);
        
        if (cardData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            const followupCard = document.getElementById('followup-card');
            if (followupCard) {
                updateCardDisplay(followupCard, cardData);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ—Ç –ò–ò
            const interpretation = await getAIInterpretation(cardData, 'followup', question);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
            const aiContainer = document.getElementById('followup-ai-container');
            if (aiContainer && interpretation) {
                aiContainer.innerHTML = createAIResponseHTML(interpretation);
            }
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ Premium)
            if (!appState.isPremium) {
                appState.questionsLeft = Math.max(0, appState.questionsLeft - 1);
                updateQuestionsCounter();
                saveUserData();
            }
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            followupInput.value = '';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            saveToHistory({
                type: 'followup',
                question: question,
                card: cardData,
                interpretation: interpretation,
                timestamp: new Date().toISOString()
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
        showErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        if (followUpBtn) {
            followUpBtn.disabled = false;
            followUpBtn.textContent = '–£—Ç–æ—á–Ω–∏—Ç—å ‚ú®';
        }
        if (loading) loading.style.display = 'none';
