// ========================================================================
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SCRIPT.JS - –®—ë–ø–æ—Ç –∫–∞—Ä—Ç (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
// ========================================================================

// üåü –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
let appState = {
    dailyCardUsed: false,
    lastCardDate: null,
    questionsUsed: 0,
    isPremium: false,
    freeQuestionsLimit: 3,
    history: [],
    reviews: []
};

// üì¶ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
let allCards = [];
let isInitialized = false;
let currentRating = 0;
let initAppCalled = false; // Prevent double initialization

// üéØ DOM –≠–õ–ï–ú–ï–ù–¢–´
let mainNav, secondaryNav, tabContents;
let tarotCard, cardBack, cardFront;
let cardInfoAfterFlip, flippedCardName, cardIntroText;
let aiAnswerContainer, aiInterpretationTitle, aiInterpretationTextElement;
let afterDailyCardBanner, askMoreQuestionsBtn, premiumBannerBtn;
let starAnimationContainer, questionsLeftElement;
let questionTextarea, submitQuestionBtn, charCounter;
let loadingState, questionAnswerContainer, questionAnswerText;
let premiumTestToggle, premiumTestLabel;
let clarifyingQuestionContainer, clarifyingQuestionTextarea, submitClarifyingQuestionBtn, clarifyingQuestionWarning;
let questionAnimationContainer, questionStarAnimationContainer, questionIntroText;
let questionCardContainer, questionTarotCard, questionCardInfoAfterFlip, questionFlippedCardName;
let spreadsGrid, spreadResult, spreadResultTitle, backToSpreadsBtn;
let spreadAnimationContainer, spreadIntroText, spreadCardsContainer, spreadCardsLayout;
let spreadAnswerContainer, spreadAnswerText;

// üîÆ –í–†–ï–ú–ï–ù–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ò–ò-–û–¢–í–ï–¢–ê

// üìù –†–ê–ù–î–û–ú–ù–´–ï –¢–ï–ö–°–¢–´ –ü–ï–†–ï–î –ò–ò-–ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ï–ô
const preInterpretationPhrases = [
    "–°–µ–π—á–∞—Å —É–∑–Ω–∞–µ–º, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è...",
    "–ü—Ä–∏–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω—ã –¥–Ω—è...",
    "–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä—É–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ –í—Å–µ–ª–µ–Ω–Ω–æ–π...",
    "–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª?",
    "–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –≥–ª—É–±–∏–Ω—ã –º—É–¥—Ä–æ—Å—Ç–∏ –¢–∞—Ä–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –±—É–¥—É—â–µ–µ..."
];

// üîÆ –†–ê–ù–î–û–ú–ù–´–ï –¢–ï–ö–°–¢–´ –î–õ–Ø –í–û–ü–†–û–°–û–í
const questionPreInterpretationPhrases = [
    "–°–µ–π—á–∞—Å –ø–æ—á—É–≤—Å—Ç–≤—É–µ–º, —á—Ç–æ —Å–∫–∞–∂—É—Ç –∫–∞—Ä—Ç—ã...",
    "–ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –¥–∞—Ç—å –≤–∞–º –æ—Ç–≤–µ—Ç...",
    "–¢–∞–π–Ω—ã–µ —Å–∏–ª—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤–æ–µ–¥–∏–Ω–æ...",
    "–í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –ø–æ—Å–ª–∞–Ω–∏–µ...",
    "–≠–Ω–µ—Ä–≥–∏–∏ –∫–∞—Ä—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ...",
    "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã..."
];

// üë§ –ú–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ò–ú–ï–ù–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
const mysticalNames = [
    "–°—Ç—Ä–∞–Ω–Ω–∏–∫", "–ü—É—Ç–Ω–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å", "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥–æ—Å—Ç—å", "–ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
    "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫", "–ò—â—É—â–∏–π –∏—Å—Ç–∏–Ω—É", "–°—Ç—Ä–∞–Ω—Å—Ç–≤—É—é—â–∏–π –º—É–¥—Ä–µ—Ü", "–¢–∞–π–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å",
    "–õ—É–Ω–Ω—ã–π –ø—É—Ç–Ω–∏–∫", "–ó–≤–µ–∑–¥–æ—á–µ—Ç", "–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–Ω", "–ú—É–¥—Ä—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å —Å–≤–µ—Ç–∞",
    "–ù–æ—á–Ω–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–°–ª–µ–¥–æ–ø—ã—Ç —Å—É–¥—å–±—ã", "–°—Ç—Ä–∞–Ω–Ω–∏–∫ –º–∏—Ä–æ–≤", "–ú–∏—Å—Ç–∏–∫",
    "–î—É—à–∞-—Å–∫–∏—Ç–∞–ª–µ—Ü", "–ü–æ–∑–Ω–∞—é—â–∏–π", "–í–µ—á–Ω—ã–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π"
];

// üé¥ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –†–ê–°–ö–õ–ê–î–û–í
const SPREAD_CONFIGS = {
    success: {
        name: "–†–∞—Å–∫–ª–∞–¥ ¬´–ü—É—Ç—å –∫ —É—Å–ø–µ—Ö—É¬ª",
        description: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Ü–µ–ª–∏",
        cards: [
            { position: "top", label: "–¶–µ–ª—å", description: "–ß–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å" },
            { position: "left", label: "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ", description: "–ß—Ç–æ –º–µ—à–∞–µ—Ç –≤–∞–º" },
            { position: "center", label: "–ù–∞—Å—Ç–æ—è—â–µ–µ", description: "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ" },
            { position: "right", label: "–ü–æ–º–æ—â—å", description: "–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º" },
            { position: "bottom", label: "–†–µ–∑—É–ª—å—Ç–∞—Ç", description: "–ö —á–µ–º—É —ç—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç" }
        ],
        layout: "success-layout"
    },
    love: {
        name: "–†–∞—Å–∫–ª–∞–¥ ¬´–û—Ç–Ω–æ—à–µ–Ω–∏—è¬ª",
        description: "–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
        cards: [
            { position: "me", label: "–í—ã", description: "–í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" },
            { position: "partner", label: "–ü–∞—Ä—Ç–Ω–µ—Ä", description: "–ß—É–≤—Å—Ç–≤–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞" },
            { position: "relationship", label: "–û—Ç–Ω–æ—à–µ–Ω–∏—è", description: "–û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã" }
        ],
        layout: "love-layout"
    },
    money: {
        name: "–†–∞—Å–∫–ª–∞–¥ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª",
        description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏",
        cards: [
            { position: "current", label: "–¢–µ–∫—É—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å—ã", description: "–í–∞—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å" },
            { position: "opportunities", label: "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", description: "–°–ø–æ—Å–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã" },
            { position: "advice", label: "–°–æ–≤–µ—Ç", description: "–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–Ω—å–≥–∞–º–∏" },
            { position: "future", label: "–ë—É–¥—É—â–µ–µ", description: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã" }
        ],
        layout: "money-layout"
    },
    growth: {
        name: "–†–∞—Å–∫–ª–∞–¥ ¬´–õ–∏—á–Ω—ã–π —Ä–æ—Å—Ç¬ª", 
        description: "–ü–æ–º–æ–≥–∞–µ—Ç –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞",
        cards: [
            { position: "past", label: "–ü—Ä–æ—à–ª–æ–µ", description: "–ß—Ç–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–æ –≤–∞—Å" },
            { position: "present", label: "–ù–∞—Å—Ç–æ—è—â–µ–µ", description: "–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" },
            { position: "potential", label: "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª", description: "–í–∞—à–∏ —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" },
            { position: "future", label: "–ë—É–¥—É—â–µ–µ", description: "–ö—É–¥–∞ –≤–µ–¥–µ—Ç –≤–∞—à –ø—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è" }
        ],
        layout: "growth-layout"
    }
};

// ========================================================================
// üíæ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú
// ========================================================================

async function saveAppState() {
    try {
        console.log('üîÑ saveAppState: –ø—Ä–æ–≤–µ—Ä–∫–∞ TarotDB...', {
            tarotDBExists: !!window.TarotDB,
            isConnected: window.TarotDB ? window.TarotDB.isConnected() : false,
            connectionStatus: window.TarotDB ? window.TarotDB.getStatus() : null
        });
        
        if (window.TarotDB && window.TarotDB.isConnected()) {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase —á–µ—Ä–µ–∑ TarotDB...');
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (window.TarotDB.syncUserDataToSupabase) {
                await window.TarotDB.syncUserDataToSupabase(getUserId(), {
                    questionsUsed: appState.questionsUsed,
                    isPremium: appState.isPremium,
                    dailyCardUsed: appState.dailyCardUsed,
                    lastCardDay: appState.lastCardDate
                });
            } else {
                // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
                await window.TarotDB.updateUserProfile(getUserId(), {
                    last_card_day: appState.lastCardDate,
                    questions_used: appState.questionsUsed, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å total_questions –Ω–∞ questions_used
                    is_subscribed: appState.isPremium,
                    free_predictions_left: Math.max(0, appState.freeQuestionsLimit - appState.questionsUsed)
                });
            }
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Supabase');
        } else {
            console.log('üì± TarotDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
            // –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
            saveAppStateLocally();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        // Fallback –∫ localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
        saveAppStateLocally();
    }
}

function getUserId() {
    const telegramId = getTelegramUserId();
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —á–∏—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    const userId = telegramId ? String(telegramId).trim() : 'anonymous_user';
    console.log('üÜî getUserId:', { telegramId, userId: userId });
    return userId;
}

function saveAppStateLocally() {
    try {
        localStorage.setItem('tarotAppState', JSON.stringify(appState));
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
}

async function loadAppState() {
    try {
        if (window.TarotDB && window.TarotDB.isConnected()) {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const userProfile = await window.TarotDB.getUserProfile(getUserId());
            if (userProfile) {
                appState.dailyCardUsed = userProfile.last_card_day === new Date().toISOString().split('T')[0];
                appState.lastCardDate = userProfile.last_card_day;
                appState.questionsUsed = userProfile.total_questions || 0;
                appState.isPremium = userProfile.is_subscribed || false;
                appState.freeQuestionsLimit = 3; // –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
                
                console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Supabase:', {
                    dailyCardUsed: appState.dailyCardUsed,
                    questionsUsed: appState.questionsUsed,
                    isPremium: appState.isPremium,
                    historyLength: appState.history.length,
                    reviewsLength: appState.reviews.length
                });
            } else {
                console.warn('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                await loadAppStateLocally();
            }
        } else {
            // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
            await loadAppStateLocally();
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        await cleanOldHistoryItems();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        // Fallback –∫ localStorage
        await loadAppStateLocally();
    }
}

async function loadAppStateLocally() {
    try {
        const saved = localStorage.getItem('tarotAppState');
        if (saved) {
            const parsedState = JSON.parse(saved);
            
            // –ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            appState = {
                ...appState,
                ...parsedState,
                history: parsedState.history || appState.history,
                reviews: parsedState.reviews || appState.reviews
            };
            
            console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        } else {
            console.warn('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await saveAppState();
    }
}

async function cleanOldHistoryItems() {
    if (!appState.history || appState.history.length === 0) {
        return;
    }
    
    const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const initialCount = appState.history.length;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–µ–µ 30 –¥–Ω–µ–π
    appState.history = appState.history.filter(item => {
        // –ï—Å–ª–∏ –Ω–µ—Ç timestamp (—Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ø–æ–∫–∞ —á—Ç–æ
        if (!item.timestamp) {
            return true;
        }
        
        return item.timestamp > thirtyDaysAgo;
    });
    
    const removedCount = initialCount - appState.history.length;
    
    if (removedCount > 0) {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${removedCount} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π`);
        await saveAppState(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }
}

// ========================================================================
// üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ========================================================================

function showMessage(message, type = 'info', duration = 3000) {
    console.log(`${type.toUpperCase()}: ${message}`);
    
    const toast = document.getElementById('toast');
    if (!toast) {
        console.warn('Toast —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    toast.textContent = message;
    toast.className = `toast ${type}`;
    toast.classList.remove('hidden');

    setTimeout(() => {
        toast.classList.add('hidden');
    }, duration);
}

// ========================================================================
// üÉè –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ö–ê–†–¢ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// ========================================================================

async function loadCards() {
    try {
        console.log('üÉè –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç —á–µ—Ä–µ–∑ API...');
        
        // 1. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à API
        try {
            const response = await fetch('/api/cards', {
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (response.ok) {
                const apiData = await response.json();
                
                if (apiData.success && apiData.cards && Array.isArray(apiData.cards) && apiData.cards.length > 0) {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∏–∑ API
                    allCards = apiData.cards.map(card => {
                        const processedCard = { ...card };
                        
                        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                        if (card.image) {
                            processedCard.image = normalizeImagePath(card.image);
                        }
                        if (card.imageUpright) {
                            processedCard.imageUpright = normalizeImagePath(card.imageUpright);
                        }
                        if (card.imageReversed) {
                            processedCard.imageReversed = normalizeImagePath(card.imageReversed);
                        }
                        
                        return processedCard;
                    });
                    
                    console.log(`‚úÖ –ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ API (${apiData.source}):`, allCards.length);
                    console.log('üìä –°—Ç–∞—Ç—É—Å –∫—ç—à–∞:', apiData.cached ? 'HIT' : 'MISS');
                    if (apiData.stale) {
                        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                    }
                    
                    return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ API
                }
            }
            
            console.warn('‚ö†Ô∏è API –∫–∞—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É');
        } catch (apiError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∫–∞—Ä—Ç:', apiError.message);
        }
        
        // 2. Fallback - –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        const possiblePaths = [
            './cards.json',
            '/cards.json',
            'cards.json'
        ];
        
        let cardsLoaded = false;
        
        for (const path of possiblePaths) {
            try {
                console.log(`Fallback –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑: ${path}`);
                const response = await fetch(path);
                
                if (response.ok) {
                    const cardsData = await response.json();
                    
                    if (cardsData && Array.isArray(cardsData) && cardsData.length > 0) {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                        allCards = cardsData.map(card => {
                            const processedCard = { ...card };
                            
                            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                            if (card.image) {
                                processedCard.image = normalizeImagePath(card.image);
                            }
                            if (card.imageUpright) {
                                processedCard.imageUpright = normalizeImagePath(card.imageUpright);
                            }
                            if (card.imageReversed) {
                                processedCard.imageReversed = normalizeImagePath(card.imageReversed);
                            }
                            
                            return processedCard;
                        });
                        
                        console.log(`‚úÖ –ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ${path}:`, allCards.length);
                        
                        cardsLoaded = true;
                        break;
                    }
                }
            } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${path}:`, error.message);
            }
        }
        
        if (!cardsLoaded) {
            throw new Error('–í—Å–µ –ø—É—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –Ω–µ —É–¥–∞–ª–∏—Å—å');
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ:', error);
        allCards = getBuiltInCards();
        console.log('‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allCards.length);
    }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
function normalizeImagePath(imagePath) {
    if (!imagePath) return null;
    
    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
        return imagePath;
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
    if (imagePath.startsWith('/')) {
        imagePath = imagePath.substring(1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º ./ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!imagePath.startsWith('./')) {
        imagePath = './' + imagePath;
    }
    
    return imagePath;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ placeholder –¥–ª—è –∫–∞—Ä—Ç—ã
function createCardPlaceholder(card) {
    const symbol = card.symbol || 'üîÆ';
    const name = encodeURIComponent(card.name || '–ö–∞—Ä—Ç–∞');
    const colors = [
        '4B0082/FFD700', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π/–ó–æ–ª–æ—Ç–æ–π
        '663399/FF69B4', // –ü—É—Ä–ø—É—Ä–Ω—ã–π/–†–æ–∑–æ–≤—ã–π  
        '2E8B57/98FB98', // –ó–µ–ª–µ–Ω—ã–π/–°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        '8B0000/FFA500', // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π/–û—Ä–∞–Ω–∂–µ–≤—ã–π
        '191970/87CEEB', // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π/–ì–æ–ª—É–±–æ–π
        '800080/DDA0DD'  // –ü—É—Ä–ø—É—Ä–Ω—ã–π/–°–ª–∏–≤–æ–≤—ã–π
    ];
    
    const colorPair = colors[Math.floor(Math.random() * colors.length)];
    
    return `data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='180' height='270' viewBox='0 0 180 270'><rect width='180' height='270' fill='%238A2BE2'/><text x='90' y='120' text-anchor='middle' fill='white' font-size='32'>${symbol}</text><text x='90' y='160' text-anchor='middle' fill='white' font-size='14' font-family='Arial'>${card.name || '–ö–∞—Ä—Ç–∞'}</text></svg>`;
}

// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function getBuiltInCards() {
    const baseCards = [
        {
            id: "built_in_1",
            name: "–ó–≤–µ–∑–¥–∞",
            symbol: "‚≠ê",
            meaningUpright: "–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ",
            description: "–ö–∞—Ä—Ç–∞ –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        },
        {
            id: "built_in_2", 
            name: "–°–æ–ª–Ω—Ü–µ",
            symbol: "‚òÄÔ∏è",
            meaningUpright: "–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞",
            description: "–°–∏–º–≤–æ–ª —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∞. –í–ø–µ—Ä–µ–¥–∏ —Å–≤–µ—Ç–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞, –ø–æ–ª–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."
        },
        {
            id: "built_in_3",
            name: "–õ—É–Ω–∞", 
            symbol: "üåô",
            meaningUpright: "–ò–ª–ª—é–∑–∏–∏, –∏–Ω—Ç—É–∏—Ü–∏—è, —Å—Ç—Ä–∞—Ö–∏",
            description: "–ö–∞—Ä—Ç–∞ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —Ç–∞–π–Ω. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É –∏ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º —Å—É–¥—å–±—ã."
        },
        {
            id: "built_in_4",
            name: "–ú–∞–≥",
            symbol: "üîÆ",
            meaningUpright: "–°–∏–ª–∞ –≤–æ–ª–∏, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
            description: "–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é."
        },
        {
            id: "built_in_5",
            name: "–î—É—Ä–∞–∫",
            symbol: "üÉè",
            meaningUpright: "–ù–∞—á–∞–ª–æ, –Ω–µ–≤–∏–Ω–Ω–æ—Å—Ç—å, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å",
            description: "–ö–∞—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π. –°–º–µ–ª–æ –∏–¥–∏—Ç–µ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É - –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è."
        },
        {
            id: "built_in_6",
            name: "–°–∏–ª–∞",
            symbol: "ü¶Å",
            meaningUpright: "–ú—É–∂–µ—Å—Ç–≤–æ, —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞",
            description: "–ò—Å—Ç–∏–Ω–Ω–∞—è —Å–∏–ª–∞ –≤ –º—è–≥–∫–æ—Å—Ç–∏. –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–ª–µ –¥—É—Ö–∞."
        },
        {
            id: "built_in_7",
            name: "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã",
            symbol: "üé°",
            meaningUpright: "–£–¥–∞—á–∞, —Ü–∏–∫–ª—ã, —Å—É–¥—å–±–∞",
            description: "–ö–æ–ª–µ—Å–æ —Å—É–¥—å–±—ã –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É. –í—Ä–µ–º—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
        },
        {
            id: "built_in_8",
            name: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
            symbol: "üëë",
            meaningUpright: "–ò–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, –ø—Ä–∏—Ä–æ–¥–∞",
            description: "–í—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –∏–∑–æ–±–∏–ª–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ —Ä–∞—Å—Ü–≤–µ—Å—Ç–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π –∂–∏–∑–Ω–∏."
        },
        {
            id: "built_in_9",
            name: "–ë–∞—à–Ω—è",
            symbol: "üèóÔ∏è",
            meaningUpright: "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ, –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–µ, –∏—Å—Ç–∏–Ω–∞",
            description: "–°—Ç–∞—Ä—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—É—à–∞—Ç—Å—è, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ. –ü—Ä–∏–º–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω—ã –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞."
        },
        {
            id: "built_in_10",
            name: "–°–º–µ—Ä—Ç—å",
            symbol: "üíÄ",
            meaningUpright: "–ö–æ–Ω–µ—Ü, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–µ",
            description: "–í—Ä–µ–º—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—à–ª–æ–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Ä–æ–≥—É –±—É–¥—É—â–µ–º—É."
        }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç
    return baseCards.map(card => ({
        ...card,
        image: createCardPlaceholder(card)
    }));
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Promise
async function loadImageAsync(imageSrc) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageSrc);
            resolve(img);
        };
        img.onerror = () => {
            console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageSrc);
            reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageSrc}`));
        };
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        setTimeout(() => {
            reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageSrc}`));
        }, 5000);
        
        img.src = encodeURI(imageSrc);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkImageAvailability(imagePath) {
    return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => resolve(true);
        img.onerror = () => resolve(false);
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∫–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        img.src = encodeURI(imagePath);
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        setTimeout(() => resolve(false), 3000);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
function getRandomCard() {
    if (!allCards || allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ');
        allCards = getBuiltInCards();
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    const baseCard = allCards[Math.floor(Math.random() * allCards.length)];
    const randomCard = { ...baseCard };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    randomCard.isReversed = Math.random() < 0.5;

    // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (randomCard.isReversed && randomCard.imageReversed) {
        randomCard.displayImage = randomCard.imageReversed;
    } else if (!randomCard.isReversed && randomCard.imageUpright) {
        randomCard.displayImage = randomCard.imageUpright;
    } else if (randomCard.image) {
        randomCard.displayImage = randomCard.image;
    } else {
        // Fallback –∫ placeholder
        randomCard.displayImage = createCardPlaceholder(randomCard);
    }
    
    console.log(`üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞: ${randomCard.name} (${randomCard.isReversed ? '–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' : '–ü—Ä—è–º–∞—è'})`);
    console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${randomCard.displayImage}`);
    
    return randomCard;
}

// ========================================================================
// üé® –ê–ù–ò–ú–ê–¶–ò–ò –ò –≠–§–§–ï–ö–¢–´
// ========================================================================

function animateStars(count = 3, container = starAnimationContainer) {
    if (!container) return;
    
    container.innerHTML = '';
    const stars = ['‚ú®', 'üåü', 'üí´'];
    const positions = [
        { x: '10%', y: '20%' },
        { x: '15%', y: '80%' },
        { x: '80%', y: '50%' }
    ];

    for (let i = 0; i < count; i++) {
        const star = document.createElement('span');
        star.textContent = stars[i % stars.length];
        star.classList.add('sparkle-star');
        
        star.style.left = positions[i].x;
        star.style.top = positions[i].y;
        star.style.animationDelay = `${i * 0.1}s`;
        star.style.animationDuration = `${0.8 + Math.random() * 0.4}s`;
        
        container.appendChild(star);
    }
}

function typeText(element, text, speed = 15) {
    if (!element) return Promise.resolve();
    
    let i = 0;
    element.textContent = '';
    element.classList.remove('finished-typing');

    return new Promise(resolve => {
        function typeChar() {
            if (i < text.length) {
                element.textContent += text.charAt(i);
                i++;
                setTimeout(typeChar, speed);
            } else {
                element.classList.add('finished-typing');
                resolve();
            }
        }
        typeChar();
    });
}

// ========================================================================
// üîÑ –ù–ê–í–ò–ì–ê–¶–ò–Ø
// ========================================================================

function switchTab(tabId) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    tabContents.forEach(content => {
        content.classList.remove('active');
        content.classList.add('hidden');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const targetTab = document.getElementById(tabId);
    if (targetTab) {
        targetTab.classList.add('active');
        targetTab.classList.remove('hidden');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const allNavTabs = document.querySelectorAll('.nav-tab');
    allNavTabs.forEach(tab => tab.classList.remove('active'));

    const targetNavTab = document.querySelector(`.nav-tab[data-tab="${tabId}"]`);
    if (targetNavTab) {
        targetNavTab.classList.add('active');
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
    if (tabId !== 'daily-card') {
        resetDailyCardVisualState();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
    if (tabId !== 'question') {
        resetQuestionState();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
    if (tabId !== 'spreads') {
        resetSpreadState();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    if (tabId === 'question') {
        updateQuestionsCounter();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∏—Å—Ç–æ—Ä–∏–∏
    if (tabId === 'history') {
        updateHistoryDisplay();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤
    if (tabId === 'reviews') {
        updateReviewsDisplay();
    }
}

function resetDailyCardVisualState() {
    if (!tarotCard) return;
    
    tarotCard.classList.remove('flipped');
    cardFront?.classList.add('hidden');
    cardBack?.classList.remove('hidden');
    cardInfoAfterFlip?.classList.add('hidden');
    
    if (cardIntroText) cardIntroText.textContent = '';
    
    aiAnswerContainer?.classList.remove('show');
    aiAnswerContainer?.classList.add('hidden');
    
    afterDailyCardBanner?.classList.remove('show');
    afterDailyCardBanner?.classList.add('hidden');
    
    if (aiInterpretationTextElement) {
        aiInterpretationTextElement.textContent = '';
        aiInterpretationTextElement.classList.remove('finished-typing');
    }
    
    if (starAnimationContainer) {
        starAnimationContainer.innerHTML = '';
    }
}

async function resetDailyCardState() {
    resetDailyCardVisualState();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    const today = new Date().toDateString();
    if (appState.lastCardDate !== today) {
        appState.dailyCardUsed = false;
        await saveAppState();
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è');
    }
}

function resetQuestionState() {
    console.log('üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    questionAnimationContainer?.classList.add('hidden');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    questionCardContainer?.classList.add('hidden');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    if (questionTarotCard) {
        questionTarotCard.classList.remove('flipped');
        questionTarotCard.querySelector('.card-front')?.classList.add('hidden');
        questionTarotCard.querySelector('.card-back')?.classList.remove('hidden');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
    questionCardInfoAfterFlip?.classList.add('hidden');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    questionAnswerContainer?.classList.remove('show');
    questionAnswerContainer?.classList.add('hidden');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    clarifyingQuestionContainer?.classList.add('hidden');
    clarifyingQuestionWarning?.classList.add('hidden');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—ã
    if (questionIntroText) questionIntroText.textContent = '';
    if (questionFlippedCardName) questionFlippedCardName.textContent = '';
    if (questionAnswerText) {
        questionAnswerText.textContent = '';
        questionAnswerText.classList.remove('finished-typing');
    }
    
    // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    if (questionStarAnimationContainer) {
        questionStarAnimationContainer.innerHTML = '';
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É
    loadingState?.classList.add('hidden');
}

function resetQuestionAnswerOnly() {
    console.log('üîÑ –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    questionAnswerContainer?.classList.remove('show');
    questionAnswerContainer?.classList.add('hidden');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if (questionAnswerText) {
        questionAnswerText.textContent = '';
        questionAnswerText.classList.remove('finished-typing');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É –∫–∞—Ä—Ç—É –≤–∏–¥–∏–º–æ–π)
    questionCardInfoAfterFlip?.classList.add('hidden');
    
    // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
    if (questionFlippedCardName) questionFlippedCardName.textContent = '';
}

// ========================================================================
// ========================================================================
// ü§ñ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô –ß–ï–†–ï–ó API

async function generatePredictionAPI(card, question) {
    try {
        const userData = {
            user_id: appState.telegramUser?.id || 'webapp_user',
            userName: appState.telegramUser?.first_name || '–ì–æ—Å—Ç—å'
        };

        const response = await fetch('/api/generate-prediction', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                user_id: userData.user_id,
                userName: userData.userName,
                question: question,
                cards: card, // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É –∫–∞—Ä—Ç—É, —Ç–∞–∫ –∏ –º–∞—Å—Å–∏–≤
                type: 'single_card'
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        
        if (!result.success || !result.prediction) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }

        return result.prediction;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
        throw error;
    }
}

// üÉè –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–†–¢–´ –î–ù–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–û –° –£–õ–£–ß–®–ï–ù–ù–û–ô –ó–ê–ì–†–£–ó–ö–û–ô –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô)
// ========================================================================

async function handleDailyCardClick() {
    console.log('üÉè –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –¥–Ω—è');
    
    if (appState.dailyCardUsed) {
        showMessage('–ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∑–∞–≤—Ç—Ä–∞.', 'info');
        return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞
    await resetDailyCardState();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –ø—Ä—è–º–æ –Ω–∞ —Ä—É–±–∞—à–∫–µ –∫–∞—Ä—Ç—ã
    animateStars(3, starAnimationContainer);

    // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–≤–µ–∑–¥–æ—á–µ–∫, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
    setTimeout(() => {
        tarotCard.classList.add('flipped');
    }, 1000);

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    const randomCard = getRandomCard();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –ø–æ–ª–æ–≤–∏–Ω—É –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(async () => {
        starAnimationContainer.innerHTML = '';
        
        if (randomCard.displayImage) {
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ background-image –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å 3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
            const cardFront = tarotCard?.querySelector('.card-front');
            const cardBack = tarotCard?.querySelector('.card-back');
            
            if (cardFront && cardBack) {
                try {
                    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', randomCard.displayImage);
                    
                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    await loadImageAsync(randomCard.displayImage);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${encodeURI(randomCard.displayImage)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    console.log('üé® Background-image —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', cardFront.style.backgroundImage);
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    tarotCard.classList.add('flipped');
                    console.log('üîÑ –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞, flipped –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω');
                    
                    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                    setTimeout(() => {
                        cardFront.classList.remove('hidden');
                        cardBack.classList.add('hidden');
                        
                        console.log('üëÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - cardFront hidden:', cardFront.classList.contains('hidden'));
                        console.log('üëÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - cardBack hidden:', cardBack.classList.contains('hidden'));
                        console.log('üîç Computed styles - display:', window.getComputedStyle(cardFront).display);
                        console.log('üîç Computed styles - background-image:', window.getComputedStyle(cardFront).backgroundImage);
                    }, 400); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ cardFlip (0.8s / 2 = 0.4s)
                    
                } catch (error) {
                    console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder:', error);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${createCardPlaceholder(randomCard)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å placeholder
                    tarotCard.classList.add('flipped');
                    
                    setTimeout(() => {
                        cardFront.classList.remove('hidden');
                        cardBack.classList.add('hidden');
                    }, 400);
                }
            }
        }
        
        console.log('üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç—ã');
        
        // –ë–µ—Ä—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å—Ç–æ—Ä–æ–Ω—ã
        const card = tarotCard;                          // #tarotCard
        const front = card?.querySelector('.card-front');
        const back  = card?.querySelector('.card-back');

        if (!card || !front || !back) return;

        // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ CSS-–∫–ª–∞—Å—Å—ã
        front.classList.remove('hidden');
        back.classList.add('hidden');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow –¥–ª—è WebKit
        void front.offsetHeight;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º 3D-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        requestAnimationFrame(() => {
            card.classList.add('flipped');
            // –ú–∏–∫—Ä–æ-—Å–¥–≤–∏–≥ –¥–ª—è WebKit 3D-—Å–ª–æ—è
            front.style.transform = 'rotateY(180deg) translateZ(0)';
        });
        
        console.log('‚úÖ [–ö–ê–†–¢–ê –î–ù–Ø] –ö–ª–∞—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã - cardFront hidden:', front?.classList.contains('hidden'));
        console.log('‚úÖ [–ö–ê–†–¢–ê –î–ù–Ø] –ö–ª–∞—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã - cardBack hidden:', back?.classList.contains('hidden'));
        console.log('üé® [–ö–ê–†–¢–ê –î–ù–Ø] Background-image:', front?.style.backgroundImage || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }, 400);

    // –ü–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    setTimeout(async () => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –∫–∞—Ä—Ç—ã
        if (flippedCardName) {
            const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
            flippedCardName.textContent = `${randomCard.name}${orientationText} ${randomCard.symbol || ''}`;
        }
        cardInfoAfterFlip?.classList.remove('hidden');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        const randomPrePhrase = preInterpretationPhrases[Math.floor(Math.random() * preInterpretationPhrases.length)];
        if (cardIntroText) {
            cardIntroText.textContent = randomPrePhrase;
            cardIntroText.classList.remove('hidden');
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        if (aiInterpretationTitle) {
            aiInterpretationTitle.textContent = '–ò–ò-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è üîÆ';
        }

        aiAnswerContainer?.classList.remove('hidden');
        aiAnswerContainer?.classList.add('show');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        let interpretationText;
        try {
            console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–Ω—è —á–µ—Ä–µ–∑ API...');
            interpretationText = await generatePredictionAPI(randomCard, '–∫–∞—Ä—Ç–∞ –¥–Ω—è');
            console.log('‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è –ø–æ–ª—É—á–µ–Ω–∞:', interpretationText.substring(0, 100) + '...');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
            // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretationText = randomCard.description || '–ö–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è';
        }
        
        await typeText(aiInterpretationTextElement, interpretationText);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
        setTimeout(() => {
            afterDailyCardBanner?.classList.remove('hidden');
            afterDailyCardBanner?.classList.add('show');
        }, 500);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –≤ Supabase
        try {
            if (window.TarotDB && window.TarotDB.isConnected()) {
                const cardData = {
                    id: randomCard.id,
                    name: randomCard.name,
                    image: randomCard.displayImage,
                    description: randomCard.description,
                    interpretation: interpretationText
                };
                await window.TarotDB.saveDailyCard(getUserId(), cardData);
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await addToHistory('daily-card', randomCard.name, interpretationText);
        
    }, 800);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    appState.dailyCardUsed = true;
    appState.lastCardDate = new Date().toDateString();
    await saveAppState();
}

// ========================================================================
// ‚ùì –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–û–í
// ========================================================================

function updateQuestionsCounter() {
    if (!questionsLeftElement) return;

    if (appState.isPremium) {
        questionsLeftElement.textContent = '–í–æ–ø—Ä–æ—Å—ã: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ';
        questionsLeftElement.style.color = 'var(--accent-gold)';
        return;
    }
    
    const remaining = Math.max(0, appState.freeQuestionsLimit - appState.questionsUsed);
    questionsLeftElement.textContent = `–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${remaining}`;
    
    if (remaining === 0) {
        questionsLeftElement.textContent = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium!';
        questionsLeftElement.style.color = '#ff6b6b';
    } else {
        questionsLeftElement.style.color = 'var(--primary-text)';
    }
}

function handleQuestionInput() {
    if (!questionTextarea || !charCounter || !submitQuestionBtn) return;
    
    const text = questionTextarea.value;
    const length = text.length;
    
    charCounter.textContent = `${length}/200`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const canAsk = length > 0 && length <= 200 && 
                  (appState.isPremium || appState.questionsUsed < appState.freeQuestionsLimit);
    
    submitQuestionBtn.disabled = !canAsk;
    
    if (length > 200) {
        charCounter.style.color = '#ff6b6b';
    } else {
        charCounter.style.color = '#b0b0b0';
    }
}

async function handleAskQuestion() {
    if (!questionTextarea) return;
    
    const question = questionTextarea.value.trim();
    
    if (!question) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å', 'error');
        return;
    }
    
    if (!appState.isPremium && appState.questionsUsed >= appState.freeQuestionsLimit) {
        showMessage('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!', 'error');
        return;
    }
    
    console.log('üîÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    resetQuestionState();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
    submitQuestionBtn.disabled = true;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const randomCard = getRandomCard();
    
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    questionAnimationContainer?.classList.remove('hidden');
    const randomPrePhrase = questionPreInterpretationPhrases[Math.floor(Math.random() * questionPreInterpretationPhrases.length)];
    if (questionIntroText) {
        questionIntroText.textContent = randomPrePhrase;
        questionIntroText.classList.remove('hidden');
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    try {
        // 2. –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä—É–±–∞—à–∫–æ–π —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        questionAnimationContainer?.classList.add('hidden');
        questionCardContainer?.classList.remove('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —Ä—É–±–∞—à–∫–µ –∫–∞—Ä—Ç—ã
        animateStars(3, questionStarAnimationContainer);
        
        // 3. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ 1200ms (–≤—Ä–µ–º—è –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫)
        setTimeout(async () => {
            // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
            questionTarotCard?.classList.add('flipped');
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ background-image –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å 3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
            const cardFront = questionTarotCard?.querySelector('.card-front');
            const cardBack = questionTarotCard?.querySelector('.card-back');
            
            if (cardFront && cardBack) {
                try {
                    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', randomCard.displayImage);
                    
                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
                    await loadImageAsync(randomCard.displayImage);
                    
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${encodeURI(randomCard.displayImage)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    console.log('üé® Background-image —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', cardFront.style.backgroundImage);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cardFront.classList.remove('hidden');
                    cardBack.classList.add('hidden');
                    
                    console.log('üëÅÔ∏è [–í–û–ü–†–û–°] –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - cardFront hidden:', cardFront.classList.contains('hidden'));
                    console.log('üëÅÔ∏è [–í–û–ü–†–û–°] –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ - cardBack hidden:', cardBack.classList.contains('hidden'));
                    console.log('üîç [–í–û–ü–†–û–°] Computed styles - display:', window.getComputedStyle(cardFront).display);
                    console.log('üîç [–í–û–ü–†–û–°] Computed styles - background-image:', window.getComputedStyle(cardFront).backgroundImage);
                    
                } catch (error) {
                    console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder:', error);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${createCardPlaceholder(randomCard)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    cardFront.classList.remove('hidden');
                    cardBack.classList.add('hidden');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                console.log('üîÑ [–í–û–ü–†–û–°] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç—ã');
                console.log('üìç questionTarotCard element:', questionTarotCard);
                
                const cardFront = questionTarotCard?.querySelector('.card-front');
                const cardBack = questionTarotCard?.querySelector('.card-back');
                
                console.log('üìç cardFront element:', cardFront);
                console.log('üìç cardBack element:', cardBack);
                
                // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ CSS-–∫–ª–∞—Å—Å—ã
                if (cardFront) {
                    cardFront.classList.remove('hidden');
                }
                if (cardBack) {
                    cardBack.classList.add('hidden');
                }
                
                // –û–°–¢–ê–í–õ–Ø–ï–ú –∫–ª–∞—Å—Å flipped –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                // (–ù–ï —Å–Ω–∏–º–∞–µ–º flipped, —Ç.–∫. .card-front –ø–æ–≤–µ—Ä–Ω—É—Ç –Ω–∞ 180¬∞)
                
                console.log('‚úÖ [–í–û–ü–†–û–°] –ö–ª–∞—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã - cardFront hidden:', cardFront?.classList.contains('hidden'));
                console.log('‚úÖ [–í–û–ü–†–û–°] –ö–ª–∞—Å—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã - cardBack hidden:', cardBack?.classList.contains('hidden'));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
                if (questionFlippedCardName) {
                    const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                    questionFlippedCardName.textContent = `${randomCard.name}${orientationText} ${randomCard.symbol || ''}`;
                }
                questionCardInfoAfterFlip?.classList.remove('hidden');
            }, 400);
            
        }, 800);
        
        // 4. –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å
        setTimeout(async () => {
            questionAnswerContainer?.classList.remove('hidden');
            questionAnswerContainer?.classList.add('show');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
            let answer;
            try {
                console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...');
                const prediction = await generatePredictionAPI(randomCard, question);
                const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                answer = `–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}" –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–∞ ${randomCard.name}${orientationText}:\n\n${prediction}`;
                console.log('‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', prediction.substring(0, 100) + '...');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
                // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                answer = `–ù–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å "${question}" –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–∞ ${randomCard.name}${orientationText}:\n\n${randomCard.description || '–ö–∞—Ä—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã'}`;
            }
            
            // –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
            if (questionAnswerText) {
                await typeText(questionAnswerText, answer);
            }
            
            // 5. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            setTimeout(() => {
                clarifyingQuestionContainer?.classList.remove('hidden');
                if (!appState.isPremium) {
                    clarifyingQuestionWarning?.classList.remove('hidden');
                } else {
                    clarifyingQuestionWarning?.classList.add('hidden');
                }
            }, 500);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (!appState.isPremium) {
                appState.questionsUsed++;
                await saveAppState();
                updateQuestionsCounter();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ Supabase
            try {
                if (window.TarotDB && window.TarotDB.isConnected()) {
                    const savedQuestion = await window.TarotDB.saveQuestion(getUserId(), question);
                    if (savedQuestion && savedQuestion.id) {
                        const cardData = {
                            id: randomCard.id,
                            name: randomCard.name,
                            image: randomCard.displayImage,
                            description: randomCard.description
                        };
                        await window.TarotDB.saveAnswer(savedQuestion.id, cardData, answer);
                        console.log('‚úÖ –í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase');
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞:', error);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await addToHistory('question', question, answer);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            questionTextarea.value = '';
            handleQuestionInput();
            
            showMessage('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!', 'success');
            
        }, 3200); // 1200ms –¥–ª—è –∫–∞—Ä—Ç—ã + 2000ms
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞:', error);
        resetQuestionState();
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    } finally {
        setTimeout(() => {
            submitQuestionBtn.disabled = false;
        }, 3000);
    }
}

async function handleClarifyingQuestion() {
    if (!clarifyingQuestionTextarea) return;

    const question = clarifyingQuestionTextarea.value.trim();
    if (!question) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å', 'error');
        return;
    }

    if (!appState.isPremium && appState.questionsUsed >= appState.freeQuestionsLimit) {
        showMessage('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!', 'error');
        return;
    }

    console.log('üîÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    clarifyingQuestionContainer?.classList.add('hidden');
    resetQuestionAnswerOnly(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ñ–æ—Ä–º—É
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
    submitClarifyingQuestionBtn.disabled = true;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const randomCard = getRandomCard();
    
    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    questionAnimationContainer?.classList.remove('hidden');
    const randomPrePhrase = questionPreInterpretationPhrases[Math.floor(Math.random() * questionPreInterpretationPhrases.length)];
    if (questionIntroText) {
        questionIntroText.textContent = randomPrePhrase;
        questionIntroText.classList.remove('hidden');
    }
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    try {
        // 2. –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ä—É–±–∞—à–∫–æ–π —Å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        questionAnimationContainer?.classList.add('hidden');
        questionCardContainer?.classList.remove('hidden');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if (questionTarotCard) {
            questionTarotCard.classList.remove('flipped');
            questionTarotCard.querySelector('.card-front')?.classList.add('hidden');
            questionTarotCard.querySelector('.card-back')?.classList.remove('hidden');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —Ä—É–±–∞—à–∫–µ –∫–∞—Ä—Ç—ã
        animateStars(3, questionStarAnimationContainer);
        
        // 3. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ 1200ms (–≤—Ä–µ–º—è –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫)
        setTimeout(async () => {
            // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
            questionTarotCard?.classList.add('flipped');
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ background-image –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å 3D —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
            const cardFront = questionTarotCard?.querySelector('.card-front');
            const cardBack = questionTarotCard?.querySelector('.card-back');
            
            if (cardFront && cardBack) {
                try {
                    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', randomCard.displayImage);
                    
                    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
                    await loadImageAsync(randomCard.displayImage);
                    
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${encodeURI(randomCard.displayImage)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cardFront.classList.remove('hidden');
                    cardBack.classList.add('hidden');
                    
                } catch (error) {
                    console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder:', error);
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    cardFront.style.backgroundImage = `url('${createCardPlaceholder(randomCard)}')`;
                    cardFront.style.backgroundSize = 'cover';
                    cardFront.style.backgroundPosition = 'center';
                    cardFront.style.backgroundRepeat = 'no-repeat';
                    cardFront.style.opacity = '1';
                    cardFront.style.visibility = 'visible';
                    
                    cardFront.classList.remove('hidden');
                    cardBack.classList.add('hidden');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                const cardFront = questionTarotCard?.querySelector('.card-front');
                const cardBack = questionTarotCard?.querySelector('.card-back');
                
                // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ CSS-–∫–ª–∞—Å—Å—ã
                if (cardFront) {
                    cardFront.classList.remove('hidden');
                }
                if (cardBack) {
                    cardBack.classList.add('hidden');
                }
                
                // –û–°–¢–ê–í–õ–Ø–ï–ú –∫–ª–∞—Å—Å flipped –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                // (–ù–ï —Å–Ω–∏–º–∞–µ–º flipped, —Ç.–∫. .card-front –ø–æ–≤–µ—Ä–Ω—É—Ç –Ω–∞ 180¬∞)
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
                if (questionFlippedCardName) {
                    const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                    questionFlippedCardName.textContent = `${randomCard.name}${orientationText} ${randomCard.symbol || ''}`;
                }
                questionCardInfoAfterFlip?.classList.remove('hidden');
            }, 400);
            
        }, 800);
        
        // 4. –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç—å
        setTimeout(async () => {
            questionAnswerContainer?.classList.remove('hidden');
            questionAnswerContainer?.classList.add('show');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
            let answer;
            try {
                console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API...');
                const prediction = await generatePredictionAPI(randomCard, question);
                const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                answer = `–ù–∞ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å "${question}" –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–∞ ${randomCard.name}${orientationText}:\n\n${prediction}`;
            } catch (error) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', error);
                const orientationText = randomCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                answer = `–ù–∞ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å "${question}" –æ—Ç–≤–µ—á–∞–µ—Ç –∫–∞—Ä—Ç–∞ ${randomCard.name}${orientationText}:\n\n${randomCard.description || '–ö–∞—Ä—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã'}`;
            }
            
            // –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
            if (questionAnswerText) {
                await typeText(questionAnswerText, answer);
            }
            
            // 5. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
            setTimeout(() => {
                clarifyingQuestionContainer?.classList.remove('hidden');
                if (!appState.isPremium) {
                    clarifyingQuestionWarning?.classList.remove('hidden');
                } else {
                    clarifyingQuestionWarning?.classList.add('hidden');
                }
            }, 500);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (!appState.isPremium) {
                appState.questionsUsed++;
                await saveAppState();
                updateQuestionsCounter();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await addToHistory('clarifying-question', question, answer);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            clarifyingQuestionTextarea.value = '';
            
            showMessage('–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!', 'success');
            
        }, 3200); // 1200ms –¥–ª—è –∫–∞—Ä—Ç—ã + 2000ms
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:', error);
        resetQuestionState();
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
    } finally {
        setTimeout(() => {
            submitClarifyingQuestionBtn.disabled = false;
        }, 3000);
    }
}

// ========================================================================
// üé¥ –û–ë–†–ê–ë–û–¢–ö–ê –†–ê–°–ö–õ–ê–î–û–í
// ========================================================================

async function handleSpreadClick(spreadType) {
    console.log('üé¥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥:', spreadType);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Premium –¥–æ—Å—Ç—É–ø
    if (!appState.isPremium) {
        showMessage('–†–∞—Å–∫–ª–∞–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium –≤–µ—Ä—Å–∏–∏!', 'error');
        return;
    }
    
    const spreadConfig = SPREAD_CONFIGS[spreadType];
    if (!spreadConfig) {
        showMessage('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞', 'error');
        return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—Å–∫–ª–∞–¥–∞
    showSpreadResult(spreadType);
}

function showSpreadResult(spreadType) {
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ç–∫—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    spreadsGrid?.classList.add('hidden');
    spreadResult?.classList.remove('hidden');
    
    const spreadConfig = SPREAD_CONFIGS[spreadType];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (spreadResultTitle) {
        spreadResultTitle.textContent = spreadConfig.name;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞
    performSpread(spreadType);
}

async function performSpread(spreadType) {
    const spreadConfig = SPREAD_CONFIGS[spreadType];
    
    try {
        // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        spreadAnimationContainer?.classList.remove('hidden');
        
        const spreadPhrase = `–†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è "${spreadConfig.name.replace('–†–∞—Å–∫–ª–∞–¥ ¬´', '').replace('¬ª', '')}"...`;
        if (spreadIntroText) {
            spreadIntroText.textContent = spreadPhrase;
        }
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 2. –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã
        spreadAnimationContainer?.classList.add('hidden');
        spreadCardsContainer?.classList.remove('hidden');
        
        // 3. –°–æ–∑–¥–∞–µ–º –º–∞–∫–µ—Ç –∫–∞—Ä—Ç
        createSpreadLayout(spreadType);
        
        // 4. –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –æ–¥–Ω—É –∑–∞ –¥—Ä—É–≥–æ–π
        await animateSpreadCards();
        
        // 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        await showSpreadInterpretation(spreadType);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞', 'error');
    }
}

function createSpreadLayout(spreadType) {
    const spreadConfig = SPREAD_CONFIGS[spreadType];
    
    if (!spreadCardsLayout) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞–∫–µ—Ç
    spreadCardsLayout.innerHTML = '';
    spreadCardsLayout.className = `spread-cards-layout ${spreadConfig.layout}`;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
    if (spreadType === 'love') {
        // –†–∞—Å–∫–ª–∞–¥ "–û—Ç–Ω–æ—à–µ–Ω–∏—è" - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        const topRow = document.createElement('div');
        topRow.className = 'spread-row';
        topRow.appendChild(createSpreadCardPosition(spreadConfig.cards[0], 0));
        
        const bottomRow = document.createElement('div'); 
        bottomRow.className = 'spread-row';
        bottomRow.appendChild(createSpreadCardPosition(spreadConfig.cards[1], 1));
        bottomRow.appendChild(createSpreadCardPosition(spreadConfig.cards[2], 2));
        
        spreadCardsLayout.appendChild(topRow);
        spreadCardsLayout.appendChild(bottomRow);
    } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã - –ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        spreadConfig.cards.forEach((cardConfig, index) => {
            const cardPosition = createSpreadCardPosition(cardConfig, index);
            spreadCardsLayout.appendChild(cardPosition);
        });
    }
}

function createSpreadCardPosition(cardConfig, index) {
    const position = document.createElement('div');
    position.className = 'spread-card-position';
    position.style.opacity = '0'; // –°–∫—Ä—ã–≤–∞–µ–º –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    
    const tarotCard = document.createElement('div');
    tarotCard.className = 'tarot-card';
    
    const cardBack = document.createElement('div');
    cardBack.className = 'card-back';
    cardBack.innerHTML = `
        <span class="card-symbol">üîÆ</span>
        <div id="spreadStars${index}"></div>
    `;
    
    const cardFront = document.createElement('div');
    cardFront.className = 'card-front hidden';
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ background-image
    
    const cardLabel = document.createElement('div');
    cardLabel.className = 'card-label';
    cardLabel.textContent = cardConfig.label;
    tarotCard.appendChild(cardBack);
    tarotCard.appendChild(cardFront);
    position.appendChild(tarotCard);
    position.appendChild(cardLabel);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã
    position.cardConfig = cardConfig;
    position.cardIndex = index;
    
    return position;
}

async function animateSpreadCards() {
    const cardPositions = spreadCardsLayout?.querySelectorAll('.spread-card-position');
    if (!cardPositions) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < cardPositions.length; i++) {
        const cardPosition = cardPositions[i];
        
        // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        cardPosition.style.opacity = '1';
        
        // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –Ω–∞ —Ä—É–±–∞—à–∫–µ
        const starsContainer = cardPosition.querySelector(`#spreadStars${i}`);
        if (starsContainer) {
            animateStars(2, starsContainer);
        }
        
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // 3. –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
        const tarotCard = cardPosition.querySelector('.tarot-card');
        const randomCard = getRandomCard();
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ background-image –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        const cardFront = cardPosition.querySelector('.card-front');
        const cardBack = cardPosition.querySelector('.card-back');
        
        if (cardFront && cardBack) {
            try {
                console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:', randomCard.displayImage);
                
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
                await loadImageAsync(randomCard.displayImage);
                
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                cardFront.style.backgroundImage = `url('${encodeURI(randomCard.displayImage)}')`;
                cardFront.style.backgroundSize = 'cover';
                cardFront.style.backgroundPosition = 'center';
                cardFront.style.backgroundRepeat = 'no-repeat';
                cardFront.style.opacity = '1';
                cardFront.style.visibility = 'visible';
                
            } catch (error) {
                console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder:', error);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
                cardFront.style.backgroundImage = `url('${createCardPlaceholder(randomCard)}')`;
                cardFront.style.backgroundSize = 'cover';
                cardFront.style.backgroundPosition = 'center';
                cardFront.style.backgroundRepeat = 'no-repeat';
                cardFront.style.opacity = '1';
                cardFront.style.visibility = 'visible';
            }
        }
        
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
        tarotCard?.classList.add('flipped');
        
        setTimeout(() => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if (cardFront && cardBack) {
                cardFront.classList.remove('hidden');
                cardBack.classList.add('hidden');
            }
            
            // –°–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å flipped –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            tarotCard?.classList.remove('flipped');
            requestAnimationFrame(() => {
                tarotCard?.classList.remove('flipped');
            });
        }, 400);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        cardPosition.selectedCard = randomCard;
        
        await new Promise(resolve => setTimeout(resolve, 600));
    }
}

async function showSpreadInterpretation(spreadType) {
    const spreadConfig = SPREAD_CONFIGS[spreadType];
    const cardPositions = spreadCardsLayout?.querySelectorAll('.spread-card-position');
    
    spreadAnswerContainer?.classList.remove('hidden');
    spreadAnswerContainer?.classList.add('show');
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    const selectedCards = [];
    cardPositions?.forEach((cardPosition) => {
        const selectedCard = cardPosition.selectedCard;
        if (selectedCard) {
            selectedCards.push(selectedCard);
        }
    });
    
    let interpretation;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
    try {
        console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ API...');
        const spreadName = spreadConfig.name.replace('–†–∞—Å–∫–ª–∞–¥ ¬´', '').replace('¬ª', '');
        const prediction = await generatePredictionAPI(selectedCards, `—Ä–∞—Å–∫–ª–∞–¥ ${spreadName}`);
        interpretation = `${spreadConfig.description}\n\n${prediction}`;
    } catch (error) {
        console.warn('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', error);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ (fallback)
        interpretation = `${spreadConfig.description}\n\n`;
        
        cardPositions?.forEach((cardPosition) => {
            const cardConfig = cardPosition.cardConfig;
            const selectedCard = cardPosition.selectedCard;
            
            if (selectedCard) {
                const orientationText = selectedCard.isReversed ? ' (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)' : '';
                interpretation += `**${cardConfig.label}${orientationText}**: ${selectedCard.name}\n`;
                interpretation += `${cardConfig.description}: ${selectedCard.description || selectedCard.meaningUpright}\n\n`;
            }
        });
        
        interpretation += "–≠—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥. –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.";
    }
    
    // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    if (spreadAnswerText) {
        await typeText(spreadAnswerText, interpretation);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    await addToHistory('spread', spreadConfig.name, interpretation);
    
    showMessage('–†–∞—Å–∫–ª–∞–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!', 'success');
}

function resetSpreadState() {
    console.log('üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
    spreadResult?.classList.add('hidden');
    spreadsGrid?.classList.remove('hidden');
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    if (spreadCardsLayout) spreadCardsLayout.innerHTML = '';
    if (spreadIntroText) spreadIntroText.textContent = '';
    if (spreadAnswerText) {
        spreadAnswerText.textContent = '';
        spreadAnswerText.classList.remove('finished-typing');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
    spreadAnimationContainer?.classList.add('hidden');
    spreadCardsContainer?.classList.add('hidden');
    spreadAnswerContainer?.classList.remove('show');
    spreadAnswerContainer?.classList.add('hidden');
}

// ========================================================================
// üìö –ò–°–¢–û–†–ò–Ø
// ========================================================================

async function addToHistory(type, title, content) {
    const telegramId = getTelegramUserId();
    
    console.log('üìö addToHistory –≤—ã–∑–≤–∞–Ω:', {
        type,
        title: title.substring(0, 50) + '...',
        telegramId,
        tarotDBExists: !!window.TarotDB,
        isConnected: window.TarotDB ? window.TarotDB.isConnected() : false
    });
    
    try {
        if (window.TarotDB && window.TarotDB.isConnected()) {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è –≤ Supabase...');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
            if (type === 'daily-card') {
                // –ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ handleDailyCardClick, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
            } else if (type === 'question' || type === 'clarifying-question') {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ saveQuestion
                await window.TarotDB.saveQuestion(telegramId, title);
                console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase:', type);
            } else {
                console.log('‚ÑπÔ∏è –¢–∏–ø –∑–∞–ø–∏—Å–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', type);
            }
        } else {
            console.log('üì± TarotDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ localStorage');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
    }
    
    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ fallback
    const now = new Date();
    const historyItem = {
        id: Date.now(),
        type: type,
        title: title,
        content: content,
        date: now.toLocaleString('ru-RU'),
        timestamp: now.getTime() // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
    };
    
    appState.history.unshift(historyItem);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cleanOldHistoryItems();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    if (appState.history.length > 50) {
        appState.history = appState.history.slice(0, 50);
    }
    
    await saveAppState();
    updateHistoryDisplay();
}

function updateHistoryDisplay() {
    const historyList = document.getElementById('historyList');
    const historyEmptyState = document.getElementById('historyEmptyState');
    
    if (!historyList) return;
    
    if (appState.history.length === 0) {
        historyEmptyState?.classList.remove('hidden');
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const existingItems = historyList.querySelectorAll('.history-item');
        existingItems.forEach(item => item.remove());
        return;
    }
    
    historyEmptyState?.classList.add('hidden');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    const existingItems = historyList.querySelectorAll('.history-item');
    existingItems.forEach(item => item.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ç–æ—Ä–∏–∏
    appState.history.forEach(item => {
        const historyItemElement = document.createElement('div');
        historyItemElement.className = 'history-item';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let typeDisplay = '‚ùì –í–æ–ø—Ä–æ—Å';
        if (item.type === 'daily-card') {
            typeDisplay = 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è';
        } else if (item.type === 'spread') {
            typeDisplay = 'üé¥ –†–∞—Å–∫–ª–∞–¥';
        }
        
        historyItemElement.innerHTML = `
            <div class="history-header">
                <div class="history-type">${typeDisplay}</div>
                <div class="history-actions">
                    <div class="history-date">${item.date}</div>
                    <button class="delete-history-item" data-id="${item.id}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            </div>
            <div class="history-title">${item.title}</div>
            <div class="history-content">${item.content.length > 100 ? item.content.substring(0, 100) + '...' : item.content}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        historyItemElement.addEventListener('click', (e) => {
            // –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
            if (e.target.classList.contains('delete-history-item')) {
                return;
            }
            
            const content = historyItemElement.querySelector('.history-content');
            if (content.textContent.endsWith('...')) {
                content.textContent = item.content;
            } else {
                content.textContent = item.content.length > 100 ? item.content.substring(0, 100) + '...' : item.content;
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = historyItemElement.querySelector('.delete-history-item');
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            deleteHistoryItem(item.id);
        });
        
        historyList.appendChild(historyItemElement);
    });
}

async function deleteHistoryItem(itemId) {
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const itemIndex = appState.history.findIndex(item => item.id === itemId);
    
    if (itemIndex === -1) {
        console.warn('–≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', itemId);
        return;
    }
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
    appState.history.splice(itemIndex, 1);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await saveAppState();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateHistoryDisplay();
    
    showMessage('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏', 'success');
}

// ========================================================================
// ‚≠ê –û–¢–ó–´–í–´
// ========================================================================

function updateReviewsDisplay() {
    const reviewsList = document.getElementById('reviewsList');
    
    if (!reviewsList) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
    reviewsList.innerHTML = '';
    
    if (appState.reviews.length === 0) {
        reviewsList.innerHTML = `
            <div class="reviews-empty">
                <span class="empty-icon">üí¨</span>
                <p>–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>
                <p>–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!</p>
            </div>
        `;
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–∑—ã–≤–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
    const recentReviews = appState.reviews.slice(0, 10);
    
    recentReviews.forEach(review => {
        const reviewElement = document.createElement('div');
        reviewElement.className = 'review-item';
        
        // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        let starsHtml = '';
        for (let i = 1; i <= 5; i++) {
            starsHtml += `<span class="review-star ${i <= review.rating ? 'filled' : ''}">‚òÖ</span>`;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        const maxLength = 120;
        const isLongText = review.text.length > maxLength;
        const truncatedText = isLongText ? review.text.substring(0, maxLength) + '...' : review.text;
        
        reviewElement.innerHTML = `
            <div class="review-header">
                <div class="review-user-info">
                    <div class="review-username">${review.username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                    <div class="review-rating">${starsHtml}</div>
                </div>
                <div class="review-date">${review.date}</div>
            </div>
            <div class="review-text" data-full-text="${encodeURIComponent(review.text)}" data-truncated-text="${encodeURIComponent(truncatedText)}" data-expanded="false">${truncatedText}</div>
            ${isLongText ? '<div class="review-expand-hint">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è</div>' : ''}
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–∫—Ä—ã—Ç–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if (isLongText) {
            reviewElement.addEventListener('click', () => {
                const textElement = reviewElement.querySelector('.review-text');
                const expandHint = reviewElement.querySelector('.review-expand-hint');
                const isExpanded = textElement.getAttribute('data-expanded') === 'true';
                
                if (isExpanded) {
                    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    textElement.textContent = decodeURIComponent(textElement.getAttribute('data-truncated-text'));
                    textElement.setAttribute('data-expanded', 'false');
                    expandHint.textContent = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è';
                    reviewElement.classList.remove('expanded');
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    textElement.textContent = decodeURIComponent(textElement.getAttribute('data-full-text'));
                    textElement.setAttribute('data-expanded', 'true');
                    expandHint.textContent = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è';
                    reviewElement.classList.add('expanded');
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä pointer –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            reviewElement.style.cursor = 'pointer';
        }
        
        reviewsList.appendChild(reviewElement);
    });
}

function setupStarRating() {
    const stars = document.querySelectorAll('.star');
    
    stars.forEach((star, index) => {
        star.addEventListener('click', () => {
            currentRating = index + 1;
            updateStarsDisplay(currentRating);
            console.log('‚≠ê –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:', currentRating);
        });
        
        star.addEventListener('mouseenter', () => {
            updateStarsDisplay(index + 1);
        });
    });
    
    const starRating = document.getElementById('starRating');
    starRating?.addEventListener('mouseleave', () => {
        updateStarsDisplay(currentRating);
    });
    
    function updateStarsDisplay(rating) {
        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.add('active');
            } else {
                star.classList.remove('active');
            }
        });
    }
}

async function handleSubmitReview() {
    const reviewText = document.getElementById('reviewText');
    
    const rating = currentRating;
    const text = reviewText?.value.trim();
    
    if (!rating || rating === 0) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É', 'error');
        return;
    }
    
    if (!text) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
    const review = {
        id: Date.now(),
        rating: rating,
        text: text,
        username: getTelegramUserName(),
        date: new Date().toLocaleString('ru-RU'),
        timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    try {
        if (window.TarotDB && window.TarotDB.isConnected()) {
            const reviewData = {
                user_id: getTelegramUserId(),
                rating: rating,
                review_text: text,
                username: getTelegramUserName(),
                created_at: new Date().toISOString()
            };
            
            await window.TarotDB.saveReview(reviewData);
            console.log('‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ Supabase:', error);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ fallback)
    appState.reviews.unshift(review);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ (—Ö—Ä–∞–Ω–∏–º –º–∞–∫—Å–∏–º—É–º 50)
    if (appState.reviews.length > 50) {
        appState.reviews = appState.reviews.slice(0, 50);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await saveAppState();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
    updateReviewsDisplay();
    
    console.log('üìù –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', review);
    
    showMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!', 'success');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    if (reviewText) reviewText.value = '';
    currentRating = 0;
    document.querySelectorAll('.star').forEach(star => star.classList.remove('active'));
}

// ========================================================================
// üëë PREMIUM
// ========================================================================

function updateSubscriptionStatus(isPremium = false) {
    const statusElement = document.getElementById('subscriptionStatus');
    const statusIcon = document.getElementById('statusIcon');
    const statusText = document.getElementById('statusText');
    
    if (!statusElement || !statusIcon || !statusText) return;
    
    if (isPremium) {
        statusElement.classList.add('premium');
        statusIcon.textContent = 'üëë';
        statusText.textContent = 'Premium-–ø–æ–¥–ø–∏—Å–∫–∞';
    } else {
        statusElement.classList.remove('premium');
        statusIcon.textContent = 'üåë';
        statusText.textContent = '–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç';
    }

    // Update test toggle
    if (premiumTestToggle) {
        premiumTestToggle.checked = isPremium;
    }
    if (premiumTestLabel) {
        premiumTestLabel.textContent = isPremium ? 'Premium —Ä–µ–∂–∏–º' : '–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º';
    }
}


async function handlePremiumPurchase() {
    const userId = getTelegramUserId();

    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        console.log('üí∞ –ü–æ–∫—É–ø–∫–∞ Premium');
        
        // –ï—Å–ª–∏ TarotDB –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (window.TarotDB && window.TarotDB.isConnected()) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            let userProfile = await window.TarotDB.getUserProfile(userId);
            
            // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if (!userProfile) {
                console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                userProfile = await window.TarotDB.createUserProfile(userId, {
                    username: getTelegramUserName(),
                    is_subscribed: false
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await window.TarotDB.updateUserProfile(userId, {
                is_subscribed: true,
                subscription_expiry_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 –¥–Ω–µ–π
                premium_purchase_date: new Date().toISOString()
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        appState.isPremium = true;
        await saveAppState();
        updateSubscriptionStatus(true);
        updateQuestionsCounter();
        
        showMessage('Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!', 'success');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium:', error);
        showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium', 'error');
    }
}
// ========================================================================
// üõ†Ô∏è –£–¢–ò–õ–ò–¢–´
// ========================================================================

function getTelegramUserId() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (window.validatedTelegramUser && window.validatedTelegramUser.id) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π Telegram ID:', window.validatedTelegramUser.id);
        return window.validatedTelegramUser.id;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API Telegram WebApp
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        const telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
        if (telegramUser.id) {
            console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp ID:', telegramUser.id);
            return telegramUser.id.toString();
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Bot API –¥–∞–Ω–Ω—ã–º–∏
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è initData –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const urlParams = new URLSearchParams(window.Telegram.WebApp.initData);
            const userParam = urlParams.get('user');
            if (userParam) {
                const userData = JSON.parse(decodeURIComponent(userParam));
                if (userData && userData.id) {
                    console.log('üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ initData:', userData.id);
                    return userData.id.toString();
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
        }
    }
    
    // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ Telegram - –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–µ–∂–∏–º
    return 'anonymous_user';
}

function getTelegramUserName() {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (window.validatedTelegramUser) {
        const user = window.validatedTelegramUser;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (user.first_name && user.last_name) {
            return `${user.first_name} ${user.last_name}`;
        } else if (user.first_name) {
            return user.first_name;
        } else if (user.username) {
            return `@${user.username}`;
        }
    }
    
    // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º initDataUnsafe
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
        const user = window.Telegram.WebApp.initDataUnsafe.user;
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (user.first_name && user.last_name) {
            return `${user.first_name} ${user.last_name}`;
        } else if (user.first_name) {
            return user.first_name;
        } else if (user.username) {
            return `@${user.username}`;
        }
    }
    
    // Fallback - —Å–ª—É—á–∞–π–Ω–æ–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è
    const userId = getTelegramUserId();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    const hash = userId.split('').reduce((a, b) => {
        a = ((a << 5) - a) + b.charCodeAt(0);
        return a & a;
    }, 0);
    const index = Math.abs(hash) % mysticalNames.length;
    return mysticalNames[index];
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ supabase.js
window.getTelegramUserName = getTelegramUserName;

async function validateTelegramData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Telegram WebApp initData
    if (!window.Telegram || !window.Telegram.WebApp || !window.Telegram.WebApp.initData) {
        console.log('üì± Telegram WebApp –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram)');
        return false;
    }
    
    try {
        const response = await fetch('/api/validate-telegram', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                initData: window.Telegram.WebApp.initData
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.success && data.user) {
                window.validatedTelegramUser = data.user;
                console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
                return true;
            }
        }
        
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram –¥–∞–Ω–Ω—ã–µ');
        return false;
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

// ========================================================================
// üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø DOM –≠–õ–ï–ú–ï–ù–¢–û–í
// ========================================================================

function initializeDOMElements() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    mainNav = document.getElementById('mainNav');
    secondaryNav = document.getElementById('secondaryNav');
    tabContents = document.querySelectorAll('.tab-content');
    
    // –ó–ê–©–ò–¢–ê: —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ ID
    ['tarotCard', 'questionTarotCard'].forEach(id => {
        document.querySelectorAll(`#${id}`).forEach((node, index, array) => {
            if (index < array.length - 1) {
                console.warn(`üö® –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π #${id}, —É–¥–∞–ª—è–µ–º:`, node);
                node.remove();
            }
        });
    });
    
    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    tarotCard = document.getElementById('tarotCard');
    cardBack = tarotCard?.querySelector('.card-back');
    cardFront = tarotCard?.querySelector('.card-front');
    // cardImage –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ background-image
    cardInfoAfterFlip = document.getElementById('cardInfoAfterFlip');
    flippedCardName = document.getElementById('flippedCardName');
    cardIntroText = document.getElementById('cardIntroText');
    
    // –ò–ò-–æ—Ç–≤–µ—Ç—ã
    aiAnswerContainer = document.getElementById('aiAnswerContainer');
    aiInterpretationTitle = document.getElementById('aiInterpretationTitle');
    aiInterpretationTextElement = document.getElementById('aiInterpretationText');
    
    // –ë–∞–Ω–Ω–µ—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
    afterDailyCardBanner = document.getElementById('afterDailyCardBanner');
    askMoreQuestionsBtn = document.getElementById('askMoreQuestionsBtn');
    premiumBannerBtn = document.getElementById('premiumBannerBtn');
    
    // –ê–Ω–∏–º–∞—Ü–∏–∏
    starAnimationContainer = document.getElementById('starAnimationContainer');
    
    // –í–æ–ø—Ä–æ—Å—ã
    questionsLeftElement = document.getElementById('questionsLeft');
    questionTextarea = document.getElementById('questionTextarea');
    submitQuestionBtn = document.getElementById('submitQuestionBtn');
    charCounter = document.getElementById('charCounter');
    loadingState = document.getElementById('loadingState');
    questionAnswerContainer = document.getElementById('questionAnswerContainer');
    questionAnswerText = document.getElementById('questionAnswerText');
    // questionCardImage –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ background-image
    
    // –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    questionAnimationContainer = document.getElementById('questionAnimationContainer');
    questionStarAnimationContainer = document.getElementById('questionStarAnimationContainer');
    questionIntroText = document.getElementById('questionIntroText');
    questionCardContainer = document.getElementById('questionCardContainer');
    
    questionTarotCard = document.getElementById('questionTarotCard');
    
    questionCardInfoAfterFlip = document.getElementById('questionCardInfoAfterFlip');
    questionFlippedCardName = document.getElementById('questionFlippedCardName');
    
    // –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    clarifyingQuestionContainer = document.getElementById('clarifyingQuestionContainer');
    clarifyingQuestionTextarea = document.getElementById('clarifyingQuestionTextarea');
    submitClarifyingQuestionBtn = document.getElementById('submitClarifyingQuestionBtn');
    clarifyingQuestionWarning = document.getElementById('clarifyingQuestionWarning');

    // Test Toggle
    premiumTestToggle = document.getElementById('premiumTestToggle');
    premiumTestLabel = document.getElementById('premiumTestLabel');
    
    // –†–∞—Å–∫–ª–∞–¥—ã
    spreadsGrid = document.getElementById('spreadsGrid');
    spreadResult = document.getElementById('spreadResult');
    spreadResultTitle = document.getElementById('spreadResultTitle');
    backToSpreadsBtn = document.getElementById('backToSpreadsBtn');
    spreadAnimationContainer = document.getElementById('spreadAnimationContainer');
    spreadIntroText = document.getElementById('spreadIntroText');
    spreadCardsContainer = document.getElementById('spreadCardsContainer');
    spreadCardsLayout = document.getElementById('spreadCardsLayout');
    spreadAnswerContainer = document.getElementById('spreadAnswerContainer');
    spreadAnswerText = document.getElementById('spreadAnswerText');

    console.log('‚úÖ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// ========================================================================
// üéÆ –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
// ========================================================================

function setupEventListeners() {
    console.log('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    mainNav?.addEventListener('click', (e) => {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ mainNav:', e.target);
        if (e.target.classList.contains('nav-tab')) {
            console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ nav-tab:', e.target.dataset.tab);
            switchTab(e.target.dataset.tab);
        }
    });

    secondaryNav?.addEventListener('click', (e) => {
        if (e.target.classList.contains('nav-tab')) {
            switchTab(e.target.dataset.tab);
        }
    });

    // –ö–∞—Ä—Ç–∞ –¥–Ω—è
    tarotCard?.addEventListener('click', handleDailyCardClick);
    
    // –ö–Ω–æ–ø–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞
    askMoreQuestionsBtn?.addEventListener('click', () => switchTab('question'));
    premiumBannerBtn?.addEventListener('click', () => switchTab('premium'));
    
    // –í–æ–ø—Ä–æ—Å—ã
    questionTextarea?.addEventListener('input', handleQuestionInput);
    submitQuestionBtn?.addEventListener('click', handleAskQuestion);
    submitClarifyingQuestionBtn?.addEventListener('click', handleClarifyingQuestion);
    
    // –û—Ç–∑—ã–≤—ã
    setupStarRating();
    const submitReviewBtn = document.getElementById('submitReviewBtn');
    submitReviewBtn?.addEventListener('click', handleSubmitReview);
    
    // Premium
    const premiumBuyBtn = document.getElementById('premiumBuyBtn');
    premiumBuyBtn?.addEventListener('click', handlePremiumPurchase);

    
    // –†–∞—Å–∫–ª–∞–¥—ã
    spreadsGrid?.addEventListener('click', (e) => {
        const spreadCard = e.target.closest('.spread-card');
        if (spreadCard && spreadCard.dataset.spread) {
            console.log('üé¥ –ö–ª–∏–∫ –ø–æ —Ä–∞—Å–∫–ª–∞–¥—É:', spreadCard.dataset.spread);
            handleSpreadClick(spreadCard.dataset.spread);
        }
    });
    
    backToSpreadsBtn?.addEventListener('click', resetSpreadState);
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// ========================================================================
// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
// ========================================================================

async function initApp() {
    // Prevent double initialization
    if (initAppCalled) {
        console.log('‚ö†Ô∏è initApp —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
    }
    
    initAppCalled = true;
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    try {
        // 0. –í–∞–ª–∏–¥–∏—Ä—É–µ–º Telegram –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
        if (window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1') {
            console.log('üîê –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö...');
            await validateTelegramData();
        }
        
        // 1. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (typeof window.isConfigReady === 'function') {
            let configReady = false;
            let attempts = 0;
            const maxAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
            
            while (!configReady && attempts < maxAttempts) {
                configReady = window.isConfigReady();
                if (!configReady) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                    attempts++;
                }
            }
            
            if (!configReady) {
                console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback');
            }
        }
        
        // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM
        initializeDOMElements();
        
        // 3. –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
        const userId = getTelegramUserId();
        console.log('üë§ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:', userId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ appState
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
            appState.telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
            console.log('üë§ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', appState.telegramUser);
        } else {
            // –°–æ–∑–¥–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            appState.telegramUser = {
                id: userId || 'webapp_user',
                first_name: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: null
            };
        }
        
        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await loadAppStateLocally();
        console.log('üì± –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        
        // 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å TarotDB
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TarotDB –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
                tarotDBExists: !!window.TarotDB,
                isConnected: window.TarotDB ? window.TarotDB.isConnected() : false,
                connectionStatus: window.TarotDB ? window.TarotDB.getStatus() : null
            });
            
            if (window.TarotDB && window.TarotDB.isConnected()) {
                console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å TarotDB');
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
                if (window.TarotDB.performDataSync) {
                    const syncedState = await window.TarotDB.performDataSync(userId, appState);
                    if (syncedState) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        appState.isPremium = syncedState.isPremium;
                        appState.questionsUsed = syncedState.questionsUsed;
                        appState.dailyCardUsed = syncedState.dailyCardUsed;
                        appState.lastCardDate = syncedState.lastCardDay;
                        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å TarotDB');
                    }
                } else {
                    // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –µ—Å–ª–∏ performDataSync –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    const userProfile = await window.TarotDB.getUserProfile(userId);
                    if (userProfile) {
                        appState.dailyCardUsed = userProfile.last_card_day === new Date().toISOString().split('T')[0];
                        appState.lastCardDate = userProfile.last_card_day;
                        appState.questionsUsed = userProfile.total_questions || 0;
                        appState.isPremium = userProfile.is_subscribed || false;
                        appState.freeQuestionsLimit = userProfile.free_predictions_left || 3;
                        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ TarotDB (fallback)');
                    }
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
                appState.freeQuestionsLimit = 3;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á—Ç–µ–Ω–∏–π
                try {
                    const readings = await window.TarotDB.getUserReadings(userId);
                    if (readings && readings.length > 0) {
                        appState.history = readings.map(reading => ({
                            id: reading.id || Date.now(),
                            type: reading.type || 'reading',
                            title: reading.title || '–ß—Ç–µ–Ω–∏–µ',
                            content: reading.content || '',
                            date: new Date(reading.created_at).toLocaleString('ru-RU'),
                            timestamp: new Date(reading.created_at).getTime()
                        }));
                        console.log(`‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ TarotDB: ${readings.length} –∑–∞–ø–∏—Å–µ–π`);
                    }
                } catch (historyError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ TarotDB:', historyError);
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try {
                    const reviews = await window.TarotDB.getUserReviews(userId);
                    if (reviews && reviews.length > 0) {
                        appState.reviews = reviews.map(review => ({
                            id: review.id || Date.now(),
                            rating: review.rating,
                            text: review.review_text || review.text,
                            username: review.username || getTelegramUserName(),
                            date: new Date(review.created_at).toLocaleString('ru-RU'),
                            timestamp: new Date(review.created_at).getTime()
                        }));
                        console.log(`‚úÖ –û—Ç–∑—ã–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ TarotDB: ${reviews.length} –∑–∞–ø–∏—Å–µ–π`);
                    }
                } catch (reviewsError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ TarotDB:', reviewsError);
                }
            }
        } catch (cloudError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TarotDB:', cloudError);
        }
        
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await loadAppState();
        
        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã
        await loadCards();
        
        // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupEventListeners();
        
        // 6. –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateSubscriptionStatus(appState.isPremium);
        updateQuestionsCounter();
        updateHistoryDisplay();
        updateReviewsDisplay();
        
        // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        initializeTelegramWebApp();
        
        isInitialized = true;
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        
        // 7.5. –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú SUPABASE –ï–°–õ–ò –ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù
        if (window.TarotDB && !window.TarotDB.isConnected()) {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
            if (window.TarotDB.initialize) {
                try {
                    await window.TarotDB.initialize();
                    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                }
            }
        }
        
        
        // 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
        if (allCards && allCards.length > 0) {
            console.log(`üÉè –í—Å–µ–≥–æ –∫–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allCards.length}`);
            console.log('üñºÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç:', allCards.slice(0, 3).map(c => ({
                name: c.name,
                image: c.image,
                imageUpright: c.imageUpright,
                imageReversed: c.imageReversed,
                displayImage: c.displayImage
            })));
        }
        
        // 9. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å TarotDB
        try {
            if (window.TarotDB && window.TarotDB.isConnected()) {
                const userId = getTelegramUserId();
                await window.TarotDB.updateUserProfile(userId, {
                    total_questions: appState.questionsUsed,
                    is_subscribed: appState.isPremium,
                    last_card_day: appState.lastCardDate,
                    free_predictions_left: Math.max(0, appState.freeQuestionsLimit - appState.questionsUsed)
                });
                console.log('‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å TarotDB');
            }
        } catch (syncError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å TarotDB:', syncError);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        showMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
    }
}

// ========================================================================
// üì± –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM WEBAPP
// ========================================================================

function initializeTelegramWebApp() {
    try {
        if (window.Telegram && window.Telegram.WebApp) {
            console.log('üì± Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            window.Telegram.WebApp.expand();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏ (‚â• 6.1)
            try {
                const webAppVersion = window.Telegram.WebApp.version;
                const versionNumber = parseFloat(webAppVersion || '0');
                
                if (versionNumber >= 6.1) {
                    console.log('üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã (–≤–µ—Ä—Å–∏—è WebApp:', webAppVersion, ')');
                    window.Telegram.WebApp.setHeaderColor('#1a1a2e');
                    window.Telegram.WebApp.setBackgroundColor('#1a1a2e');
                } else {
                    console.log('‚ö†Ô∏è –¶–≤–µ—Ç–∞ —Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ—Ä—Å–∏–∏ WebApp:', webAppVersion);
                }
            } catch (colorError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–≤–µ—Ç–æ–≤ —Ç–µ–º—ã:', colorError.message);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            window.Telegram.WebApp.ready();
            
            console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('üåê –†–∞–±–æ—Ç–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–Ω–µ –≤ Telegram)');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    }
}

// ========================================================================
// üß™ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
// ========================================================================

function debugApp() {
    console.log('üß™ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', appState);
    console.log('–ö–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allCards.length);
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', isInitialized);
    console.log('–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:', currentRating);
    console.log('DOM —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        tarotCard: !!tarotCard,
        questionTextarea: !!questionTextarea,
        submitQuestionBtn: !!submitQuestionBtn,
        historyList: !!document.getElementById('historyList')
    });
    
    if (allCards.length > 0) {
        console.log('üÉè –ü—Ä–∏–º–µ—Ä—ã –∫–∞—Ä—Ç:');
        allCards.slice(0, 3).forEach(card => {
            console.log(`- ${card.name}:`);
            console.log(`  –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.image}`);
            console.log(`  –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.imageUpright}`);
            console.log(`  –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${card.imageReversed}`);
        });
    }
}

function resetApp() {
    console.log('üîÑ –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    localStorage.removeItem('tarotAppState');
    location.reload();
}

function testNotification() {
    showMessage('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', 'info');
}

function testCardImage() {
    if (allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    const randomCard = getRandomCard();
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:', randomCard);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const testImg = new Image();
    testImg.onload = () => {
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ:', randomCard.displayImage);
    };
    testImg.onerror = () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', randomCard.displayImage);
        console.log('üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º placeholder:', createCardPlaceholder(randomCard));
    };
    testImg.src = encodeURI(randomCard.displayImage);
}

function testAllCardImages() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ä—Ç...');
    
    if (allCards.length === 0) {
        console.warn('‚ö†Ô∏è –ö–∞—Ä—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    allCards.forEach(async (card, index) => {
        console.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã ${index + 1}/${allCards.length}: ${card.name}`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.image) {
            const available = await checkImageAvailability(card.image);
            console.log(`  –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.image}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.imageUpright) {
            const available = await checkImageAvailability(card.imageUpright);
            console.log(`  –ü—Ä—è–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.imageUpright}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (card.imageReversed) {
            const available = await checkImageAvailability(card.imageReversed);
            console.log(`  –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${available ? '‚úÖ' : '‚ùå'} ${card.imageReversed}`);
        }
    });
}

// ========================================================================
// üèÅ –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// ========================================================================

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
function safeInitApp() {
    initApp();
}

// –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (document.readyState === 'loading') {
    // –ï—Å–ª–∏ DOM –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º DOMContentLoaded
    document.addEventListener('DOMContentLoaded', safeInitApp, { once: true });
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
    safeInitApp();
}



// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.TarotApp = {
    appState,
    allCards,
    switchTab,
    showMessage,
    getRandomCard,
    debugApp,
    resetApp,
    testNotification,
    testCardImage,
    testAllCardImages,
    updateHistoryDisplay,
    currentRating,
    createCardPlaceholder,
    checkImageAvailability,
    normalizeImagePath,
};
