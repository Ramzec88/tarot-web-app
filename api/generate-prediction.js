// api/generate-prediction.js - –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ n8n
const crypto = require('crypto');

export default async function handler(req, res) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const { user_id, question, cards, type, userName, additionalData } = req.body;

        if (!cards || (!Array.isArray(cards) && !cards.name)) {
            return res.status(400).json({ error: 'Missing required fields: cards' });
        }

        console.log(`üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ "${type}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, userName || '–ì–æ—Å—Ç—å');

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ n8n
        try {
            const prediction = await generateN8nPrediction({
                user_id: user_id || 'webapp_user',
                userName: userName || '–ì–æ—Å—Ç—å', 
                question: question || '',
                cards: cards, // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
                type: type || 'question',
                additionalData: additionalData || {}
            });

            return res.status(200).json({
                success: true,
                prediction: prediction.prediction,
                source: 'n8n',
                user: prediction.user || null,
                timestamp: prediction.timestamp
            });

        } catch (n8nError) {
            console.error('‚ùå n8n Error:', n8nError.message);
            console.log('üîÑ Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
            
            // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const localPrediction = generateLocalPrediction(cards, question, type, additionalData);
            
            return res.status(200).json({
                success: true,
                prediction: localPrediction,
                source: 'local',
                user: null,
                timestamp: new Date().toISOString()
            });
        }

    } catch (error) {
        console.error('‚ùå Error generating prediction:', error);
        return res.status(500).json({ 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
        });
    }
}

async function generateN8nPrediction(data) {
    const n8nConfig = {
        webhookUrl: process.env.N8N_WEBHOOK_URL
    };

    if (!n8nConfig.webhookUrl) {
        throw new Error('N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n:', n8nConfig.webhookUrl);
    console.log(`üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ "${data.type}":`, {
        cardsCount: Array.isArray(data.cards) ? data.cards.length : 1,
        hasAdditionalData: !!data.additionalData && Object.keys(data.additionalData).length > 0
    });

    const requestPayload = {
        action: 'generate_prediction',
        telegram_id: data.user_id,
        userName: data.userName,
        question: data.question,
        type: data.type,
        cards: data.cards, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å - –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
        additionalData: data.additionalData || {}
    };

    const payload = JSON.stringify(requestPayload);
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload:', payload.substring(0, 500) + (payload.length > 500 ? '...' : ''));

    const response = await fetch(n8nConfig.webhookUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'TarotWebApp/1.0'
        },
        body: payload
    });

    if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç n8n:', result.prediction?.substring(0, 100) + '...');
    
    if (!result.success || !result.prediction) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç n8n API');
    }

    return result;
}


function generateLocalPrediction(cards, question, type = 'question', additionalData = {}) {
    const card = Array.isArray(cards) ? cards[0] : cards;
    
    switch (type) {
        case 'daily_card':
            return generateDailyCardFallback(card);
        case 'question':
            return generateQuestionFallback(card, question);
        case 'clarifying_question':
            return generateClarifyingFallback(card, question, additionalData);
        case 'spread':
            return generateSpreadFallback(cards, question, additionalData);
        default:
            return generateQuestionFallback(card, question);
    }
}

function generateDailyCardFallback(card) {
    const templates = [
        `–°–µ–≥–æ–¥–Ω—è –∫–∞—Ä—Ç–∞ "${card.name}" –ø—Ä–∏–Ω–µ—Å–ª–∞ –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. ${card.description || card.meaningUpright || '–≠–Ω–µ—Ä–≥–∏–∏ –¥–Ω—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—Å—Ç –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.'} –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏.`,
        `"${card.name}" –æ—Å–≤–µ—â–∞–µ—Ç –≤–∞—à –¥–µ–Ω—å –æ—Å–æ–±–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π. ${card.description || card.meaningUpright || '–í—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.'} –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º.`,
        `–≠–Ω–µ—Ä–≥–∏–∏ "${card.name}" –æ–∫—Ä—É–∂–∞—é—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è. ${card.description || card.meaningUpright || '–í—Å–µ–ª–µ–Ω–Ω–∞—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—É—Ç–∏.'} –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º –∏ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º.`
    ];
    return templates[Math.floor(Math.random() * templates.length)];
}

function generateQuestionFallback(card, question) {
    const templates = [
        `–í –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç–∞ "${card.name}" —É–∫–∞–∑—ã–≤–∞–µ—Ç: ${card.description || card.meaningUpright || '–°–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∫ –¥–µ—Ç–∞–ª—è–º.'}`,
        `"${card.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å—É—Ç—å –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: ${card.description || card.meaningUpright || '–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º—É–¥—Ä–æ—Å—Ç—å—é.'}`,
        `–≠–Ω–µ—Ä–≥–∏–∏ "${card.name}" –≥–æ–≤–æ—Ä—è—Ç: ${card.description || card.meaningUpright || '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É.'}`,
    ];
    return templates[Math.floor(Math.random() * templates.length)];
}

function generateClarifyingFallback(card, question, additionalData) {
    const prefix = additionalData.originalQuestion 
        ? `–£–≥–ª—É–±–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç, –∫–∞—Ä—Ç–∞ "${card.name}" –¥–æ–±–∞–≤–ª—è–µ—Ç: `
        : `–í –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ "${card.name}" —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç: `;
    
    return prefix + (card.description || card.meaningUpright || '–í–∞–∂–Ω–æ —É—á–µ—Å—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Å–∏—Ç—É–∞—Ü–∏–∏.');
}

function generateSpreadFallback(cards, question, additionalData) {
    const cardsArray = Array.isArray(cards) ? cards : [cards];
    const cardNames = cardsArray.map(c => c.name).join(', ');
    
    return `üéØ –†–ê–°–ö–õ–ê–î –†–ê–°–ö–†–´–¢\n\n–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã: ${cardNames}\n\n–≠—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–∞—Ä—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–∏–æ–¥ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ø–æ–ª–Ω—è–µ—Ç –æ–±—â—É—é –∫–∞—Ä—Ç–∏–Ω—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—É—Ç—å –∫ —Ä–µ—à–µ–Ω–∏—é. –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.`;
}
