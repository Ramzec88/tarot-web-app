// api/telegram-webhook.js - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
// ========================================================================

import { createClient } from '@supabase/supabase-js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const update = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
        if (!update.message && !update.callback_query) {
            return res.status(200).json({ ok: true });
        }

        const message = update.message || update.callback_query?.message;
        const user = message?.from || update.callback_query?.from;
        
        if (!user) {
            return res.status(200).json({ ok: true });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (message?.text) {
            await handleTextMessage(message, user);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App
        if (message?.web_app_data) {
            await handleWebAppData(message.web_app_data, user);
        }

        return res.status(200).json({ ok: true });

    } catch (error) {
        console.error('‚ùå Telegram webhook error:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTextMessage(message, user) {
    const text = message.text;
    const chatId = message.chat.id;

    switch (text) {
        case '/start':
            await handleStartCommand(chatId, user);
            break;
        case '/premium':
            await handlePremiumCommand(chatId, user);
            break;
        case '/stats':
            await handleStatsCommand(chatId, user);
            break;
        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(chatId, user) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        const { data: existingUser } = await supabase
            .from('tarot_user_profiles')
            .select('*')
            .eq('user_id', user.id)
            .single();

        if (!existingUser) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await supabase
                .from('tarot_user_profiles')
                .insert([{
                    user_id: user.id,
                    chat_id: chatId,
                    username: user.username,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    free_predictions_left: 3,
                    is_subscribed: false,
                    referral_code: `ref_${user.id}`
                }]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(chatId, 
            `üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∞—Ä—Ç –¢–∞—Ä–æ!\n\n` +
            `–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –∫–∞—Ä—Ç.\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üÉè –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–∞—Ä–æ',
                            web_app: { url: `${process.env.VERCEL_URL || 'https://your-app.vercel.app'}` }
                        }
                    ]]
                }
            }
        );

    } catch (error) {
        console.error('‚ùå Error in start command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /premium
async function handlePremiumCommand(chatId, user) {
    try {
        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('is_subscribed, subscription_expiry_date, free_predictions_left')
            .eq('user_id', user.id)
            .single();

        if (!userProfile) {
            await sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
            return;
        }

        if (userProfile.is_subscribed) {
            const expiryDate = new Date(userProfile.subscription_expiry_date).toLocaleDateString('ru-RU');
            await sendMessage(chatId, `‚≠ê –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ ${expiryDate}`);
        } else {
            await sendMessage(chatId, 
                `üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n\n` +
                `üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${userProfile.free_predictions_left}\n\n` +
                `‚≠ê –° –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n` +
                `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º\n` +
                `‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n` +
                `‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n` +
                `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
                `üí∞ –í—Å–µ–≥–æ 299‚ÇΩ –Ω–∞ 30 –¥–Ω–µ–π`,
                {
                    reply_markup: {
                        inline_keyboard: [[
                            {
                                text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º',
                                url: process.env.PAYMENT_URL || 'https://digital.wildberries.ru/offer/491728'
                            }
                        ]]
                    }
                }
            );
        }

    } catch (error) {
        console.error('‚ùå Error in premium command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
async function handleStatsCommand(chatId, user) {
    try {
        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('*')
            .eq('user_id', user.id)
            .single();

        if (!userProfile) {
            await sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [questionsCount, dailyCardsCount] = await Promise.all([
            supabase.from('tarot_questions').select('id', { count: 'exact' }).eq('user_id', user.id),
            supabase.from('tarot_daily_cards').select('id', { count: 'exact' }).eq('user_id', user.id)
        ]);

        const memberSince = new Date(userProfile.created_at).toLocaleDateString('ru-RU');
        
        await sendMessage(chatId,
            `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
            `üë§ –ò–º—è: ${userProfile.first_name}\n` +
            `üìÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å: ${memberSince}\n` +
            `üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${userProfile.free_predictions_left}\n` +
            `‚≠ê –ü—Ä–µ–º–∏—É–º: ${userProfile.is_subscribed ? '–î–∞' : '–ù–µ—Ç'}\n` +
            `‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsCount.count}\n` +
            `üåÖ –ö–∞—Ä—Ç –¥–Ω—è: ${dailyCardsCount.count}\n` +
            `üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${userProfile.referral_count}`
        );

    } catch (error) {
        console.error('‚ùå Error in stats command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
async function handle
