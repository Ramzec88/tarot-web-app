// api/telegram-webhook.js - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
// ========================================================================

import { createClient } from '@supabase/supabase-js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    try {
        const update = req.body;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
        if (!update.message && !update.callback_query) {
            return res.status(200).json({ ok: true });
        }

        const message = update.message || update.callback_query?.message;
        const user = message?.from || update.callback_query?.from;
        
        if (!user) {
            return res.status(200).json({ ok: true });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (message?.text) {
            await handleTextMessage(message, user);
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App
        if (message?.web_app_data) {
            await handleWebAppData(message.web_app_data, user);
        }

        return res.status(200).json({ ok: true });

    } catch (error) {
        console.error('‚ùå Telegram webhook error:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTextMessage(message, user) {
    const text = message.text;
    const chatId = message.chat.id;

    switch (text) {
        case '/start':
            await handleStartCommand(chatId, user);
            break;
        case '/premium':
            await handlePremiumCommand(chatId, user);
            break;
        case '/stats':
            await handleStatsCommand(chatId, user);
            break;
        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(chatId, user) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
        const { data: existingUser } = await supabase
            .from('tarot_user_profiles')
            .select('*')
            .eq('user_id', user.id)
            .maybeSingle();

        if (!existingUser) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await supabase
                .from('tarot_user_profiles')
                .insert([{
                    user_id: user.id,
                    chat_id: chatId,
                    username: user.username,
                    first_name: user.first_name,
                    last_name: user.last_name,
                    free_predictions_left: 3,
                    is_subscribed: false,
                    referral_code: `ref_${user.id}`
                }]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendMessage(chatId, 
            `üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫–∞—Ä—Ç –¢–∞—Ä–æ!\n\n` +
            `–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –∫–∞—Ä—Ç.\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:`,
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: 'üÉè –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–∞—Ä–æ',
                            web_app: { url: `${process.env.VERCEL_URL || 'https://your-app.vercel.app'}` }
                        }
                    ]]
                }
            }
        );

    } catch (error) {
        console.error('‚ùå Error in start command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /premium
async function handlePremiumCommand(chatId, user) {
    try {
        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('is_subscribed, subscription_expiry_date, free_predictions_left')
            .eq('user_id', user.id)
            .maybeSingle();

        if (!userProfile) {
            await sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
            return;
        }

        if (userProfile.is_subscribed) {
            const expiryDate = new Date(userProfile.subscription_expiry_date).toLocaleDateString('ru-RU');
            await sendMessage(chatId, `‚≠ê –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ ${expiryDate}`);
        } else {
            await sendMessage(chatId, 
                `üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞\n\n` +
                `üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${userProfile.free_predictions_left}\n\n` +
                `‚≠ê –° –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n` +
                `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º\n` +
                `‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n` +
                `‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n` +
                `‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n` +
                `üí∞ –í—Å–µ–≥–æ 299‚ÇΩ –Ω–∞ 30 –¥–Ω–µ–π`,
                {
                    reply_markup: {
                        inline_keyboard: [[
                            {
                                text: 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º',
                                url: process.env.PAYMENT_URL || 'https://digital.wildberries.ru/offer/491728'
                            }
                        ]]
                    }
                }
            );
        }

    } catch (error) {
        console.error('‚ùå Error in premium command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
async function handleStatsCommand(chatId, user) {
    try {
        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('*')
            .eq('user_id', user.id)
            .maybeSingle();

        if (!userProfile) {
            await sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const [questionsCount, dailyCardsCount] = await Promise.all([
            supabase.from('tarot_questions').select('id', { count: 'exact' }).eq('user_id', user.id),
            supabase.from('tarot_daily_cards').select('id', { count: 'exact' }).eq('user_id', user.id)
        ]);

        const memberSince = new Date(userProfile.created_at).toLocaleDateString('ru-RU');
        
        await sendMessage(chatId,
            `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
            `üë§ –ò–º—è: ${userProfile.first_name}\n` +
            `üìÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å: ${memberSince}\n` +
            `üé´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${userProfile.free_predictions_left}\n` +
            `‚≠ê –ü—Ä–µ–º–∏—É–º: ${userProfile.is_subscribed ? '–î–∞' : '–ù–µ—Ç'}\n` +
            `‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsCount.count}\n` +
            `üåÖ –ö–∞—Ä—Ç –¥–Ω—è: ${dailyCardsCount.count}\n` +
            `üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${userProfile.referral_count}`
        );

    } catch (error) {
        console.error('‚ùå Error in stats command:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
async function handleWebAppData(webAppData, user) {
    try {
        const data = JSON.parse(webAppData.data);
        
        switch (data.type) {
            case 'history_share':
                await handleHistoryShare(user.id, data);
                break;
            case 'premium_purchase':
                await handlePremiumPurchase(user.id, data);
                break;
            case 'feedback':
                await handleFeedback(user.id, data);
                break;
            default:
                console.log('Unknown web app data type:', data.type);
        }

    } catch (error) {
        console.error('‚ùå Error handling web app data:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π
async function handleHistoryShare(userId, data) {
    try {
        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('chat_id')
            .eq('user_id', userId)
            .maybeSingle();

        if (!userProfile) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        const message = data.text_message || '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
        
        await sendMessage(userProfile.chat_id, 
            `üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¢–∞—Ä–æ:\n\n${message}`,
            {
                parse_mode: 'Markdown'
            }
        );

    } catch (error) {
        console.error('‚ùå Error sharing history:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º
async function handlePremiumPurchase(userId, data) {
    try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        const expiryDate = new Date();
        expiryDate.setDate(expiryDate.getDate() + 30); // 30 –¥–Ω–µ–π

        await supabase
            .from('tarot_user_profiles')
            .update({
                is_subscribed: true,
                subscription_expiry_date: expiryDate.toISOString(),
                updated_at: new Date().toISOString()
            })
            .eq('user_id', userId);

        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('chat_id, first_name')
            .eq('user_id', userId)
            .maybeSingle();

        if (userProfile) {
            await sendMessage(userProfile.chat_id,
                `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${userProfile.first_name}!\n\n` +
                `‚≠ê –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
                `‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n` +
                `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n` +
                `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è\n\n` +
                `–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üîÆ`
            );
        }

    } catch (error) {
        console.error('‚ùå Error handling premium purchase:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
async function handleFeedback(userId, data) {
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await supabase
            .from('tarot_reviews')
            .insert([{
                user_id: userId,
                rating: data.rating,
                review_text: data.text,
                is_anonymous: data.is_anonymous || false,
                is_approved: false // –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            }]);

        const { data: userProfile } = await supabase
            .from('tarot_user_profiles')
            .select('chat_id')
            .eq('user_id', userId)
            .maybeSingle();

        if (userProfile) {
            await sendMessage(userProfile.chat_id,
                `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n` +
                `–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. ` +
                `–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`
            );
        }

    } catch (error) {
        console.error('‚ùå Error handling feedback:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId, text, options = {}) {
    try {
        const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: text,
                ...options
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }

        return await response.json();

    } catch (error) {
        console.error('‚ùå Error sending message:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
export async function setWebhook() {
    try {
        const webhookUrl = `${process.env.VERCEL_URL}/api/telegram-webhook`;
        
        const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: webhookUrl,
                allowed_updates: ['message', 'callback_query']
            })
        });

        const result = await response.json();
        console.log('Webhook set result:', result);
        
        return result;

    } catch (error) {
        console.error('‚ùå Error setting webhook:', error);
        throw error;
    }
}
