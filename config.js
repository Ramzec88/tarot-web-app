// config.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
// ========================================================================

// üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –° –ü–û–õ–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô
async function initializeConfig() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –®—ë–ø–æ—Ç –ö–∞—Ä—Ç...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ API –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        await loadConfigFromAPI();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        setupFallbackConfigs();
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const isValid = validateAllConfigs();
        
        if (isValid) {
            console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return true;
        } else {
            console.warn('‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        
        // –ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        emergencyConfigRecovery();
        return false;
    }
}

// üåê –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò–ó API
async function loadConfigFromAPI() {
    try {
        console.log('üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ API...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const response = await fetch('/api/config', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const config = await response.json();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (config.supabase) {
                window.SUPABASE_CONFIG = config.supabase;
                console.log('‚úÖ Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ API');
            }
            
            if (config.api) {
                window.API_CONFIG = {
                    n8nWebhookUrl: process.env.N8N_WEBHOOK_URL || 'https://your-n8n.app/webhook/tarot',
                    cardsUrl: config.api.cardsUrl || 'https://raw.githubusercontent.com/username/tarot-cards/main/cards.json',
                    paymentUrl: config.api.paymentUrl,
                    timeout: 10000,
                    retryAttempts: 3
                };
                console.log('‚úÖ API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ API');
            }
            
            if (config.app) {
                window.APP_CONFIG = {
                    ...getDefaultAppConfig(),
                    freeQuestionsLimit: config.app.freeQuestionsLimit || 3,
                    premiumPrice: config.app.premiumPrice || 299
                };
                console.log('‚úÖ App –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ API');
            }
            
            return true;
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ API:', error);
    }
    
    return false;
}

// üõ°Ô∏è –£–°–¢–ê–ù–û–í–ö–ê FALLBACK –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô
function setupFallbackConfigs() {
    // üóÑÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE
    if (!window.SUPABASE_CONFIG) {
        window.SUPABASE_CONFIG = {
            url: getEnvVar('SUPABASE_URL', 'https://your-project.supabase.co'),
            anonKey: getEnvVar('SUPABASE_ANON_KEY', 'your-anon-key-here')
        };
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase');
    }

    // üîó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API
    if (!window.API_CONFIG) {
        window.API_CONFIG = {
            n8nWebhookUrl: getEnvVar('N8N_WEBHOOK_URL', 'https://your-n8n.app/webhook/tarot'),
            cardsUrl: getEnvVar('GITHUB_CARDS_URL', 'https://raw.githubusercontent.com/username/tarot-cards/main/cards.json'),
            timeout: 10000,
            retryAttempts: 3
        };
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API');
    }

    // üì± –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    if (!window.APP_CONFIG) {
        window.APP_CONFIG = getDefaultAppConfig();
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
    
    // üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶ SUPABASE
    if (!window.TABLES) {
        window.TABLES = {
            userProfiles: 'tarot_user_profiles',
            predictions: 'tarot_predictions',
            dailyCards: 'tarot_daily_cards',
            reviews: 'tarot_reviews',
            spreads: 'tarot_spreads'
        };
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü');
    }
    
    // üì± –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø TELEGRAM
    if (!window.TELEGRAM_CONFIG) {
        window.TELEGRAM_CONFIG = {
            botUsername: 'ShepotKartBot',
            webAppUrl: getEnvVar('VERCEL_URL', 'https://your-app.vercel.app'),
            supportBot: '@Helppodark_bot'
        };
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram');
    }
    
    // üÉè FALLBACK –ö–ê–†–¢–´
    if (!window.FALLBACK_CARDS) {
        window.FALLBACK_CARDS = getDefaultCards();
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback –∫–∞—Ä—Ç—ã');
    }
    
    // üîÆ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –†–ê–°–ö–õ–ê–î–û–í
    if (!window.SPREADS_CONFIG) {
        window.SPREADS_CONFIG = getDefaultSpreads();
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback —Ä–∞—Å–∫–ª–∞–¥—ã');
    }
}

// üì± –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
function getDefaultAppConfig() {
    return {
        appName: '–®—ë–ø–æ—Ç –ö–∞—Ä—Ç',
        version: '1.0.0',
        freeQuestionsLimit: 3,
        maxHistoryItems: 50,
        cacheExpiry: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
        
        texts: {
            loading: '–ö–∞—Ä—Ç—ã —à–µ–ø—á—É—Ç...',
            cardsReady: '–ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã!',
            error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
            noConnection: '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
            tryAgain: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
            premium: '–ü—Ä–µ–º–∏—É–º',
            free: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
            subscribe: '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            questionsLeft: '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã:',
            noQuestionsLeft: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
        },
        
        ui: {
            animationDuration: 300,
            showAnimations: true,
            vibrationEnabled: true,
            notificationDuration: 3000
        }
    };
}

// üÉè –ö–ê–†–¢–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
function getDefaultCards() {
    return [
        {
            id: "FOOL",
            name: "–î—É—Ä–∞–∫",
            symbol: "üÉè",
            meaning: "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞",
            type: "–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω",
            number: 0
        },
        {
            id: "MAGICIAN",
            name: "–ú–∞–≥",
            symbol: "üé©",
            meaning: "–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è",
            type: "–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω",
            number: 1
        },
        {
            id: "HIGH_PRIESTESS",
            name: "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –∂—Ä–∏—Ü–∞",
            symbol: "üåô",
            meaning: "–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å",
            type: "–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω",
            number: 2
        },
        {
            id: "EMPRESS",
            name: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞",
            symbol: "üëë",
            meaning: "–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∏–∑–æ–±–∏–ª–∏–µ",
            type: "–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω",
            number: 3
        },
        {
            id: "EMPEROR",
            name: "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
            symbol: "‚ö°",
            meaning: "–í–ª–∞—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            type: "–°—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω",
            number: 4
        }
    ];
}

// üîÆ –†–ê–°–ö–õ–ê–î–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
function getDefaultSpreads() {
    return {
        simple: {
            name: '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥',
            description: '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å',
            cardCount: 1,
            positions: [
                { name: '–û—Ç–≤–µ—Ç', description: '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å' }
            ]
        },
        three_cards: {
            name: '–¢—Ä–∏ –∫–∞—Ä—Ç—ã',
            description: '–ü—Ä–æ—à–ª–æ–µ, –Ω–∞—Å—Ç–æ—è—â–µ–µ, –±—É–¥—É—â–µ–µ',
            cardCount: 3,
            positions: [
                { name: '–ü—Ä–æ—à–ª–æ–µ', description: '–ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏' },
                { name: '–ù–∞—Å—Ç–æ—è—â–µ–µ', description: '–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ' },
                { name: '–ë—É–¥—É—â–µ–µ', description: '–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π' }
            ]
        },
        love: {
            name: '–õ—é–±–æ–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥',
            description: '–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —á—É–≤—Å—Ç–≤–∞',
            cardCount: 2,
            positions: [
                { name: '–í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞', description: '–ß—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ' },
                { name: '–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞', description: '–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–æ–π' }
            ]
        }
    };
}

// ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –í–°–ï–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô
function validateAllConfigs() {
    const validations = [
        { name: 'SUPABASE_CONFIG', obj: window.SUPABASE_CONFIG, required: ['url', 'anonKey'] },
        { name: 'API_CONFIG', obj: window.API_CONFIG, required: ['n8nWebhookUrl', 'cardsUrl'] },
        { name: 'APP_CONFIG', obj: window.APP_CONFIG, required: ['appName', 'version', 'freeQuestionsLimit'] },
        { name: 'TABLES', obj: window.TABLES, required: ['userProfiles', 'predictions'] },
        { name: 'FALLBACK_CARDS', obj: window.FALLBACK_CARDS, required: [] }
    ];

    let allValid = true;
    
    for (const validation of validations) {
        if (!validation.obj) {
            console.error(`‚ùå ${validation.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            allValid = false;
            continue;
        }

        for (const field of validation.required) {
            if (!validation.obj[field]) {
                console.error(`‚ùå ${validation.name}.${field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç`);
                allValid = false;
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (validation.name === 'SUPABASE_CONFIG') {
            if (!isValidUrl(validation.obj.url)) {
                console.error('‚ùå SUPABASE_CONFIG.url –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                allValid = false;
            }
        }
        
        if (validation.name === 'API_CONFIG') {
            if (!isValidUrl(validation.obj.cardsUrl)) {
                console.error('‚ùå API_CONFIG.cardsUrl –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                allValid = false;
            }
        }
    }

    return allValid;
}

// üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï
function emergencyConfigRecovery() {
    console.warn('üö® –ó–∞–ø—É—Å–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    try {
        window.APP_CONFIG = {
            appName: '–®—ë–ø–æ—Ç –ö–∞—Ä—Ç',
            version: '1.0.0-emergency',
            freeQuestionsLimit: 1,
            texts: {
                loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
                error: '–û—à–∏–±–∫–∞',
                cardsReady: '–ì–æ—Ç–æ–≤–æ'
            }
        };

        window.FALLBACK_CARDS = [
            {
                id: "EMERGENCY",
                name: "–ó–≤–µ–∑–¥–∞ –ù–∞–¥–µ–∂–¥—ã",
                symbol: "‚≠ê",
                meaning: "–î–∞–∂–µ –≤ —Ç—Ä—É–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –µ—Å—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç—É–Ω–Ω–µ–ª—è",
                type: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è"
            }
        ];

        window.SPREADS_CONFIG = {
            simple: {
                name: '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å–∫–ª–∞–¥',
                description: '–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å',
                cardCount: 1,
                positions: [{ name: '–û—Ç–≤–µ—Ç', description: '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å' }]
            }
        };

        console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
        return true;
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        return false;
    }
}

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function getEnvVar(name, defaultValue = '') {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if (typeof process !== 'undefined' && process.env && process.env[name]) {
            return process.env[name];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if (typeof window !== 'undefined' && window[name]) {
            return window[name];
        }
        
        return defaultValue;
        
    } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${name}:`, error);
        return defaultValue;
    }
}

function isValidUrl(string) {
    try {
        new URL(string);
        return true;
    } catch {
        return false;
    }
}

// üìä –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
function getSupabaseConfig() {
    if (!window.SUPABASE_CONFIG) {
        console.warn('‚ö†Ô∏è SUPABASE_CONFIG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return null;
    }
    return window.SUPABASE_CONFIG;
}

function getAPIConfig() {
    if (!window.API_CONFIG) {
        console.warn('‚ö†Ô∏è API_CONFIG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return null;
    }
    return window.API_CONFIG;
}

function getAppConfig() {
    if (!window.APP_CONFIG) {
        console.warn('‚ö†Ô∏è APP_CONFIG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return null;
    }
    return window.APP_CONFIG;
}

// ‚úÖ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò
function isConfigReady() {
    return !!(
        window.SUPABASE_CONFIG &&
        window.API_CONFIG &&
        window.APP_CONFIG &&
        window.FALLBACK_CARDS &&
        window.TABLES
    );
}

// üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
async function reloadConfig() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    
    // –û—á–∏—â–∞–µ–º
    delete window.SUPABASE_CONFIG;
    delete window.API_CONFIG;
    delete window.APP_CONFIG;
    delete window.TABLES;
    delete window.TELEGRAM_CONFIG;
    delete window.FALLBACK_CARDS;
    delete window.SPREADS_CONFIG;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
    return await initializeConfig();
}

// üîß –û–¢–õ–ê–î–ö–ê
function debugConfig() {
    console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', {
        supabase: !!window.SUPABASE_CONFIG,
        api: !!window.API_CONFIG,
        app: !!window.APP_CONFIG,
        tables: !!window.TABLES,
        telegram: !!window.TELEGRAM_CONFIG,
        fallbackCards: window.FALLBACK_CARDS ? window.FALLBACK_CARDS.length : 0,
        spreads: window.SPREADS_CONFIG ? Object.keys(window.SPREADS_CONFIG).length : 0
    });
}

// üì§ –≠–ö–°–ü–û–†–¢
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initializeConfig,
        getSupabaseConfig,
        getAPIConfig,
        getAppConfig,
        debugConfig,
        reloadConfig,
        isConfigReady,
        emergencyConfigRecovery
    };
}

// üèÅ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('üèÅ DOM –≥–æ—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
        initializeConfig();
    });
}
