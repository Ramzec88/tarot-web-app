// supabase-functions.js - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
// ========================================================================

// üîó –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
let supabase = null;

// üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE
function initSupabase() {
    try {
        if (typeof window.supabase !== 'undefined' && SUPABASE_CONFIG.url && SUPABASE_CONFIG.anonKey) {
            supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
            console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            return true;
        } else {
            console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üë§ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createOrGetUserProfile(telegramUser) {
    if (!supabase) {
        console.warn('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return null;
    }

    try {
        const userId = telegramUser.id;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: existingUser, error: selectError } = await supabase
            .from(TABLES.userProfiles)
            .select('*')
            .eq('user_id', userId)
            .single();

        if (existingUser && !selectError) {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', existingUser.username || existingUser.first_name);
            return existingUser;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        const newUserProfile = {
            user_id: userId,
            chat_id: telegramUser.chat_id || userId,
            username: telegramUser.username || null,
            first_name: telegramUser.first_name || null,
            last_name: telegramUser.last_name || null,
            free_predictions_left: APP_CONFIG.freeQuestionsLimit,
            is_subscribed: false,
            referral_code: `ref_${userId}`,
            referral_count: 0,
            total_questions: 0
        };

        const { data: newUser, error: insertError } = await supabase
            .from(TABLES.userProfiles)
            .insert([newUserProfile])
            .select()
            .single();

        if (insertError) {
            throw insertError;
        }

        console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', newUser.username || newUser.first_name);
        return newUser;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserProfile(userId, updates) {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.userProfiles)
            .update({
                ...updates,
                updated_at: new Date().toISOString()
            })
            .eq('user_id', userId)
            .select()
            .single();

        if (error) throw error;

        console.log('üìù –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', userId);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserProfile(userId) {
    if (!supabase) return null;

    try {
        const { data, error } = await supabase
            .from(TABLES.userProfiles)
            .select('*')
            .eq('user_id', userId)
            .single();

        if (error) throw error;

        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return null;
    }
}

// üÉè –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢ –î–ù–Ø

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function saveDailyCardToSupabase(userId, cardData, aiPrediction = null) {
    if (!supabase) return false;

    try {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç

        const { data, error } = await supabase
            .from(TABLES.dailyCards)
            .insert([{
                user_id: userId,
                card_data: cardData,
                ai_prediction: aiPrediction,
                card_date: today
            }])
            .select()
            .single();

        if (error) {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            if (error.code === '23505') { // unique_violation
                return await updateDailyCard(userId, cardData, aiPrediction);
            }
            throw error;
        }

        console.log('üíæ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', cardData.name);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function updateDailyCard(userId, cardData, aiPrediction) {
    if (!supabase) return false;

    try {
        const today = new Date().toISOString().split('T')[0];

        const { data, error } = await supabase
            .from(TABLES.dailyCards)
            .update({
                card_data: cardData,
                ai_prediction: aiPrediction
            })
            .eq('user_id', userId)
            .eq('card_date', today)
            .select()
            .single();

        if (error) throw error;

        console.log('üîÑ –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', cardData.name);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function getTodayDailyCard(userId) {
    if (!supabase) return null;

    try {
        const today = new Date().toISOString().split('T')[0];

        const { data, error } = await supabase
            .from(TABLES.dailyCards)
            .select('*')
            .eq('user_id', userId)
            .eq('card_date', today)
            .single();

        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            throw error;
        }

        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return null;
    }
}

// ‚ùì –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async function saveQuestionToSupabase(userId, questionText, questionType = 'question') {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.questions)
            .insert([{
                user_id: userId,
                question_text: questionText,
                question_type: questionType
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', questionText.substring(0, 50) + '...');
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return false;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async function saveAnswerToSupabase(userId, questionId, cardsDrawn, aiPrediction, spreadType = null) {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.answers)
            .insert([{
                question_id: questionId,
                user_id: userId,
                cards_drawn: cardsDrawn,
                ai_prediction: aiPrediction,
                spread_type: spreadType
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return false;
    }
}

// üé¥ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–ö–õ–ê–î–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
async function saveSpreadToSupabase(userId, spreadName, cardsData, question = null) {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.spreads)
            .insert([{
                user_id: userId,
                spread_name: spreadName,
                cards_data: cardsData,
                question: question
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –†–∞—Å–∫–ª–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', spreadName);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        return false;
    }
}

// üìö –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–¢–û–†–ò–ò

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserHistory(userId, limit = 50) {
    if (!supabase) return [];

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–Ω—è
        const { data: dailyCards, error: dailyError } = await supabase
            .from(TABLES.dailyCards)
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        const { data: questionsWithAnswers, error: questionsError } = await supabase
            .from(TABLES.questions)
            .select(`
                *,
                tarot_answers (*)
            `)
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã
        const { data: spreads, error: spreadsError } = await supabase
            .from(TABLES.spreads)
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (dailyError || questionsError || spreadsError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', { dailyError, questionsError, spreadsError });
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        const allHistory = [
            ...(dailyCards || []).map(item => ({ ...item, type: 'daily' })),
            ...(questionsWithAnswers || []).map(item => ({ ...item, type: 'question' })),
            ...(spreads || []).map(item => ({ ...item, type: 'spread' }))
        ].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
        return allHistory;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return [];
    }
}

// üí¨ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ó–´–í–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
async function saveReviewToSupabase(userId, rating, reviewText, isAnonymous = false) {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.reviews)
            .insert([{
                user_id: userId,
                rating: rating,
                review_text: reviewText,
                is_anonymous: isAnonymous,
                is_approved: false // –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
async function getApprovedReviews(limit = 20) {
    if (!supabase) return [];

    try {
        const { data, error } = await supabase
            .from(TABLES.reviews)
            .select(`
                id,
                rating,
                review_text,
                is_anonymous,
                created_at,
                tarot_user_profiles (username, first_name)
            `)
            .eq('is_approved', true)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (error) throw error;

        return data || [];

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        return [];
    }
}

// üìä –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserSubscription(userId) {
    if (!supabase) return { isSubscribed: false, daysLeft: 0 };

    try {
        const userProfile = await getUserProfile(userId);
        if (!userProfile) return { isSubscribed: false, daysLeft: 0 };

        if (!userProfile.is_subscribed || !userProfile.subscription_expiry_date) {
            return { isSubscribed: false, daysLeft: 0 };
        }

        const expiryDate = new Date(userProfile.subscription_expiry_date);
        const now = new Date();
        const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));

        if (daysLeft <= 0) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await updateUserProfile(userId, {
                is_subscribed: false,
                subscription_expiry_date: null
            });
            return { isSubscribed: false, daysLeft: 0 };
        }

        return { isSubscribed: true, daysLeft };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return { isSubscribed: false, daysLeft: 0 };
    }
}

// –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function decrementFreeQuestions(userId) {
    if (!supabase) return false;

    try {
        const { data, error } = await supabase
            .from(TABLES.userProfiles)
            .update({
                free_predictions_left: supabase.raw('free_predictions_left - 1'),
                total_questions: supabase.raw('total_questions + 1')
            })
            .eq('user_id', userId)
            .select()
            .single();

        if (error) throw error;

        console.log(`üìâ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${data.free_predictions_left}`);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
        return false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async function cleanupOldRecords() {
    if (!supabase) return false;

    try {
        const threeMonthsAgo = new Date();
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã –¥–Ω—è (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
        await supabase
            .from(TABLES.dailyCards)
            .delete()
            .lt('created_at', threeMonthsAgo.toISOString());

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        await supabase
            .from(TABLES.questions)
            .delete()
            .lt('created_at', threeMonthsAgo.toISOString());

        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
        return false;
    }
}

// üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° N8N (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)

// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ n8n (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function syncUserToN8N(userProfile) {
    try {
        const response = await fetch(API_CONFIG.createUser, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: userProfile.user_id,
                chat_id: userProfile.chat_id,
                username: userProfile.username,
                first_name: userProfile.first_name,
                free_predictions_left: userProfile.free_predictions_left,
                is_subscribed: userProfile.is_subscribed,
                subscription_expiry_date: userProfile.subscription_expiry_date,
                referral_code: userProfile.referral_code,
                source: 'supabase_sync'
            })
        });

        if (response.ok) {
            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å n8n');
        }

    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å n8n:', error);
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ n8n –¥–ª—è –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∏
async function sendPredictionToN8N(userId, question, cardsData, type = 'question') {
    try {
        const response = await fetch(API_CONFIG.generatePrediction, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user_id: userId,
                question: question,
                cards: cardsData,
                type: type,
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }

        const result = await response.json();
        console.log('ü§ñ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç n8n');
        return result.prediction || result.message || '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç n8n:', error);
        return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –§–£–ù–ö–¶–ò–ò (–æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ Supabase + n8n)

// –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
async function saveCompleteQuestionSession(userId, questionText, cardsData, aiPrediction, questionType = 'question') {
    const results = {
        question: null,
        answer: null,
        profile: null,
        n8nSync: false
    };

    try {
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Supabase
        results.question = await saveQuestionToSupabase(userId, questionText, questionType);
        
        if (results.question) {
            // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ Supabase
            results.answer = await saveAnswerToSupabase(
                userId, 
                results.question.id, 
                cardsData, 
                aiPrediction
            );

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º)
            const userProfile = await getUserProfile(userId);
            if (userProfile && !userProfile.is_subscribed && questionType !== 'daily') {
                results.profile = await decrementFreeQuestions(userId);
            }

            // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            try {
                await fetch(API_CONFIG.saveQuestion, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        user_id: userId,
                        question: questionText,
                        cards: cardsData,
                        ai_prediction: aiPrediction,
                        type: questionType,
                        supabase_id: results.question.id
                    })
                });
                results.n8nSync = true;
            } catch (n8nError) {
                console.warn('‚ö†Ô∏è n8n —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', n8nError);
            }
        }

        console.log('üíæ –°–µ—Å—Å–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return results;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return results;
    }
}

// –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
async function saveCompleteDailyCardSession(userId, cardData) {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è
        const existingCard = await getTodayDailyCard(userId);
        if (existingCard) {
            console.log('üìÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —É–∂–µ –±—ã–ª–∞ –≤—ã—Ç—è–Ω—É—Ç–∞ —Å–µ–≥–æ–¥–Ω—è');
            return existingCard;
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
        const aiPrediction = await sendPredictionToN8N(userId, '–ö–∞—Ä—Ç–∞ –¥–Ω—è', [cardData], 'daily');

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
        const savedCard = await saveDailyCardToSupabase(userId, cardData, aiPrediction);

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã –¥–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if (savedCard) {
            await updateUserProfile(userId, {
                last_card_day: new Date().toISOString().split('T')[0]
            });
        }

        console.log('üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return savedCard;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// üì± –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM WEB APP

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
async function initTelegramUser() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
        let telegramUser = null;
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe) {
            telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
        }

        if (!telegramUser) {
            console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            telegramUser = {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'test_user'
            };
        }

        console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', telegramUser.first_name);

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProfile = await createOrGetUserProfile(telegramUser);

        if (userProfile) {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å n8n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await syncUserToN8N(userProfile);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            window.currentUser = userProfile;
            
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return userProfile;
        }

        return null;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// üîç –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò

// –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
async function searchUserHistory(userId, searchText, type = null) {
    if (!supabase || !searchText) return [];

    try {
        let query = supabase
            .from(TABLES.questions)
            .select(`
                *,
                tarot_answers (*)
            `)
            .eq('user_id', userId)
            .ilike('question_text', `%${searchText}%`);

        if (type) {
            query = query.eq('question_type', type);
        }

        const { data, error } = await query
            .order('created_at', { ascending: false })
            .limit(20);

        if (error) throw error;

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchText}"`);
        return data || [];

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStatistics(userId) {
    if (!supabase) return null;

    try {
        const userProfile = await getUserProfile(userId);
        if (!userProfile) return null;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const [dailyCardsCount, questionsCount, spreadsCount] = await Promise.all([
            supabase.from(TABLES.dailyCards).select('id', { count: 'exact' }).eq('user_id', userId),
            supabase.from(TABLES.questions).select('id', { count: 'exact' }).eq('user_id', userId),
            supabase.from(TABLES.spreads).select('id', { count: 'exact' }).eq('user_id', userId)
        ]);

        const stats = {
            profile: userProfile,
            dailyCards: dailyCardsCount.count || 0,
            totalQuestions: questionsCount.count || 0,
            spreads: spreadsCount.count || 0,
            freeQuestionsLeft: userProfile.free_predictions_left,
            isSubscribed: userProfile.is_subscribed,
            memberSince: userProfile.created_at
        };

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞');
        return stats;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
    }
}

// üõ°Ô∏è –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –í–ê–õ–ò–î–ê–¶–ò–ò

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function validateUserData(userData) {
    const required = ['user_id'];
    const optional = ['username', 'first_name', 'last_name', 'chat_id'];
    
    for (const field of required) {
        if (!userData[field]) {
            throw new Error(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
        }
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitized = {};
    [...required, ...optional].forEach(field => {
        if (userData[field] !== undefined) {
            sanitized[field] = typeof userData[field] === 'string' 
                ? userData[field].trim().substring(0, 255) 
                : userData[field];
        }
    });

    return sanitized;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
function checkUserPermissions(userId, action) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return true;
}

// üîÑ –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –§–ê–ô–õ–ê–•
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initSupabase,
        createOrGetUserProfile,
        updateUserProfile,
        getUserProfile,
        saveDailyCardToSupabase,
        getTodayDailyCard,
        saveQuestionToSupabase,
        saveAnswerToSupabase,
        saveSpreadToSupabase,
        getUserHistory,
        saveReviewToSupabase,
        getApprovedReviews,
        checkUserSubscription,
        decrementFreeQuestions,
        saveCompleteQuestionSession,
        saveCompleteDailyCardSession,
        initTelegramUser,
        searchUserHistory,
        getUserStatistics,
        sendPredictionToN8N,
        syncUserToN8N
    };
}