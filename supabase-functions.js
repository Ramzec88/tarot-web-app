// supabase-functions.js - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
// ========================================================================

// üîó –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ initSupabase
let supabase = null;

// üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ script.js -> ensureSupabaseLibrary)
window.initSupabase = function() { // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ script.js
    try {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (!window.SUPABASE_CONFIG || !window.SUPABASE_CONFIG.url || !window.SUPABASE_CONFIG.anonKey) {
            console.error('‚ùå Supabase: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SUPABASE_CONFIG –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞.');
            return false;
        }
        if (typeof window.supabase === 'undefined' || !window.supabase.createClient) {
             console.error('‚ùå Supabase: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Supabase –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
             return false;
        }

        supabase = window.supabase.createClient(window.SUPABASE_CONFIG.url, window.SUPABASE_CONFIG.anonKey, {
            auth: {
                autoRefreshToken: true,
                persistSession: true,
                detectSessionInUrl: false
            },
            realtime: {
                params: {
                    eventsPerSecond: 2
                }
            }
        });
        console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞:', error);
        return false;
    }
};


// üë§ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createOrGetUserProfile(telegramUser) {
    if (!supabase) {
        console.warn('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è createOrGetUserProfile.');
        return null;
    }
    if (!window.TABLES || !window.TABLES.userProfiles) {
        console.error('TABLES.userProfiles –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return null;
    }

    try {
        // Telegram user ID —Ç–µ–ø–µ—Ä—å BIGINT, –∞ Supabase auth.uid() - UUID
        // –ú—ã –ù–ï –î–û–õ–ñ–ù–´ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegramUser.id –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ user_id –¥–ª—è RLS,
        // –µ—Å–ª–∏ –≤ Supabase user_id UUID.
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, user_id –≤ Supabase –±—É–¥–µ—Ç UUID, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º Supabase.
        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ auth.uid() –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ Telegram OAuth –≤ –±—É–¥—É—â–µ–º).
        // –î–ª—è Web App, –≥–¥–µ –ø—Ä—è–º–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç, Telegram user ID (BIGINT) –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å
        // –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, –∞ user_id (UUID) –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º.

        // –î–ª—è —Ü–µ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ Web App (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ OAuth):
        // –ï—Å–ª–∏ user_id –≤ Supabase - UUID, –∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç Telegram ID (BIGINT),
        // –Ω–∞–º –Ω—É–∂–µ–Ω —Å–ø–æ—Å–æ–± —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ö.
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ Telegram ID (BIGINT) –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–æ–ª–µ `telegram_user_id` (BIGINT),
        // –∞ `user_id` (UUID) –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –≤ Supabase, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º Supabase.
        // –ò–Ω–∞—á–µ RLS –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

        // **** –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –í–ê–®–ò–ú–ò –¢–ê–ë–õ–ò–¶–ê–ú–ò (user_id: BIGINT) ****
        // –ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã user_id –≤ Supabase –±—ã–ª BIGINT,
        // –∏ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ auth.uid() –¥–ª—è RLS (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –µ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è),
        // —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å user_id –∫–∞–∫ BIGINT –≤ —Ç–∞–±–ª–∏—Ü–µ,
        // –ò –≤ –ø–æ–ª–∏—Ç–∏–∫–∞—Ö RLS —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å auth.jwt().claims->>'user_id' –µ—Å–ª–∏ user_id –≤ —Ç–æ–∫–µ–Ω–µ BIGINT.
        // –ò–ª–∏, –µ—Å–ª–∏ auth.uid() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, user_id –≤ —Ç–∞–±–ª–∏—Ü–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID.

        // –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å user_id UUID, –Ω–æ Telegram ID - BIGINT,
        // –Ω–∞–º –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –∫–∞–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å.
        // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram ID –∫–∞–∫ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á (telegram_user_id BIGINT),
        // –∞ UUID –ø—É—Å—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è Supabase –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π user_id.

        // –í—Ä–µ–º–µ–Ω–Ω–æ, –µ—Å–ª–∏ user_id –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ tarot_user_profiles –æ—Å—Ç–∞–ª—Å—è BIGINT,
        // –∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª UUID, –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑–µ.
        // –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ UUID, —Ç–æ:
        // window.Telegram.WebApp.initDataUnsafe.user.id - —ç—Ç–æ BIGINT –∏–∑ Telegram.
        // –î–ª—è RLS —Å UUID, –Ω–∞–º –Ω—É–∂–µ–Ω UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase.

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram –≤ Supabase:
        // –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegramUser.id (BIGINT) –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à–µ–º
        // Supabase `user_id` (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –≤—ã –ù–ï –∏–∑–º–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ UUID)
        // –ò–õ–ò
        // –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ `user_id` –Ω–∞ UUID, —Ç–æ –Ω–∞–º –Ω—É–∂–µ–Ω —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å UUID –∏–∑ Telegram ID.
        // –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É auth.uid() (UUID) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Telegram ID (BIGINT), RLS —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.
        // –î–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram Auth —Å Supabase,
        // –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –û–¢–ö–õ–Æ–ß–ò–ú RLS –¥–ª—è INSERT/UPDATE –¥–ª—è createOrGetUserProfile
        // –ò–õ–ò
        // –ò–∑–º–µ–Ω–∏–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 'telegram_id' –ø–æ–ª–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.

        // *** –í–ê–†–ò–ê–ù–¢ 1: –ï—Å–ª–∏ user_id –≤ tarot_user_profiles –í–°–Å –ï–©–ï BIGINT (–Ω–µ UUID) ***
        // (–≠—Ç–æ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è —Å –≤–∞—à–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º SQL-—Å–∫—Ä–∏–ø—Ç–æ–º, –Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, –∫–∞–∫ –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç Telegram ID)
        // –ï—Å–ª–∏ user_id –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ - BIGINT, —Ç–æ `auth.uid()` (UUID) –ù–ï –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –≤ RLS.
        // –¢–æ–≥–¥–∞ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–ª–∞–±–ª–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ.
        // –î–û–ü–£–°–¢–ò–ú, —á—Ç–æ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ tarot_user_profiles —ç—Ç–æ UUID, –∫–∞–∫ –≤—ã –æ–±–Ω–æ–≤–∏–ª–∏,
        // –Ω–æ —Ç–æ–≥–¥–∞ initTelegramUser –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        // –ò–õ–ò
        // –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –û–ë–•–û–î –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–µ—Å–ª–∏ user_id –≤ Supabase –ë–´–õ UUID)
        // –î–ª—è WebApp –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ Telegram Auth, user_id –≤ Supabase Auth –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ —Å Telegram ID.
        // –ü–æ—ç—Ç–æ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Supabase, –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å telegramUser.id
        // –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è telegram_user_id (–∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ö–µ–º—É).
        // –ê user_id –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è Supabase.

        // ---- –ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–ú–´–ô –°–¶–ï–ù–ê–†–ò–ô: user_id –≤ tarot_user_profiles - UUID, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ telegramUser.id (BIGINT) ----
        // –ó–¥–µ—Å—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç/–Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id
        // –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç telegram_user_id –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        // –í–ê–ñ–ù–û: auth.uid() (UUID) –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω —Å JWT —Ç–æ–∫–µ–Ω–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ Supabase Auth.
        // Telegram Web App –Ω–∞–ø—Ä—è–º—É—é –Ω–µ –¥–∞–µ—Ç JWT, –µ—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Supabase OAuth.

        // –î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ –∏—Å–∫–∞—Ç—å –ø–æ telegram_user_id, –î–û–ë–ê–í–ò–í –ï–ì–û –í –°–•–ï–ú–£ tarot_user_profiles
        // –ò–õ–ò, –µ—Å–ª–∏ user_id –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –≤—Å–µ-—Ç–∞–∫–∏ –æ—Å—Ç–∞–ª—Å—è BIGINT (–∫–∞–∫ Telegram ID),
        // —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–∞ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ 'auth.uid() = null' –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        // –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å RLS –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è INSERT/UPDATE –¥–ª—è `anon` —Ä–æ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞.

        // –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –û–¢–ö–õ–Æ–ß–ò–ú RLS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞, –∞ –ø–æ—Ç–æ–º –≤–∫–ª—é—á–∏–º.
        // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è `createOrGetUserProfile` —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `telegramUser.id` –Ω–∞–ø—Ä—è–º—É—é,
        // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ `user_id` –≤ —Ç–∞–±–ª–∏—Ü–µ `tarot_user_profiles` —è–≤–ª—è–µ—Ç—Å—è `BIGINT`.
        // –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ UUID, —Ç–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞.
        // –ï—Å–ª–∏ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ `tarot_user_profiles` - `UUID`, —Ç–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ –ø–æ–ª–µ `telegram_id BIGINT UNIQUE`.
        // –ò—Å–∫–∞—Ç—å –ø–æ –Ω–µ–º—É. –ê `user_id` (UUID) –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.

        // **** –ï—Å–ª–∏ `user_id` –≤ `tarot_user_profiles` –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ `UUID` ****
        // –ò—â–µ–º –ø–æ –ø–æ–ª—é, –∫–æ—Ç–æ—Ä–æ–µ —Ö—Ä–∞–Ω–∏—Ç Telegram ID (–¥–æ–ø—É—Å—Ç–∏–º, `telegram_id`)
        // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–ª—è `telegram_id` –≤ —Ç–∞–±–ª–∏—Ü–µ, –µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ user_id - UUID.
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º `user_id` –∫–∞–∫ Telegram ID (–µ—Å–ª–∏ –æ–Ω BIGINT –≤ –ë–î).
        // –ï—Å–ª–∏ –æ–Ω UUID, —Ç–æ —Å–ª–µ–¥—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è.

        const telegram_id_str = telegramUser.id.toString(); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BIGINT –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        // –ü–æ–∏—Å–∫ –ø–æ `telegram_id` (–µ—Å–ª–∏ —Ç–∞–∫–æ–µ –ø–æ–ª–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ–Ω–æ UNIQUE)
        let { data: existingUser, error: selectError } = await supabase
            .from(window.TABLES.userProfiles)
            .select('*')
            .eq('telegram_id', telegram_id_str) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ telegram_id
            .single();

        if (selectError && selectError.code === 'PGRST116') { // No rows found
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Telegram ID, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.');

            // –ï—Å–ª–∏ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ UUID, —Ç–æ —Ç—É—Ç –Ω–∞–º –Ω—É–∂–µ–Ω –∫–∞–∫–æ–π-—Ç–æ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å UUID
            // –ï—Å–ª–∏ Telegram ID (BIGINT) —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ `user_id` (UUID), —ç—Ç–æ –Ω–µ–ª–æ–≥–∏—á–Ω–æ.
            // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `user_id` –≤ –≤–∞—à–µ–π Supabase - —ç—Ç–æ `UUID`, –∞ `telegram_id` - —ç—Ç–æ `BIGINT`.
            // –ï—Å–ª–∏ —É –≤–∞—Å `user_id` –≤ Supabase - `BIGINT`, —Ç–æ —ç—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç, –Ω–æ —Ç–æ–≥–¥–∞ RLS —Å `auth.uid()` –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.

            // –í–ê–ñ–ù–û: –ï—Å–ª–∏ user_id –≤ DB UUID, –∞ Telegram id BIGINT:
            // –õ–∏–±–æ –≤–∞–º –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Supabase Auth,
            // –ª–∏–±–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ —Å `telegram_id`.
            // –î–ª—è —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, —è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ `tarot_user_profiles` –µ—Å—Ç—å –ø–æ–ª–µ `telegram_id BIGINT UNIQUE`
            // –ò–õ–ò, —á—Ç–æ `user_id` –≤ `tarot_user_profiles` –æ—Å—Ç–∞–ª—Å—è `BIGINT` –∏ –æ–Ω **–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ Telegram ID**.

            // ---- –î–ê–í–ê–ô–¢–ï –ü–†–ï–î–ü–û–õ–û–ñ–ò–ú, —á—Ç–æ user_id –≤ `tarot_user_profiles` = BIGINT (Telegram ID)
            // –≠—Ç–æ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø—É—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π WebApp –ª–æ–≥–∏–∫–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ Supabase Auth.
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ UUID, –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏ –µ–≥–æ.
            // –ï—Å–ª–∏ –≤—ã —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É–ª–∏ UUID, —Ç–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è `telegram_id` –ø–æ–ª—è.

            // **** –í–ê–†–ò–ê–ù–¢ 2: –ï—Å–ª–∏ user_id –≤ `tarot_user_profiles` —ç—Ç–æ BIGINT (Telegram ID) ****
            // (–≠—Ç–æ –ø—Ä–æ—â–µ –¥–ª—è –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏, –Ω–æ RLS `auth.uid()=user_id` –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
            // –ó–Ω–∞—á–∏—Ç, RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∏–±–æ —É–¥–∞–ª–µ–Ω—ã/–æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞,
            // –ª–∏–±–æ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ `true` –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ä–æ–ª–∏.

            const userIdToUse = telegramUser.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –Ω–∞–ø—Ä—è–º—É—é

            const newUserProfile = {
                user_id: userIdToUse, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID (BIGINT)
                chat_id: telegramUser.id, // chat_id —á–∞—Å—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å user_id –¥–ª—è WebApp
                username: telegramUser.username || null,
                first_name: telegramUser.first_name || null,
                last_name: telegramUser.last_name || null,
                free_predictions_left: APP_CONFIG.freeQuestionsLimit,
                is_subscribed: false,
                referral_code: `ref_${userIdToUse}`,
                referral_count: 0,
                total_questions: 0,
                display_name: telegramUser.first_name || telegramUser.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userIdToUse}` // –î–æ–±–∞–≤–∏–º display_name
            };

            const { data: newUser, error: insertError } = await supabase
                .from(window.TABLES.userProfiles)
                .insert([newUserProfile])
                .select()
                .single();

            if (insertError) {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º user_id (–∫–æ–Ω—Ñ–ª–∏–∫—Ç), —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
                // –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ SELECT –≤–µ—Ä–Ω—É–ª null, –Ω–æ INSERT —Å—Ä–∞–±–æ—Ç–∞–ª –∏–∑-–∑–∞ –≥–æ–Ω–∫–∏.
                if (insertError.code === '23505') { // unique_violation
                    console.log('–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–∏—Ç, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ SELECT.');
                    let { data: existingUserAfterConflict, error: selectAfterConflictError } = await supabase
                        .from(window.TABLES.userProfiles)
                        .select('*')
                        .eq('user_id', userIdToUse)
                        .single();
                    if (existingUserAfterConflict && !selectAfterConflictError) {
                        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞:', existingUserAfterConflict.username || existingUserAfterConflict.first_name);
                        return existingUserAfterConflict;
                    }
                }
                throw insertError;
            }

            console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', newUser.username || newUser.first_name);
            return newUser;

        } else if (existingUser) { // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ SELECT
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', existingUser.username || existingUser.first_name);
            return existingUser;
        }

        console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return null;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserProfile(userId, updates) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.userProfiles) {
        console.error('TABLES.userProfiles –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.userProfiles)
            .update({
                ...updates,
                updated_at: new Date().toISOString()
            })
            .eq('user_id', userId)
            .select()
            .single();

        if (error) throw error;

        console.log('üìù –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω:', userId);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserProfile(userId) {
    if (!supabase) return null;
    if (!window.TABLES || !window.TABLES.userProfiles) {
        console.error('TABLES.userProfiles –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return null;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.userProfiles)
            .select('*')
            .eq('user_id', userId)
            .single();

        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            throw error;
        }

        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return null;
    }
}

// üÉè –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢ –î–ù–Ø

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function saveDailyCardToSupabase(userId, cardData, aiPrediction = null) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.dailyCards) {
        console.error('TABLES.dailyCards –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD —Ñ–æ—Ä–º–∞—Ç

        const { data, error } = await supabase
            .from(window.TABLES.dailyCards)
            .insert([{
                user_id: userId,
                card_data: cardData,
                ai_prediction: aiPrediction,
                card_date: today
            }])
            .select()
            .single();

        if (error) {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –º—ã –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
            if (error.code === '23505') { // unique_violation
                console.warn('–ö–∞—Ä—Ç–∞ –¥–Ω—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è—é.');
                return await updateDailyCard(userId, cardData, aiPrediction);
            }
            throw error;
        }

        console.log('üíæ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', cardData.name);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function updateDailyCard(userId, cardData, aiPrediction) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.dailyCards) {
        console.error('TABLES.dailyCards –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const today = new Date().toISOString().split('T')[0];

        const { data, error } = await supabase
            .from(window.TABLES.dailyCards)
            .update({
                card_data: cardData,
                ai_prediction: aiPrediction,
                updated_at: new Date().toISOString() // –û–±–Ω–æ–≤–ª—è–µ–º updated_at
            })
            .eq('user_id', userId)
            .eq('card_date', today)
            .select()
            .single();

        if (error) throw error;

        console.log('üîÑ –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', cardData.name);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è
async function getTodayDailyCard(userId) {
    if (!supabase) return null;
    if (!window.TABLES || !window.TABLES.dailyCards) {
        console.error('TABLES.dailyCards –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return null;
    }

    try {
        const today = new Date().toISOString().split('T')[0];

        const { data, error } = await supabase
            .from(window.TABLES.dailyCards)
            .select('*')
            .eq('user_id', userId)
            .eq('card_date', today)
            .single();

        if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
            throw error;
        }

        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return null;
    }
}

// ‚ùì –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async function saveQuestionToSupabase(userId, questionText, questionType = 'question') {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.questions) {
        console.error('TABLES.questions –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.questions)
            .insert([{
                user_id: userId,
                question_text: questionText,
                question_type: questionType
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', questionText.substring(0, 50) + '...');
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return false;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
async function saveAnswerToSupabase(userId, questionId, cardsDrawn, aiPrediction, spreadType = null) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.answers) {
        console.error('TABLES.answers –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.answers)
            .insert([{
                question_id: questionId,
                user_id: userId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–±–æ—Ä–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
                cards_drawn: cardsDrawn,
                ai_prediction: aiPrediction,
                spread_type: spreadType
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return false;
    }
}

// üé¥ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–ö–õ–ê–î–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
async function saveSpreadToSupabase(userId, spreadName, cardsData, question = null) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.spreads) {
        console.error('TABLES.spreads –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.spreads)
            .insert([{
                user_id: userId,
                spread_name: spreadName,
                cards_data: cardsData,
                question: question
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –†–∞—Å–∫–ª–∞–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', spreadName);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
        return false;
    }
}

// üìö –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–°–¢–û–†–ò–ò

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserHistory(userId, limit = 50) {
    if (!supabase) return [];
    if (!window.TABLES || !window.TABLES.dailyCards || !window.TABLES.questions || !window.TABLES.spreads) {
        console.error('–ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return [];
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–Ω—è
        const { data: dailyCards, error: dailyError } = await supabase
            .from(window.TABLES.dailyCards)
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        // –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏ (tarot_answers —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω–æ —á–µ—Ä–µ–∑ tarot_questions)
        const { data: questionsWithAnswers, error: questionsError } = await supabase
            .from(window.TABLES.questions)
            .select(`
                *,
                ${window.TABLES.answers} (*)
            `)
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã
        const { data: spreads, error: spreadsError } = await supabase
            .from(window.TABLES.spreads)
            .select('*')
            .eq('user_id', userId)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (dailyError || questionsError || spreadsError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:', { dailyError, questionsError, spreadsError });
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        const allHistory = [
            ...(dailyCards || []).map(item => ({ ...item, type: 'daily' })),
            ...(questionsWithAnswers || []).map(item => ({ ...item, type: 'question' })),
            ...(spreads || []).map(item => ({ ...item, type: 'spread' }))
        ].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allHistory.length} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏`);
        return allHistory;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return [];
    }
}

// üí¨ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ó–´–í–û–í

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
async function saveReviewToSupabase(userId, rating, reviewText, isAnonymous = false) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.reviews) {
        console.error('TABLES.reviews –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.reviews)
            .insert([{
                user_id: userId,
                rating: rating,
                review_text: reviewText,
                is_anonymous: isAnonymous,
                is_approved: false // –¢—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            }])
            .select()
            .single();

        if (error) throw error;

        console.log('üíæ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
async function getApprovedReviews(limit = 20) {
    if (!supabase) return [];
    if (!window.TABLES || !window.TABLES.reviews || !window.TABLES.userProfiles) { // –ù—É–∂–µ–Ω userProfiles –¥–ª—è –¥–∂–æ–π–Ω–∞
        console.error('–ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return [];
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.reviews)
            .select(`
                id,
                rating,
                review_text,
                is_anonymous,
                created_at,
                ${window.TABLES.userProfiles} (username, first_name)
            `)
            .eq('is_approved', true)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (error) throw error;

        return data || [];

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        return [];
    }
}

// üìä –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserSubscription(userId) {
    if (!supabase) return { isSubscribed: false, daysLeft: 0 };
    try {
        const userProfile = await getUserProfile(userId);
        if (!userProfile) return { isSubscribed: false, daysLeft: 0 };

        if (!userProfile.is_subscribed || !userProfile.subscription_expiry_date) {
            return { isSubscribed: false, daysLeft: 0 };
        }

        const expiryDate = new Date(userProfile.subscription_expiry_date);
        const now = new Date();
        const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));

        if (daysLeft <= 0) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await updateUserProfile(userId, {
                is_subscribed: false,
                subscription_expiry_date: null
            });
            return { isSubscribed: false, daysLeft: 0 };
        }

        return { isSubscribed: true, daysLeft };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        return { isSubscribed: false, daysLeft: 0 };
    }
}

// –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async function decrementFreeQuestions(userId) {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.userProfiles) {
        console.error('TABLES.userProfiles –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const { data, error } = await supabase
            .from(window.TABLES.userProfiles)
            .update({
                free_predictions_left: supabase.raw('free_predictions_left - 1'),
                total_questions: supabase.raw('total_questions + 1')
            })
            .eq('user_id', userId)
            .select()
            .single();

        if (error) throw error;

        console.log(`üìâ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${data.free_predictions_left}`);
        return data;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞:', error);
        return false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async function cleanupOldRecords() {
    if (!supabase) return false;
    if (!window.TABLES || !window.TABLES.dailyCards || !window.TABLES.questions || !window.TABLES.spreads) {
        console.error('–ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return false;
    }

    try {
        const threeMonthsAgo = new Date();
        threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);

        await supabase
            .from(window.TABLES.dailyCards)
            .delete()
            .lt('created_at', threeMonthsAgo.toISOString());

        await supabase
            .from(window.TABLES.questions)
            .delete()
            .lt('created_at', threeMonthsAgo.toISOString());

        await supabase
            .from(window.TABLES.spreads)
            .delete()
            .lt('created_at', threeMonthsAgo.toISOString());

        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
        return false;
    }
}

// üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° N8N (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)

// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ n8n (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function syncUserToN8N(userProfile) {
    if (!window.API_CONFIG || !window.API_CONFIG.n8nWebhookUrl) {
        console.warn('‚ö†Ô∏è API_CONFIG.n8nWebhookUrl –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å n8n –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
        return;
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ N8N –º–æ–∂–µ—Ç –∏—Ö —Ä–∞–∑–ª–∏—á–∞—Ç—å.
    // –ï—Å–ª–∏ —É –≤–∞—Å —Ä–∞–∑–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å API_CONFIG
    // –ù–∞–ø—Ä–∏–º–µ—Ä, API_CONFIG.createUserWebhook, API_CONFIG.generatePredictionWebhook
    const n8nSyncUrl = window.API_CONFIG.n8nWebhookUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫
    
    try {
        const response = await fetch(n8nSyncUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'sync_user', // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ action –¥–ª—è n8n
                user_id: userProfile.user_id,
                chat_id: userProfile.chat_id,
                username: userProfile.username,
                first_name: userProfile.first_name,
                free_predictions_left: userProfile.free_predictions_left,
                is_subscribed: userProfile.is_subscribed,
                subscription_expiry_date: userProfile.subscription_expiry_date,
                referral_code: userProfile.referral_code,
                source: 'supabase_sync_webapp'
            })
        });

        if (response.ok) {
            console.log('üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å n8n');
        } else {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å n8n: ${response.status} - ${await response.text()}`);
        }

    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å n8n:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ n8n –¥–ª—è –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∏
async function sendPredictionToN8N(userId, question, cardsData, type = 'question') {
    if (!window.API_CONFIG || !window.API_CONFIG.n8nWebhookUrl) {
        console.error('‚ùå API_CONFIG.n8nWebhookUrl –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò.');
        return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.';
    }
    const n8nPredictionUrl = window.API_CONFIG.n8nWebhookUrl; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫

    try {
        const response = await fetch(n8nPredictionUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'generate_prediction', // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ action –¥–ª—è n8n
                user_id: userId,
                question: question,
                cards: cardsData,
                type: type,
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${await response.text()}`);
        }

        const result = await response.json();
        console.log('ü§ñ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç n8n');
        return result.prediction || result.message || '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.';

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç n8n:', error);
        return '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}

// üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –§–£–ù–ö–¶–ò–ò (–æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–µ Supabase + n8n)

// –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
async function saveCompleteQuestionSession(userId, questionText, cardsData, aiPrediction, questionType = 'question') {
    const results = {
        question: null,
        answer: null,
        profile: null,
        n8nSync: false
    };

    try {
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Supabase
        results.question = await saveQuestionToSupabase(userId, questionText, questionType);

        if (results.question) {
            // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ Supabase
            results.answer = await saveAnswerToSupabase(
                userId,
                results.question.id,
                cardsData,
                aiPrediction
            );

            // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º)
            const userProfile = await getUserProfile(userId);
            if (userProfile && !userProfile.is_subscribed && questionType !== 'daily') {
                results.profile = await decrementFreeQuestions(userId);
            }

            // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ n8n –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            try {
                // –ï—Å–ª–∏ API_CONFIG.saveQuestion –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç n8nWebhookUrl, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.
                // –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —É –≤–∞—Å –æ–¥–∏–Ω n8nWebhookUrl.
                await fetch(API_CONFIG.n8nWebhookUrl, { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        action: 'save_question_session', // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ action –¥–ª—è n8n
                        user_id: userId,
                        question: questionText,
                        cards: cardsData,
                        ai_prediction: aiPrediction,
                        type: questionType,
                        supabase_question_id: results.question.id
                    })
                });
                results.n8nSync = true;
            } catch (n8nError) {
                console.warn('‚ö†Ô∏è n8n —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏):', n8nError);
            }
        }

        console.log('üíæ –°–µ—Å—Å–∏—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return results;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return results;
    }
}

// –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è —Å –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
async function saveCompleteDailyCardSession(userId, cardData, aiPrediction) { // aiPrediction —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    try {
        // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
        const savedCard = await saveDailyCardToSupabase(userId, cardData, aiPrediction);

        // 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã –¥–Ω—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if (savedCard) {
            await updateUserProfile(userId, {
                last_card_day: new Date().toISOString().split('T')[0]
            });
        }

        console.log('üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        return savedCard;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return false;
    }
}

// üì± –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM WEB APP

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
window.initTelegramUser = async function() { // –î–µ–ª–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π
    try {
        let telegramUser = null;

        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe && window.Telegram.WebApp.initDataUnsafe.user) {
            telegramUser = window.Telegram.WebApp.initDataUnsafe.user;
        }

        if (!telegramUser) {
            console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.');
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ Telegram:
            // –í–∞–∂–Ω–æ: Telegram user ID - —ç—Ç–æ BIGINT, –∞ Supabase user_id —Ç–µ–ø–µ—Ä—å UUID.
            // –î–ª—è —Å–≤—è–∑–∫–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram user ID –∫–∞–∫ `telegram_id` –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ.
            // –ù–æ –≤ —ç—Ç–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏, –ø–æ–∫–∞ –Ω–µ—Ç Supabase Auth (–ª–æ–≥–∏–Ω–∞), –Ω–∞–º –Ω—É–∂–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π UUID –¥–ª—è Supabase.
            // –ï—Å–ª–∏ user_id –≤ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ –æ—Å—Ç–∞–ª—Å—è BIGINT, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ telegramUser.id –∫–∞–∫ user_id.
            // –ò–ù–ê–ß–ï, –µ—Å–ª–∏ user_id –≤ Supabase UUID, –∏ –Ω–µ—Ç Telegram Auth,
            // —Ç–æ–≥–¥–∞ `currentUser` –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å `auth.uid()`, –∏ RLS –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.

            // **** –î–ê–í–ê–ô–¢–ï –ü–†–ï–î–ü–û–õ–û–ñ–ò–ú, —á—Ç–æ user_id –≤ `tarot_user_profiles` —ç—Ç–æ BIGINT (Telegram ID) ****
            // –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç.–∫. –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ `user_id` –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö.
            // –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ UUID, —Ç–æ —ç—Ç–∞ —á–∞—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –Ω–∞–ª–∏—á–∏—è `telegram_id` –ø–æ–ª—è.

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Telegram ID
            const testTelegramId = 1000000000 + Math.floor(Math.random() * 999999999); // –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ BIGINT
            telegramUser = {
                id: testTelegramId,
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                username: `test_user_${testTelegramId}`,
                language_code: 'ru',
                chat_id: testTelegramId // –î–æ–±–∞–≤–∏–º chat_id
            };
            console.warn(`–ò—Å–ø–æ–ª—å–∑—É—é —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramUser.first_name} (ID: ${telegramUser.id})`);
        }

        console.log('üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', telegramUser.first_name, `(ID: ${telegramUser.id})`);

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –í–ê–ñ–ù–û: –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `user_id` –≤ Supabase - —ç—Ç–æ `BIGINT` –∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å `telegramUser.id`.
        // –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –µ–≥–æ –Ω–∞ `UUID`, —Ç–æ —ç—Ç–∞ —á–∞—Å—Ç—å –ø–æ—Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Å—Ö–µ–º—ã –ë–î –∏ –ª–æ–≥–∏–∫–∏.
        const userProfile = await createOrGetUserProfile(telegramUser);

        if (userProfile) {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å n8n –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await syncUserToN8N(userProfile);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if (window.appState) {
                window.currentUser = userProfile; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                window.appState.questionsLeft = userProfile.free_predictions_left;
                window.appState.isPremium = userProfile.is_subscribed;
                window.updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            } else {
                console.warn('‚ö†Ô∏è window.appState –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ initTelegramUser.');
            }

            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
            return userProfile;
        }

        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        return null;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// üîç –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò

// –ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
async function searchUserHistory(userId, searchText, type = null) {
    if (!supabase || !searchText) return [];
    if (!window.TABLES || !window.TABLES.questions) {
        console.error('TABLES.questions –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.');
        return [];
    }

    try {
        let query = supabase
            .from(window.TABLES.questions)
            .select(`
                *,
                ${window.TABLES.answers} (*)
            `)
            .eq('user_id', userId)
            .ilike('question_text', `%${searchText}%`);

        if (type) {
            query = query.eq('question_type', type);
        }

        const { data, error } = await query
            .order('created_at', { ascending: false })
            .limit(20);

        if (error) throw error;

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchText}"`);
        return data || [];

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStatistics(userId) {
    if (!supabase) return null;
    if (!window.TABLES || !window.TABLES.userProfiles || !window.TABLES.dailyCards || !window.TABLES.questions || !window.TABLES.spreads) {
        console.error('–ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.');
        return null;
    }

    try {
        const userProfile = await getUserProfile(userId);
        if (!userProfile) return null;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        const [dailyCardsCount, questionsCount, spreadsCount] = await Promise.all([
            supabase.from(window.TABLES.dailyCards).select('id', { count: 'exact' }).eq('user_id', userId),
            supabase.from(window.TABLES.questions).select('id', { count: 'exact' }).eq('user_id', userId),
            supabase.from(window.TABLES.spreads).select('id', { count: 'exact' }).eq('user_id', userId)
        ]);

        const stats = {
            profile: userProfile,
            dailyCards: dailyCardsCount.count || 0,
            totalQuestions: questionsCount.count || 0,
            spreads: spreadsCount.count || 0,
            freeQuestionsLeft: userProfile.free_predictions_left,
            isSubscribed: userProfile.is_subscribed,
            memberSince: userProfile.created_at
        };

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞');
        return stats;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return null;
    }
}

// üõ°Ô∏è –§–£–ù–ö–¶–ò–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ò –í–ê–õ–ò–î–ê–¶–ò–ò

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DB)
function validateUserData(userData) {
    const required = ['id']; // Telegram ID
    const optional = ['username', 'first_name', 'last_name', 'chat_id'];

    for (const field of required) {
        if (!userData[field]) {
            throw new Error(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${field}`);
        }
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const sanitized = {};
    [...required, ...optional].forEach(field => {
        if (userData[field] !== undefined) {
            sanitized[field] = typeof userData[field] === 'string'
                ? userData[field].trim().substring(0, 255)
                : userData[field];
        }
    });

    return sanitized;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function checkUserPermissions(userId, action) {
    return true;
}

// üîÑ –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –§–ê–ô–õ–ê–•
// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
window.createOrGetUserProfile = createOrGetUserProfile;
window.updateUserProfile = updateUserProfile;
window.getUserProfile = getUserProfile;
window.saveDailyCardToSupabase = saveDailyCardToSupabase;
window.getTodayDailyCard = getTodayDailyCard;
window.saveQuestionToSupabase = saveQuestionToSupabase;
window.saveAnswerToSupabase = saveAnswerToSupabase;
window.saveSpreadToSupabase = saveSpreadToSupabase;
window.getUserHistory = getUserHistory;
window.saveReviewToSupabase = saveReviewToSupabase;
window.getApprovedReviews = getApprovedReviews;
window.checkUserSubscription = checkUserSubscription;
window.decrementFreeQuestions = decrementFreeQuestions;
window.saveCompleteQuestionSession = saveCompleteQuestionSession;
window.saveCompleteDailyCardSession = saveCompleteDailyCardSession;
window.sendPredictionToN8N = sendPredictionToN8N;
window.syncUserToN8N = syncUserToN8N;

console.log('üìú Supabase-functions.js –∑–∞–≥—Ä—É–∂–µ–Ω. –§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ.');
