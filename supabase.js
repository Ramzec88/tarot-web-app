// supabase.js - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase –¥–ª—è Tarot Web App
// ========================================================================

console.log('üîó –ó–∞–≥—Ä—É–∑–∫–∞ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

// üåê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SUPABASE –ö–õ–ò–ï–ù–¢–ê
let supabaseClient = null;

async function initializeSupabase() {
    try {
        console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        let config = null;
        let attempts = 0;
        const maxAttempts = 30; // 3 —Å–µ–∫—É–Ω–¥—ã
        
        while (!config && attempts < maxAttempts) {
            if (typeof window.getSupabaseConfig === 'function') {
                config = window.getSupabaseConfig();
            }
            
            if (!config) {
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
        }
        
        if (!config || !config.url || !config.anonKey) {
            console.warn('‚ö†Ô∏è Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (config.url.includes('your-project') || config.anonKey.includes('your-anon')) {
            console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã placeholder –∑–Ω–∞—á–µ–Ω–∏—è Supabase, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return false;
        }

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        if (typeof window.supabase === 'undefined') {
            console.log('üìö –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤ HTML
            const supabaseScript = document.querySelector('script[src*="supabase"]');
            if (!supabaseScript) {
                console.warn('‚ö†Ô∏è Supabase —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML');
                return false;
            }
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            let libAttempts = 0;
            const maxLibAttempts = 50; // 5 —Å–µ–∫—É–Ω–¥
            
            while (typeof window.supabase === 'undefined' && libAttempts < maxLibAttempts) {
                await new Promise(resolve => setTimeout(resolve, 100));
                libAttempts++;
            }
            
            if (typeof window.supabase === 'undefined') {
                console.warn('‚ö†Ô∏è Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                return false;
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        try {
            supabaseClient = window.supabase.createClient(config.url, config.anonKey, {
                auth: {
                    persistSession: false,
                    autoRefreshToken: false,
                    detectSessionInUrl: false
                },
                db: {
                    schema: 'public'
                },
                global: {
                    headers: {
                        'x-application': 'tarot-web-app',
                        'apikey': config.anonKey
                    }
                },
                realtime: {
                    disabled: true // –û—Ç–∫–ª—é—á–∞–µ–º realtime –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                },
                // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                debug: true
            });
            
            console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', config.url.replace(/\/\/.*@/, '//***@'));
            
        } catch (clientError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞:', clientError);
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const { error } = await supabaseClient
                .from('tarot_user_profiles')
                .select('count', { count: 'exact', head: true })
                .abortSignal(controller.signal);
                
            clearTimeout(timeoutId);
                
            if (error) {
                if (error.name === 'AbortError') {
                    console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                } else {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
                }
                return false;
            }
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            return true;
            
        } catch (connectionError) {
            if (connectionError.name === 'AbortError') {
                console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase');
            } else {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionError.message);
            }
            return false;
        }
            
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        return false;
    }
}

// üßπ –§–£–ù–ö–¶–ò–ò –°–ê–ù–ò–¢–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•

// –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è Telegram ID
function sanitizeTelegramId(telegramId) {
    if (!telegramId) return null;
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID
    if (typeof telegramId === 'object' && telegramId !== null) {
        if (telegramId.id) return sanitizeTelegramId(telegramId.id);
        if (telegramId.chat_id) return sanitizeTelegramId(telegramId.chat_id);
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ telegram_id:', telegramId);
        return null;
    }
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ –æ—á–∏—â–∞–µ–º
    const cleaned = String(telegramId).trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ JSON
    if (cleaned.startsWith('{') || cleaned.startsWith('[')) {
        console.warn('‚ö†Ô∏è Telegram ID –ø–æ—Ö–æ–∂ –Ω–∞ JSON:', cleaned);
        return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ID (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
    if (!/^-?\d+$/.test(cleaned) && !/^[a-zA-Z0-9_]+$/.test(cleaned)) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID:', cleaned);
        return null;
    }
    
    return cleaned;
}

// –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è username
function sanitizeUsername(username) {
    if (!username || username === null || username === undefined) return null;
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ –æ—á–∏—â–∞–µ–º
    const cleaned = String(username).trim();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if (cleaned.length > 100) {
        return cleaned.substring(0, 100);
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return cleaned.replace(/[<>]/g, '');
}

// üìù –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUserProfile(telegramId, username = null) {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ID:', telegramId);
    
    let userProfile = await getUserProfile(telegramId);
    
    if (!userProfile) {
        console.log('üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
        userProfile = await createUserProfile(telegramId, username);
    }
    
    return userProfile;
}

async function createUserProfile(telegramId, username = null) {
    if (!supabaseClient) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        return saveUserProfileLocally(telegramId, username);
    }

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥
        
        // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const sanitizedTelegramId = sanitizeTelegramId(telegramId);
        if (!sanitizedTelegramId) {
            console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', telegramId);
            return saveUserProfileLocally(telegramId, username);
        }
        
        const sanitizedUsername = sanitizeUsername(username);
        
        // For RLS Option A: Use upsert with telegram_id for idempotent operations
        const { data, error } = await supabaseClient
            .from('tarot_user_profiles')
            .upsert([
                {
                    telegram_id: sanitizedTelegramId, // Only telegram_id for anon insert
                    username: sanitizedUsername,
                    is_subscribed: false,
                    questions_used: 0, // Changed from total_questions to questions_used (default 0)
                    free_predictions_left: 3,
                    last_card_day: null
                }
            ], { 
                onConflict: 'telegram_id',
                ignoreDuplicates: false // Always update on conflict
            })
            .select()
            .single()
            .abortSignal(controller.signal);

        clearTimeout(timeoutId);

        if (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
            return saveUserProfileLocally(telegramId, username);
        }
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω –≤ Supabase:', data);
        return data;
    } catch (error) {
        if (error.name === 'AbortError') {
            console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ Supabase');
        } else {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        }
        return saveUserProfileLocally(telegramId, username);
    }
}

async function getUserProfile(telegramId) {
    if (!supabaseClient) {
        return getUserProfileLocally(telegramId);
    }

    try {
        // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è telegram_id
        const sanitizedTelegramId = sanitizeTelegramId(telegramId);
        if (!sanitizedTelegramId) {
            console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', telegramId);
            return null;
        }
        
        const { data, error } = await supabaseClient
            .from('tarot_user_profiles')
            .select('*')
            .eq('telegram_id', sanitizedTelegramId) // Using sanitized telegram_id
            .maybeSingle();

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Supabase
        console.log('üîç Supabase response for getUserProfile:', { 
            originalTelegramId: telegramId,
            sanitizedTelegramId: sanitizedTelegramId, 
            data: data || null, 
            error: error || null,
            errorCode: error?.code,
            errorMessage: error?.message,
            errorDetails: error?.details
        });

        // –° .maybeSingle() –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å PGRST116, null –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
            return null;
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, data –±—É–¥–µ—Ç null
        if (!data) {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID:', telegramId);
            return null;
        }
        
        return data;
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.message);
        return null;
    }
}

async function updateUserProfile(telegramId, updates) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    const userProfile = await getUserProfile(telegramId);
    if (!userProfile) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
    }

    if (!supabaseClient) {
        return updateUserProfileLocally(telegramId, updates);
    }

    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º telegram_id
        if (!telegramId || telegramId.toString().trim() === '') {
            console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π Telegram ID');
            return null;
        }
        
        const { data, error } = await supabaseClient
            .from('tarot_user_profiles')
            .update(updates)
            .eq('telegram_id', telegramId) // Using telegram_id consistently
            .select()
            .single();

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            return null;
        }
        
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return null;
    }
}

// üÉè –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ï–ñ–ï–î–ù–ï–í–ù–´–ú–ò –ö–ê–†–¢–ê–ú–ò
async function saveDailyCard(telegramId, cardData) {
    if (!supabaseClient) {
        return saveDailyCardLocally(telegramId, cardData);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        const userProfile = await getOrCreateUserProfile(telegramId);
        if (!userProfile || !userProfile.user_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
            return saveDailyCardLocally(telegramId, cardData);
        }

        const { data, error } = await supabaseClient
            .from('tarot_daily_cards')
            .insert([
                {
                    user_id: userProfile.user_id,
                    card_data: {
                        id: cardData.id,
                        name: cardData.name,
                        image: cardData.image,
                        description: cardData.description
                    },
                    card_date: new Date().toISOString().split('T')[0],
                    ai_prediction: cardData.interpretation
                }
            ])
            .select()
            .single();

        if (error) throw error;
        
        console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return saveDailyCardLocally(telegramId, cardData);
    }
}

async function getDailyCard(telegramId, date = null) {
    if (!supabaseClient) {
        return getDailyCardLocally(telegramId, date);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        const userProfile = await getOrCreateUserProfile(telegramId);
        if (!userProfile || !userProfile.user_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ');
            return getDailyCardLocally(telegramId, date);
        }

        const targetDate = date || new Date().toISOString().split('T')[0];
        
        const { data, error } = await supabaseClient
            .from('tarot_daily_cards')
            .select('*')
            .eq('user_id', userProfile.user_id)
            .eq('card_date', targetDate)
            .single();

        if (error && error.code !== 'PGRST116') throw error;
        
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return getDailyCardLocally(telegramId, date);
    }
}

// ‚ùì –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–û–ü–†–û–°–ê–ú–ò
async function saveQuestion(telegramId, questionText) {
    if (!supabaseClient) {
        return saveQuestionLocally(telegramId, questionText);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        const userProfile = await getOrCreateUserProfile(telegramId);
        if (!userProfile || !userProfile.user_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
            return saveQuestionLocally(telegramId, questionText);
        }

        const { data, error } = await supabaseClient
            .from('tarot_questions')
            .insert([
                {
                    user_id: userProfile.user_id,
                    question_text: questionText,
                    created_at: new Date().toISOString()
                }
            ])
            .select()
            .single();

        if (error) throw error;
        
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return saveQuestionLocally(telegramId, questionText);
    }
}

async function saveAnswer(questionId, cardData, interpretation) {
    if (!supabaseClient) {
        return saveAnswerLocally(questionId, cardData, interpretation);
    }

    try {
        const { data, error } = await supabaseClient
            .from('tarot_answers')
            .insert([
                {
                    question_id: questionId,
                    user_id: null, // –ü–æ–∫–∞ null, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è user_id
                    cards_drawn: [{ // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        id: cardData.id,
                        name: cardData.name,
                        image: cardData.image,
                        description: cardData.description
                    }],
                    ai_prediction: interpretation, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ai_prediction –≤–º–µ—Å—Ç–æ interpretation
                    spread_type: 'single_card', // –¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
                    created_at: new Date().toISOString()
                }
            ])
            .select()
            .single();

        if (error) throw error;
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return saveAnswerLocally(questionId, cardData, interpretation);
    }
}

// ‚≠ê –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–¢–ó–´–í–ê–ú–ò
async function saveReview(telegramId, rating, reviewText) {
    if (!supabaseClient) {
        return saveReviewLocally(telegramId, rating, reviewText);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        const userProfile = await getOrCreateUserProfile(telegramId);
        if (!userProfile || !userProfile.user_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
            return saveReviewLocally(telegramId, rating, reviewText);
        }

        const { data, error } = await supabaseClient
            .from('tarot_reviews')
            .insert([
                {
                    user_id: userProfile.user_id,
                    rating: rating,
                    review_text: reviewText,
                    created_at: new Date().toISOString()
                }
            ])
            .select()
            .single();

        if (error) throw error;
        
        console.log('‚úÖ –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        return saveReviewLocally(telegramId, rating, reviewText);
    }
}

async function getReviews(limit = 10, currentPage = 1, perPage = null) {
    if (!supabaseClient) {
        return getReviewsLocally(limit);
    }

    try {
        let query = supabaseClient
            .from('tarot_reviews')
            .select('rating, review_text, created_at')
            .order('created_at', { ascending: false });

        // If pagination parameters are provided, use them instead of simple limit
        if (perPage !== null && currentPage !== null) {
            // Sanitize pagination parameters to prevent PGRST103 errors
            const page = Math.max(1, Number(currentPage || 1));
            const pageSize = Math.max(1, Math.min(100, Number(perPage || 10))); // Max 100 per page
            const from = (page - 1) * pageSize;
            const to = from + pageSize - 1;
            
            console.log('üîç Sanitized pagination:', { page, pageSize, from, to });
            query = query.range(from, to);
        } else {
            // Sanitize simple limit
            const sanitizedLimit = Math.max(1, Math.min(100, Number(limit || 10)));
            console.log('üîç Sanitized limit:', sanitizedLimit);
            query = query.limit(sanitizedLimit);
        }

        const { data, error } = await query;

        if (error) throw error;
        
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        return getReviewsLocally(limit);
    }
}

// üìö –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–°–¢–û–†–ò–ï–ô
async function getUserHistory(telegramId, limit = 20) {
    if (!supabaseClient) {
        return getUserHistoryLocally(telegramId, limit);
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        const userProfile = await getOrCreateUserProfile(telegramId);
        if (!userProfile || !userProfile.user_id) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é');
            return getUserHistoryLocally(telegramId, limit);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tarot_answers –∏ –µ—ë –∫–æ–ª–æ–Ω–æ–∫
        const { data: questionsData, error: questionsError } = await supabaseClient
            .from('tarot_questions')
            .select(`
                id,
                question_text,
                created_at
            `)
            .eq('user_id', userProfile.user_id)
            .order('created_at', { ascending: false })
            .limit(limit);
            
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (questionsError) {
            console.log('üîç Questions query error details:', questionsError);
        }

        if (questionsError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsError.message);
            return getUserHistoryLocally(telegramId, limit);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç
        const { data: dailyCardsData, error: dailyCardsError } = await supabaseClient
            .from('tarot_daily_cards')
            .select('*')
            .eq('user_id', userProfile.user_id)
            .order('created_at', { ascending: false })
            .limit(limit);

        if (dailyCardsError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç:', dailyCardsError.message);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            return {
                questions: questionsData || [],
                dailyCards: []
            };
        }

        return {
            questions: questionsData || [],
            dailyCards: dailyCardsData || []
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        return getUserHistoryLocally(telegramId, limit);
    }
}

// üíæ –õ–û–ö–ê–õ–¨–ù–´–ï FALLBACK –§–£–ù–ö–¶–ò–ò
function saveUserProfileLocally(telegramId, username) {
    const profile = {
        user_id: null, // Nullable for guests
        telegram_id: telegramId.toString(), // Ensure it's a string
        username: username,
        is_subscribed: false, // Changed from is_premium to match schema
        questions_used: 0, // Default 0
        free_predictions_left: 3,
        last_card_day: null,
        created_at: new Date().toISOString()
    };
    
    localStorage.setItem(`tarot_profile_${telegramId}`, JSON.stringify(profile));
    return profile;
}

function getUserProfileLocally(telegramId) {
    const stored = localStorage.getItem(`tarot_profile_${telegramId}`);
    return stored ? JSON.parse(stored) : null;
}

function updateUserProfileLocally(telegramId, updates) {
    const profile = getUserProfileLocally(telegramId) || saveUserProfileLocally(telegramId);
    const updated = { ...profile, ...updates };
    localStorage.setItem(`tarot_profile_${telegramId}`, JSON.stringify(updated));
    return updated;
}

function saveDailyCardLocally(telegramId, cardData) {
    const dailyCard = {
        telegram_id: telegramId,
        card_id: cardData.id,
        card_name: cardData.name,
        interpretation: cardData.interpretation,
        date: new Date().toISOString().split('T')[0],
        created_at: new Date().toISOString()
    };
    
    localStorage.setItem(`tarot_daily_${telegramId}_${dailyCard.date}`, JSON.stringify(dailyCard));
    return dailyCard;
}

function getDailyCardLocally(telegramId, date) {
    const targetDate = date || new Date().toISOString().split('T')[0];
    const stored = localStorage.getItem(`tarot_daily_${telegramId}_${targetDate}`);
    return stored ? JSON.parse(stored) : null;
}

function saveQuestionLocally(telegramId, questionText) {
    const question = {
        id: Date.now(),
        telegram_id: telegramId,
        question_text: questionText,
        created_at: new Date().toISOString()
    };
    
    const questions = getQuestionsLocally(telegramId);
    questions.push(question);
    localStorage.setItem(`tarot_questions_${telegramId}`, JSON.stringify(questions));
    return question;
}

function getQuestionsLocally(telegramId) {
    const stored = localStorage.getItem(`tarot_questions_${telegramId}`);
    return stored ? JSON.parse(stored) : [];
}

function saveAnswerLocally(questionId, cardData, interpretation) {
    const answer = {
        id: Date.now(),
        question_id: questionId,
        card_id: cardData.id,
        card_name: cardData.name,
        interpretation: interpretation,
        created_at: new Date().toISOString()
    };
    
    const answers = getAnswersLocally();
    answers.push(answer);
    localStorage.setItem('tarot_answers', JSON.stringify(answers));
    return answer;
}

function getAnswersLocally() {
    const stored = localStorage.getItem('tarot_answers');
    return stored ? JSON.parse(stored) : [];
}

function saveReviewLocally(telegramId, rating, reviewText) {
    const review = {
        id: Date.now(),
        telegram_id: telegramId,
        rating: rating,
        review_text: reviewText,
        created_at: new Date().toISOString()
    };
    
    const reviews = getReviewsLocally();
    reviews.push(review);
    localStorage.setItem('tarot_reviews', JSON.stringify(reviews));
    return review;
}

function getReviewsLocally(limit = 10) {
    const stored = localStorage.getItem('tarot_reviews');
    const reviews = stored ? JSON.parse(stored) : [];
    return reviews
        .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
        .slice(0, limit);
}

function getUserHistoryLocally(telegramId, limit = 20) {
    const questions = getQuestionsLocally(telegramId);
    const answers = getAnswersLocally();
    const dailyCards = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ localStorage
    for (let i = 0; i < 30; i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        const date = new Date();
        date.setDate(date.getDate() - i);
        const dateStr = date.toISOString().split('T')[0];
        const card = getDailyCardLocally(telegramId, dateStr);
        if (card) dailyCards.push(card);
    }
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    const questionsWithAnswers = questions.map(question => {
        const questionAnswers = answers.filter(answer => answer.question_id === question.id);
        return {
            ...question,
            tarot_answers: questionAnswers
        };
    });
    
    return {
        questions: questionsWithAnswers.slice(0, limit),
        dailyCards: dailyCards.slice(0, limit)
    };
}

// üîß –£–¢–ò–õ–ò–¢–´
function isSupabaseConnected() {
    return supabaseClient !== null;
}

function getConnectionStatus() {
    return {
        connected: isSupabaseConnected(),
        mode: isSupabaseConnected() ? 'online' : 'offline',
        client: supabaseClient ? 'initialized' : 'not_initialized'
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü (–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è)
async function checkTableStructure(tableName) {
    if (!supabaseClient) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü');
        return null;
    }
    
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏–∑ –æ—à–∏–±–∫–∏
        const { data, error } = await supabaseClient
            .from(tableName)
            .select('*')
            .limit(1);
            
        if (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${tableName}:`, error);
            return { error, exists: false };
        } else {
            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:`, data);
            return { data, exists: true, structure: data[0] ? Object.keys(data[0]) : [] };
        }
    } catch (err) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${tableName}:`, err);
        return { error: err, exists: false };
    }
}

// üîÑ –§–£–ù–ö–¶–ò–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
async function syncUserDataToSupabase(telegramId, localData) {
    if (!supabaseClient) {
        console.warn('‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
        return false;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Supabase
        const currentProfile = await getUserProfile(telegramId);
        if (!currentProfile) {
            console.warn('‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase');
            return false;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        const updates = {};
        
        if (localData.questionsUsed > (currentProfile.total_questions || 0)) {
            updates.total_questions = localData.questionsUsed;
        }
        
        if (localData.isPremium !== currentProfile.is_subscribed) {
            updates.is_subscribed = localData.isPremium;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        const freeLeft = Math.max(0, 3 - localData.questionsUsed);
        if (freeLeft !== currentProfile.free_predictions_left) {
            updates.free_predictions_left = freeLeft;
        }
        
        if (localData.dailyCardUsed && localData.lastCardDay) {
            const currentDate = new Date().toISOString().split('T')[0];
            if (localData.lastCardDay === currentDate && currentProfile.last_card_day !== currentDate) {
                updates.last_card_day = currentDate;
            }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Supabase
        if (Object.keys(updates).length > 0) {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å Supabase:', updates);
            await updateUserProfile(telegramId, updates);
            return true;
        }

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase:', error);
        return false;
    }
}

async function syncUserDataFromSupabase(telegramId) {
    if (!supabaseClient) {
        return null;
    }

    try {
        const profile = await getUserProfile(telegramId);
        if (!profile) {
            return null;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const syncedData = {
            isPremium: profile.is_subscribed || false,
            questionsUsed: profile.total_questions || 0,
            dailyCardUsed: profile.last_card_day === new Date().toISOString().split('T')[0],
            lastCardDay: profile.last_card_day,
            freeQuestionsLeft: profile.free_predictions_left || 3
        };

        console.log('üì• –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Supabase:', syncedData);
        return syncedData;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase:', error);
        return null;
    }
}

async function performDataSync(telegramId, localAppState) {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
        const supabaseData = await syncUserDataFromSupabase(telegramId);
        
        if (supabaseData) {
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
            const mergedState = {
                isPremium: supabaseData.isPremium || localAppState.isPremium,
                questionsUsed: Math.max(supabaseData.questionsUsed, localAppState.questionsUsed || 0),
                dailyCardUsed: supabaseData.dailyCardUsed || localAppState.dailyCardUsed,
                lastCardDay: supabaseData.lastCardDay || localAppState.lastCardDay
            };

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Supabase –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–µ
            await syncUserDataToSupabase(telegramId, localAppState);
            
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            return mergedState;
        } else {
            // –ï—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
            return localAppState;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return localAppState;
    }
}

// üåü –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
window.TarotDB = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initialize: initializeSupabase,
    isConnected: isSupabaseConnected,
    getStatus: getConnectionStatus,
    checkTableStructure: checkTableStructure,
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    createUserProfile,
    getUserProfile,
    getOrCreateUserProfile,
    updateUserProfile,
    
    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã
    saveDailyCard,
    getDailyCard,
    
    // –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    saveQuestion,
    saveAnswer,
    
    // –û—Ç–∑—ã–≤—ã
    saveReview,
    getReviews,
    getUserReviews: getReviews, // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    // –ò—Å—Ç–æ—Ä–∏—è –∏ —á—Ç–µ–Ω–∏—è
    getUserHistory,
    getUserReadings: getUserHistory, // –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    saveReading: saveQuestion, // –ê–ª–∏–∞—Å –¥–ª—è saveQuestion
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    syncUserDataToSupabase,
    syncUserDataFromSupabase,
    performDataSync
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
console.log('‚úÖ Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('üîß TarotDB —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω:', typeof window.TarotDB);
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(window.TarotDB));

// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
if (typeof window.dispatchEvent === 'function') {
    window.dispatchEvent(new CustomEvent('TarotDB-ready', { 
        detail: { 
            timestamp: new Date().toISOString(),
            methods: Object.keys(window.TarotDB)
        }
    }));
}

// üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TarotDB...');
initializeSupabase().then(() => {
    console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TarotDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', window.TarotDB.getStatus());
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TarotDB:', error);
});
